In archive libArduino.a:

HardwareSerial.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000c02  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000022  00000000  00000000  00000c36  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000097  00000000  00000000  00000c58  2**0
                  ALLOC
  3 .stab         00000be8  00000000  00000000  00000c58  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001111  00000000  00000000  00001840  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .ctors        00000002  00000000  00000000  00002951  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, DATA

Disassembly of section .text:

00000000 <_Z10store_charhP11ring_buffer>:
ring_buffer rx_buffer1 = { { 0 }, 0, 0 };
ring_buffer rx_buffer2 = { { 0 }, 0, 0 };
ring_buffer rx_buffer3 = { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *rx_buffer)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_Z10store_charhP11ring_buffer+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <_Z10store_charhP11ring_buffer+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	7d 83       	std	Y+5, r23	; 0x05
  12:	6c 83       	std	Y+4, r22	; 0x04
{
  int i = (rx_buffer->head + 1) % RX_BUFFER_SIZE;
  14:	8c 81       	ldd	r24, Y+4	; 0x04
  16:	9d 81       	ldd	r25, Y+5	; 0x05
  18:	fc 01       	movw	r30, r24
  1a:	e0 58       	subi	r30, 0x80	; 128
  1c:	ff 4f       	sbci	r31, 0xFF	; 255
  1e:	80 81       	ld	r24, Z
  20:	91 81       	ldd	r25, Z+1	; 0x01
  22:	01 96       	adiw	r24, 0x01	; 1
  24:	20 e8       	ldi	r18, 0x80	; 128
  26:	30 e0       	ldi	r19, 0x00	; 0
  28:	b9 01       	movw	r22, r18
  2a:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
  2e:	9a 83       	std	Y+2, r25	; 0x02
  30:	89 83       	std	Y+1, r24	; 0x01

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != rx_buffer->tail) {
  32:	8c 81       	ldd	r24, Y+4	; 0x04
  34:	9d 81       	ldd	r25, Y+5	; 0x05
  36:	fc 01       	movw	r30, r24
  38:	ee 57       	subi	r30, 0x7E	; 126
  3a:	ff 4f       	sbci	r31, 0xFF	; 255
  3c:	20 81       	ld	r18, Z
  3e:	31 81       	ldd	r19, Z+1	; 0x01
  40:	89 81       	ldd	r24, Y+1	; 0x01
  42:	9a 81       	ldd	r25, Y+2	; 0x02
  44:	28 17       	cp	r18, r24
  46:	39 07       	cpc	r19, r25
  48:	01 f0       	breq	.+0      	; 0x4a <_Z10store_charhP11ring_buffer+0x4a>
    rx_buffer->buffer[rx_buffer->head] = c;
  4a:	8c 81       	ldd	r24, Y+4	; 0x04
  4c:	9d 81       	ldd	r25, Y+5	; 0x05
  4e:	fc 01       	movw	r30, r24
  50:	e0 58       	subi	r30, 0x80	; 128
  52:	ff 4f       	sbci	r31, 0xFF	; 255
  54:	20 81       	ld	r18, Z
  56:	31 81       	ldd	r19, Z+1	; 0x01
  58:	8c 81       	ldd	r24, Y+4	; 0x04
  5a:	9d 81       	ldd	r25, Y+5	; 0x05
  5c:	fc 01       	movw	r30, r24
  5e:	e2 0f       	add	r30, r18
  60:	f3 1f       	adc	r31, r19
  62:	8b 81       	ldd	r24, Y+3	; 0x03
  64:	80 83       	st	Z, r24
    rx_buffer->head = i;
  66:	8c 81       	ldd	r24, Y+4	; 0x04
  68:	9d 81       	ldd	r25, Y+5	; 0x05
  6a:	fc 01       	movw	r30, r24
  6c:	e0 58       	subi	r30, 0x80	; 128
  6e:	ff 4f       	sbci	r31, 0xFF	; 255
  70:	89 81       	ldd	r24, Y+1	; 0x01
  72:	9a 81       	ldd	r25, Y+2	; 0x02
  74:	91 83       	std	Z+1, r25	; 0x01
  76:	80 83       	st	Z, r24
  }
}
  78:	0f 90       	pop	r0
  7a:	0f 90       	pop	r0
  7c:	0f 90       	pop	r0
  7e:	0f 90       	pop	r0
  80:	0f 90       	pop	r0
  82:	cf 91       	pop	r28
  84:	df 91       	pop	r29
  86:	08 95       	ret

00000088 <__vector_18>:
#else

#if defined(__AVR_ATmega8__)
SIGNAL(SIG_UART_RECV)
#else
SIGNAL(USART_RX_vect)
  88:	1f 92       	push	r1
  8a:	0f 92       	push	r0
  8c:	0f b6       	in	r0, 0x3f	; 63
  8e:	0f 92       	push	r0
  90:	11 24       	eor	r1, r1
  92:	2f 93       	push	r18
  94:	3f 93       	push	r19
  96:	4f 93       	push	r20
  98:	5f 93       	push	r21
  9a:	6f 93       	push	r22
  9c:	7f 93       	push	r23
  9e:	8f 93       	push	r24
  a0:	9f 93       	push	r25
  a2:	af 93       	push	r26
  a4:	bf 93       	push	r27
  a6:	ef 93       	push	r30
  a8:	ff 93       	push	r31
  aa:	df 93       	push	r29
  ac:	cf 93       	push	r28
  ae:	0f 92       	push	r0
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
#endif
{
#if defined(__AVR_ATmega8__)
  unsigned char c = UDR;
#else
  unsigned char c = UDR0;
  b4:	e6 ec       	ldi	r30, 0xC6	; 198
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	80 81       	ld	r24, Z
  ba:	89 83       	std	Y+1, r24	; 0x01
#endif
  store_char(c, &rx_buffer);
  bc:	20 e0       	ldi	r18, 0x00	; 0
  be:	30 e0       	ldi	r19, 0x00	; 0
  c0:	89 81       	ldd	r24, Y+1	; 0x01
  c2:	b9 01       	movw	r22, r18
  c4:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
}
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	ff 91       	pop	r31
  d0:	ef 91       	pop	r30
  d2:	bf 91       	pop	r27
  d4:	af 91       	pop	r26
  d6:	9f 91       	pop	r25
  d8:	8f 91       	pop	r24
  da:	7f 91       	pop	r23
  dc:	6f 91       	pop	r22
  de:	5f 91       	pop	r21
  e0:	4f 91       	pop	r20
  e2:	3f 91       	pop	r19
  e4:	2f 91       	pop	r18
  e6:	0f 90       	pop	r0
  e8:	0f be       	out	0x3f, r0	; 63
  ea:	0f 90       	pop	r0
  ec:	1f 90       	pop	r1
  ee:	18 95       	reti

000000f0 <_ZN5PrintC2Ev>:
#define OCT 8
#define BIN 2
#define BYTE 0

class Print
{
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	00 d0       	rcall	.+0      	; 0xf6 <_ZN5PrintC2Ev+0x6>
  f6:	cd b7       	in	r28, 0x3d	; 61
  f8:	de b7       	in	r29, 0x3e	; 62
  fa:	9a 83       	std	Y+2, r25	; 0x02
  fc:	89 83       	std	Y+1, r24	; 0x01
  fe:	e9 81       	ldd	r30, Y+1	; 0x01
 100:	fa 81       	ldd	r31, Y+2	; 0x02
 102:	80 e0       	ldi	r24, 0x00	; 0
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	91 83       	std	Z+1, r25	; 0x01
 108:	80 83       	st	Z, r24
 10a:	0f 90       	pop	r0
 10c:	0f 90       	pop	r0
 10e:	cf 91       	pop	r28
 110:	df 91       	pop	r29
 112:	08 95       	ret

00000114 <_ZN6StreamC2Ev>:

#include <inttypes.h>
#include "Print.h"

class Stream : public Print
{
 114:	df 93       	push	r29
 116:	cf 93       	push	r28
 118:	00 d0       	rcall	.+0      	; 0x11a <_ZN6StreamC2Ev+0x6>
 11a:	cd b7       	in	r28, 0x3d	; 61
 11c:	de b7       	in	r29, 0x3e	; 62
 11e:	9a 83       	std	Y+2, r25	; 0x02
 120:	89 83       	std	Y+1, r24	; 0x01
 122:	89 81       	ldd	r24, Y+1	; 0x01
 124:	9a 81       	ldd	r25, Y+2	; 0x02
 126:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 12a:	e9 81       	ldd	r30, Y+1	; 0x01
 12c:	fa 81       	ldd	r31, Y+2	; 0x02
 12e:	80 e0       	ldi	r24, 0x00	; 0
 130:	90 e0       	ldi	r25, 0x00	; 0
 132:	91 83       	std	Z+1, r25	; 0x01
 134:	80 83       	st	Z, r24
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	cf 91       	pop	r28
 13c:	df 91       	pop	r29
 13e:	08 95       	ret

00000140 <_ZN14HardwareSerialC2EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 140:	8f 92       	push	r8
 142:	af 92       	push	r10
 144:	cf 92       	push	r12
 146:	df 92       	push	r13
 148:	ef 92       	push	r14
 14a:	ff 92       	push	r15
 14c:	0f 93       	push	r16
 14e:	1f 93       	push	r17
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
 158:	60 97       	sbiw	r28, 0x10	; 16
 15a:	0f b6       	in	r0, 0x3f	; 63
 15c:	f8 94       	cli
 15e:	de bf       	out	0x3e, r29	; 62
 160:	0f be       	out	0x3f, r0	; 63
 162:	cd bf       	out	0x3d, r28	; 61
 164:	9a 83       	std	Y+2, r25	; 0x02
 166:	89 83       	std	Y+1, r24	; 0x01
 168:	7c 83       	std	Y+4, r23	; 0x04
 16a:	6b 83       	std	Y+3, r22	; 0x03
 16c:	5e 83       	std	Y+6, r21	; 0x06
 16e:	4d 83       	std	Y+5, r20	; 0x05
 170:	38 87       	std	Y+8, r19	; 0x08
 172:	2f 83       	std	Y+7, r18	; 0x07
 174:	1a 87       	std	Y+10, r17	; 0x0a
 176:	09 87       	std	Y+9, r16	; 0x09
 178:	fc 86       	std	Y+12, r15	; 0x0c
 17a:	eb 86       	std	Y+11, r14	; 0x0b
 17c:	de 86       	std	Y+14, r13	; 0x0e
 17e:	cd 86       	std	Y+13, r12	; 0x0d
 180:	af 86       	std	Y+15, r10	; 0x0f
 182:	88 8a       	std	Y+16, r8	; 0x10
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	9a 81       	ldd	r25, Y+2	; 0x02
 188:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 18c:	e9 81       	ldd	r30, Y+1	; 0x01
 18e:	fa 81       	ldd	r31, Y+2	; 0x02
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	90 e0       	ldi	r25, 0x00	; 0
 194:	91 83       	std	Z+1, r25	; 0x01
 196:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 198:	e9 81       	ldd	r30, Y+1	; 0x01
 19a:	fa 81       	ldd	r31, Y+2	; 0x02
 19c:	8b 81       	ldd	r24, Y+3	; 0x03
 19e:	9c 81       	ldd	r25, Y+4	; 0x04
 1a0:	93 83       	std	Z+3, r25	; 0x03
 1a2:	82 83       	std	Z+2, r24	; 0x02
  _ubrrh = ubrrh;
 1a4:	e9 81       	ldd	r30, Y+1	; 0x01
 1a6:	fa 81       	ldd	r31, Y+2	; 0x02
 1a8:	8d 81       	ldd	r24, Y+5	; 0x05
 1aa:	9e 81       	ldd	r25, Y+6	; 0x06
 1ac:	95 83       	std	Z+5, r25	; 0x05
 1ae:	84 83       	std	Z+4, r24	; 0x04
  _ubrrl = ubrrl;
 1b0:	e9 81       	ldd	r30, Y+1	; 0x01
 1b2:	fa 81       	ldd	r31, Y+2	; 0x02
 1b4:	8f 81       	ldd	r24, Y+7	; 0x07
 1b6:	98 85       	ldd	r25, Y+8	; 0x08
 1b8:	97 83       	std	Z+7, r25	; 0x07
 1ba:	86 83       	std	Z+6, r24	; 0x06
  _ucsra = ucsra;
 1bc:	e9 81       	ldd	r30, Y+1	; 0x01
 1be:	fa 81       	ldd	r31, Y+2	; 0x02
 1c0:	89 85       	ldd	r24, Y+9	; 0x09
 1c2:	9a 85       	ldd	r25, Y+10	; 0x0a
 1c4:	91 87       	std	Z+9, r25	; 0x09
 1c6:	80 87       	std	Z+8, r24	; 0x08
  _ucsrb = ucsrb;
 1c8:	e9 81       	ldd	r30, Y+1	; 0x01
 1ca:	fa 81       	ldd	r31, Y+2	; 0x02
 1cc:	8b 85       	ldd	r24, Y+11	; 0x0b
 1ce:	9c 85       	ldd	r25, Y+12	; 0x0c
 1d0:	93 87       	std	Z+11, r25	; 0x0b
 1d2:	82 87       	std	Z+10, r24	; 0x0a
  _udr = udr;
 1d4:	e9 81       	ldd	r30, Y+1	; 0x01
 1d6:	fa 81       	ldd	r31, Y+2	; 0x02
 1d8:	8d 85       	ldd	r24, Y+13	; 0x0d
 1da:	9e 85       	ldd	r25, Y+14	; 0x0e
 1dc:	95 87       	std	Z+13, r25	; 0x0d
 1de:	84 87       	std	Z+12, r24	; 0x0c
  _rxen = rxen;
 1e0:	e9 81       	ldd	r30, Y+1	; 0x01
 1e2:	fa 81       	ldd	r31, Y+2	; 0x02
 1e4:	8f 85       	ldd	r24, Y+15	; 0x0f
 1e6:	86 87       	std	Z+14, r24	; 0x0e
  _txen = txen;
 1e8:	e9 81       	ldd	r30, Y+1	; 0x01
 1ea:	fa 81       	ldd	r31, Y+2	; 0x02
 1ec:	88 89       	ldd	r24, Y+16	; 0x10
 1ee:	87 87       	std	Z+15, r24	; 0x0f
  _rxcie = rxcie;
 1f0:	e9 81       	ldd	r30, Y+1	; 0x01
 1f2:	fa 81       	ldd	r31, Y+2	; 0x02
 1f4:	8d 8d       	ldd	r24, Y+29	; 0x1d
 1f6:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
 1f8:	e9 81       	ldd	r30, Y+1	; 0x01
 1fa:	fa 81       	ldd	r31, Y+2	; 0x02
 1fc:	8e 8d       	ldd	r24, Y+30	; 0x1e
 1fe:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
 200:	e9 81       	ldd	r30, Y+1	; 0x01
 202:	fa 81       	ldd	r31, Y+2	; 0x02
 204:	8f 8d       	ldd	r24, Y+31	; 0x1f
 206:	82 8b       	std	Z+18, r24	; 0x12
}
 208:	60 96       	adiw	r28, 0x10	; 16
 20a:	0f b6       	in	r0, 0x3f	; 63
 20c:	f8 94       	cli
 20e:	de bf       	out	0x3e, r29	; 62
 210:	0f be       	out	0x3f, r0	; 63
 212:	cd bf       	out	0x3d, r28	; 61
 214:	cf 91       	pop	r28
 216:	df 91       	pop	r29
 218:	1f 91       	pop	r17
 21a:	0f 91       	pop	r16
 21c:	ff 90       	pop	r15
 21e:	ef 90       	pop	r14
 220:	df 90       	pop	r13
 222:	cf 90       	pop	r12
 224:	af 90       	pop	r10
 226:	8f 90       	pop	r8
 228:	08 95       	ret

0000022a <_ZN14HardwareSerialC1EP11ring_bufferPVhS3_S3_S3_S3_hhhhh>:

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udre, uint8_t u2x)
 22a:	8f 92       	push	r8
 22c:	af 92       	push	r10
 22e:	cf 92       	push	r12
 230:	df 92       	push	r13
 232:	ef 92       	push	r14
 234:	ff 92       	push	r15
 236:	0f 93       	push	r16
 238:	1f 93       	push	r17
 23a:	df 93       	push	r29
 23c:	cf 93       	push	r28
 23e:	cd b7       	in	r28, 0x3d	; 61
 240:	de b7       	in	r29, 0x3e	; 62
 242:	60 97       	sbiw	r28, 0x10	; 16
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	f8 94       	cli
 248:	de bf       	out	0x3e, r29	; 62
 24a:	0f be       	out	0x3f, r0	; 63
 24c:	cd bf       	out	0x3d, r28	; 61
 24e:	9a 83       	std	Y+2, r25	; 0x02
 250:	89 83       	std	Y+1, r24	; 0x01
 252:	7c 83       	std	Y+4, r23	; 0x04
 254:	6b 83       	std	Y+3, r22	; 0x03
 256:	5e 83       	std	Y+6, r21	; 0x06
 258:	4d 83       	std	Y+5, r20	; 0x05
 25a:	38 87       	std	Y+8, r19	; 0x08
 25c:	2f 83       	std	Y+7, r18	; 0x07
 25e:	1a 87       	std	Y+10, r17	; 0x0a
 260:	09 87       	std	Y+9, r16	; 0x09
 262:	fc 86       	std	Y+12, r15	; 0x0c
 264:	eb 86       	std	Y+11, r14	; 0x0b
 266:	de 86       	std	Y+14, r13	; 0x0e
 268:	cd 86       	std	Y+13, r12	; 0x0d
 26a:	af 86       	std	Y+15, r10	; 0x0f
 26c:	88 8a       	std	Y+16, r8	; 0x10
 26e:	89 81       	ldd	r24, Y+1	; 0x01
 270:	9a 81       	ldd	r25, Y+2	; 0x02
 272:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 276:	e9 81       	ldd	r30, Y+1	; 0x01
 278:	fa 81       	ldd	r31, Y+2	; 0x02
 27a:	80 e0       	ldi	r24, 0x00	; 0
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	91 83       	std	Z+1, r25	; 0x01
 280:	80 83       	st	Z, r24
{
  _rx_buffer = rx_buffer;
 282:	e9 81       	ldd	r30, Y+1	; 0x01
 284:	fa 81       	ldd	r31, Y+2	; 0x02
 286:	8b 81       	ldd	r24, Y+3	; 0x03
 288:	9c 81       	ldd	r25, Y+4	; 0x04
 28a:	93 83       	std	Z+3, r25	; 0x03
 28c:	82 83       	std	Z+2, r24	; 0x02
  _ubrrh = ubrrh;
 28e:	e9 81       	ldd	r30, Y+1	; 0x01
 290:	fa 81       	ldd	r31, Y+2	; 0x02
 292:	8d 81       	ldd	r24, Y+5	; 0x05
 294:	9e 81       	ldd	r25, Y+6	; 0x06
 296:	95 83       	std	Z+5, r25	; 0x05
 298:	84 83       	std	Z+4, r24	; 0x04
  _ubrrl = ubrrl;
 29a:	e9 81       	ldd	r30, Y+1	; 0x01
 29c:	fa 81       	ldd	r31, Y+2	; 0x02
 29e:	8f 81       	ldd	r24, Y+7	; 0x07
 2a0:	98 85       	ldd	r25, Y+8	; 0x08
 2a2:	97 83       	std	Z+7, r25	; 0x07
 2a4:	86 83       	std	Z+6, r24	; 0x06
  _ucsra = ucsra;
 2a6:	e9 81       	ldd	r30, Y+1	; 0x01
 2a8:	fa 81       	ldd	r31, Y+2	; 0x02
 2aa:	89 85       	ldd	r24, Y+9	; 0x09
 2ac:	9a 85       	ldd	r25, Y+10	; 0x0a
 2ae:	91 87       	std	Z+9, r25	; 0x09
 2b0:	80 87       	std	Z+8, r24	; 0x08
  _ucsrb = ucsrb;
 2b2:	e9 81       	ldd	r30, Y+1	; 0x01
 2b4:	fa 81       	ldd	r31, Y+2	; 0x02
 2b6:	8b 85       	ldd	r24, Y+11	; 0x0b
 2b8:	9c 85       	ldd	r25, Y+12	; 0x0c
 2ba:	93 87       	std	Z+11, r25	; 0x0b
 2bc:	82 87       	std	Z+10, r24	; 0x0a
  _udr = udr;
 2be:	e9 81       	ldd	r30, Y+1	; 0x01
 2c0:	fa 81       	ldd	r31, Y+2	; 0x02
 2c2:	8d 85       	ldd	r24, Y+13	; 0x0d
 2c4:	9e 85       	ldd	r25, Y+14	; 0x0e
 2c6:	95 87       	std	Z+13, r25	; 0x0d
 2c8:	84 87       	std	Z+12, r24	; 0x0c
  _rxen = rxen;
 2ca:	e9 81       	ldd	r30, Y+1	; 0x01
 2cc:	fa 81       	ldd	r31, Y+2	; 0x02
 2ce:	8f 85       	ldd	r24, Y+15	; 0x0f
 2d0:	86 87       	std	Z+14, r24	; 0x0e
  _txen = txen;
 2d2:	e9 81       	ldd	r30, Y+1	; 0x01
 2d4:	fa 81       	ldd	r31, Y+2	; 0x02
 2d6:	88 89       	ldd	r24, Y+16	; 0x10
 2d8:	87 87       	std	Z+15, r24	; 0x0f
  _rxcie = rxcie;
 2da:	e9 81       	ldd	r30, Y+1	; 0x01
 2dc:	fa 81       	ldd	r31, Y+2	; 0x02
 2de:	8d 8d       	ldd	r24, Y+29	; 0x1d
 2e0:	80 8b       	std	Z+16, r24	; 0x10
  _udre = udre;
 2e2:	e9 81       	ldd	r30, Y+1	; 0x01
 2e4:	fa 81       	ldd	r31, Y+2	; 0x02
 2e6:	8e 8d       	ldd	r24, Y+30	; 0x1e
 2e8:	81 8b       	std	Z+17, r24	; 0x11
  _u2x = u2x;
 2ea:	e9 81       	ldd	r30, Y+1	; 0x01
 2ec:	fa 81       	ldd	r31, Y+2	; 0x02
 2ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
 2f0:	82 8b       	std	Z+18, r24	; 0x12
}
 2f2:	60 96       	adiw	r28, 0x10	; 16
 2f4:	0f b6       	in	r0, 0x3f	; 63
 2f6:	f8 94       	cli
 2f8:	de bf       	out	0x3e, r29	; 62
 2fa:	0f be       	out	0x3f, r0	; 63
 2fc:	cd bf       	out	0x3d, r28	; 61
 2fe:	cf 91       	pop	r28
 300:	df 91       	pop	r29
 302:	1f 91       	pop	r17
 304:	0f 91       	pop	r16
 306:	ff 90       	pop	r15
 308:	ef 90       	pop	r14
 30a:	df 90       	pop	r13
 30c:	cf 90       	pop	r12
 30e:	af 90       	pop	r10
 310:	8f 90       	pop	r8
 312:	08 95       	ret

00000314 <_ZN14HardwareSerial5beginEl>:

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(long baud)
 314:	df 93       	push	r29
 316:	cf 93       	push	r28
 318:	cd b7       	in	r28, 0x3d	; 61
 31a:	de b7       	in	r29, 0x3e	; 62
 31c:	2d 97       	sbiw	r28, 0x0d	; 13
 31e:	0f b6       	in	r0, 0x3f	; 63
 320:	f8 94       	cli
 322:	de bf       	out	0x3e, r29	; 62
 324:	0f be       	out	0x3f, r0	; 63
 326:	cd bf       	out	0x3d, r28	; 61
 328:	9f 83       	std	Y+7, r25	; 0x07
 32a:	8e 83       	std	Y+6, r24	; 0x06
 32c:	48 87       	std	Y+8, r20	; 0x08
 32e:	59 87       	std	Y+9, r21	; 0x09
 330:	6a 87       	std	Y+10, r22	; 0x0a
 332:	7b 87       	std	Y+11, r23	; 0x0b
{
  uint16_t baud_setting;
  bool use_u2x;

  // U2X mode is needed for baud rates higher than (CPU Hz / 16)
  if (baud > F_CPU / 16) {
 334:	88 85       	ldd	r24, Y+8	; 0x08
 336:	99 85       	ldd	r25, Y+9	; 0x09
 338:	aa 85       	ldd	r26, Y+10	; 0x0a
 33a:	bb 85       	ldd	r27, Y+11	; 0x0b
 33c:	81 34       	cpi	r24, 0x41	; 65
 33e:	22 e4       	ldi	r18, 0x42	; 66
 340:	92 07       	cpc	r25, r18
 342:	2f e0       	ldi	r18, 0x0F	; 15
 344:	a2 07       	cpc	r26, r18
 346:	20 e0       	ldi	r18, 0x00	; 0
 348:	b2 07       	cpc	r27, r18
 34a:	00 f0       	brcs	.+0      	; 0x34c <_ZN14HardwareSerial5beginEl+0x38>
    use_u2x = true;
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	8b 83       	std	Y+3, r24	; 0x03
 350:	00 c0       	rjmp	.+0      	; 0x352 <_ZN14HardwareSerial5beginEl+0x3e>
  } else {
    // figure out if U2X mode would allow for a better connection
    
    // calculate the percent difference between the baud-rate specified and
    // the real baud rate for both U2X and non-U2X mode (0-255 error percent)
    uint8_t nonu2x_baud_error = abs((int)(255-((F_CPU/(16*(((F_CPU/8/baud-1)/2)+1))*255)/baud)));
 352:	28 85       	ldd	r18, Y+8	; 0x08
 354:	39 85       	ldd	r19, Y+9	; 0x09
 356:	4a 85       	ldd	r20, Y+10	; 0x0a
 358:	5b 85       	ldd	r21, Y+11	; 0x0b
 35a:	80 e8       	ldi	r24, 0x80	; 128
 35c:	94 e8       	ldi	r25, 0x84	; 132
 35e:	ae e1       	ldi	r26, 0x1E	; 30
 360:	b0 e0       	ldi	r27, 0x00	; 0
 362:	bc 01       	movw	r22, r24
 364:	cd 01       	movw	r24, r26
 366:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 36a:	da 01       	movw	r26, r20
 36c:	c9 01       	movw	r24, r18
 36e:	01 97       	sbiw	r24, 0x01	; 1
 370:	a1 09       	sbc	r26, r1
 372:	b1 09       	sbc	r27, r1
 374:	b6 95       	lsr	r27
 376:	a7 95       	ror	r26
 378:	97 95       	ror	r25
 37a:	87 95       	ror	r24
 37c:	01 96       	adiw	r24, 0x01	; 1
 37e:	a1 1d       	adc	r26, r1
 380:	b1 1d       	adc	r27, r1
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	aa 1f       	adc	r26, r26
 388:	bb 1f       	adc	r27, r27
 38a:	88 0f       	add	r24, r24
 38c:	99 1f       	adc	r25, r25
 38e:	aa 1f       	adc	r26, r26
 390:	bb 1f       	adc	r27, r27
 392:	88 0f       	add	r24, r24
 394:	99 1f       	adc	r25, r25
 396:	aa 1f       	adc	r26, r26
 398:	bb 1f       	adc	r27, r27
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	aa 1f       	adc	r26, r26
 3a0:	bb 1f       	adc	r27, r27
 3a2:	9c 01       	movw	r18, r24
 3a4:	ad 01       	movw	r20, r26
 3a6:	80 e0       	ldi	r24, 0x00	; 0
 3a8:	94 e2       	ldi	r25, 0x24	; 36
 3aa:	a4 ef       	ldi	r26, 0xF4	; 244
 3ac:	b0 e0       	ldi	r27, 0x00	; 0
 3ae:	bc 01       	movw	r22, r24
 3b0:	cd 01       	movw	r24, r26
 3b2:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 3b6:	da 01       	movw	r26, r20
 3b8:	c9 01       	movw	r24, r18
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	40 e0       	ldi	r20, 0x00	; 0
 3c0:	50 e0       	ldi	r21, 0x00	; 0
 3c2:	bc 01       	movw	r22, r24
 3c4:	cd 01       	movw	r24, r26
 3c6:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 3ca:	dc 01       	movw	r26, r24
 3cc:	cb 01       	movw	r24, r22
 3ce:	28 85       	ldd	r18, Y+8	; 0x08
 3d0:	39 85       	ldd	r19, Y+9	; 0x09
 3d2:	4a 85       	ldd	r20, Y+10	; 0x0a
 3d4:	5b 85       	ldd	r21, Y+11	; 0x0b
 3d6:	bc 01       	movw	r22, r24
 3d8:	cd 01       	movw	r24, r26
 3da:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 3de:	da 01       	movw	r26, r20
 3e0:	c9 01       	movw	r24, r18
 3e2:	9c 01       	movw	r18, r24
 3e4:	8f ef       	ldi	r24, 0xFF	; 255
 3e6:	90 e0       	ldi	r25, 0x00	; 0
 3e8:	82 1b       	sub	r24, r18
 3ea:	93 0b       	sbc	r25, r19
 3ec:	18 16       	cp	r1, r24
 3ee:	19 06       	cpc	r1, r25
 3f0:	04 f0       	brlt	.+0      	; 0x3f2 <_ZN14HardwareSerial5beginEl+0xde>
 3f2:	00 c0       	rjmp	.+0      	; 0x3f4 <_ZN14HardwareSerial5beginEl+0xe0>
 3f4:	28 85       	ldd	r18, Y+8	; 0x08
 3f6:	39 85       	ldd	r19, Y+9	; 0x09
 3f8:	4a 85       	ldd	r20, Y+10	; 0x0a
 3fa:	5b 85       	ldd	r21, Y+11	; 0x0b
 3fc:	80 e8       	ldi	r24, 0x80	; 128
 3fe:	94 e8       	ldi	r25, 0x84	; 132
 400:	ae e1       	ldi	r26, 0x1E	; 30
 402:	b0 e0       	ldi	r27, 0x00	; 0
 404:	bc 01       	movw	r22, r24
 406:	cd 01       	movw	r24, r26
 408:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 40c:	da 01       	movw	r26, r20
 40e:	c9 01       	movw	r24, r18
 410:	01 97       	sbiw	r24, 0x01	; 1
 412:	a1 09       	sbc	r26, r1
 414:	b1 09       	sbc	r27, r1
 416:	b6 95       	lsr	r27
 418:	a7 95       	ror	r26
 41a:	97 95       	ror	r25
 41c:	87 95       	ror	r24
 41e:	01 96       	adiw	r24, 0x01	; 1
 420:	a1 1d       	adc	r26, r1
 422:	b1 1d       	adc	r27, r1
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	88 0f       	add	r24, r24
 42e:	99 1f       	adc	r25, r25
 430:	aa 1f       	adc	r26, r26
 432:	bb 1f       	adc	r27, r27
 434:	88 0f       	add	r24, r24
 436:	99 1f       	adc	r25, r25
 438:	aa 1f       	adc	r26, r26
 43a:	bb 1f       	adc	r27, r27
 43c:	88 0f       	add	r24, r24
 43e:	99 1f       	adc	r25, r25
 440:	aa 1f       	adc	r26, r26
 442:	bb 1f       	adc	r27, r27
 444:	9c 01       	movw	r18, r24
 446:	ad 01       	movw	r20, r26
 448:	80 e0       	ldi	r24, 0x00	; 0
 44a:	94 e2       	ldi	r25, 0x24	; 36
 44c:	a4 ef       	ldi	r26, 0xF4	; 244
 44e:	b0 e0       	ldi	r27, 0x00	; 0
 450:	bc 01       	movw	r22, r24
 452:	cd 01       	movw	r24, r26
 454:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 458:	da 01       	movw	r26, r20
 45a:	c9 01       	movw	r24, r18
 45c:	2f ef       	ldi	r18, 0xFF	; 255
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	40 e0       	ldi	r20, 0x00	; 0
 462:	50 e0       	ldi	r21, 0x00	; 0
 464:	bc 01       	movw	r22, r24
 466:	cd 01       	movw	r24, r26
 468:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 46c:	dc 01       	movw	r26, r24
 46e:	cb 01       	movw	r24, r22
 470:	28 85       	ldd	r18, Y+8	; 0x08
 472:	39 85       	ldd	r19, Y+9	; 0x09
 474:	4a 85       	ldd	r20, Y+10	; 0x0a
 476:	5b 85       	ldd	r21, Y+11	; 0x0b
 478:	bc 01       	movw	r22, r24
 47a:	cd 01       	movw	r24, r26
 47c:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 480:	da 01       	movw	r26, r20
 482:	c9 01       	movw	r24, r18
 484:	98 2f       	mov	r25, r24
 486:	90 95       	com	r25
 488:	9d 87       	std	Y+13, r25	; 0x0d
 48a:	00 c0       	rjmp	.+0      	; 0x48c <_ZN14HardwareSerial5beginEl+0x178>
 48c:	28 85       	ldd	r18, Y+8	; 0x08
 48e:	39 85       	ldd	r19, Y+9	; 0x09
 490:	4a 85       	ldd	r20, Y+10	; 0x0a
 492:	5b 85       	ldd	r21, Y+11	; 0x0b
 494:	80 e8       	ldi	r24, 0x80	; 128
 496:	94 e8       	ldi	r25, 0x84	; 132
 498:	ae e1       	ldi	r26, 0x1E	; 30
 49a:	b0 e0       	ldi	r27, 0x00	; 0
 49c:	bc 01       	movw	r22, r24
 49e:	cd 01       	movw	r24, r26
 4a0:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 4a4:	da 01       	movw	r26, r20
 4a6:	c9 01       	movw	r24, r18
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	a1 09       	sbc	r26, r1
 4ac:	b1 09       	sbc	r27, r1
 4ae:	b6 95       	lsr	r27
 4b0:	a7 95       	ror	r26
 4b2:	97 95       	ror	r25
 4b4:	87 95       	ror	r24
 4b6:	01 96       	adiw	r24, 0x01	; 1
 4b8:	a1 1d       	adc	r26, r1
 4ba:	b1 1d       	adc	r27, r1
 4bc:	88 0f       	add	r24, r24
 4be:	99 1f       	adc	r25, r25
 4c0:	aa 1f       	adc	r26, r26
 4c2:	bb 1f       	adc	r27, r27
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	aa 1f       	adc	r26, r26
 4ca:	bb 1f       	adc	r27, r27
 4cc:	88 0f       	add	r24, r24
 4ce:	99 1f       	adc	r25, r25
 4d0:	aa 1f       	adc	r26, r26
 4d2:	bb 1f       	adc	r27, r27
 4d4:	88 0f       	add	r24, r24
 4d6:	99 1f       	adc	r25, r25
 4d8:	aa 1f       	adc	r26, r26
 4da:	bb 1f       	adc	r27, r27
 4dc:	9c 01       	movw	r18, r24
 4de:	ad 01       	movw	r20, r26
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	94 e2       	ldi	r25, 0x24	; 36
 4e4:	a4 ef       	ldi	r26, 0xF4	; 244
 4e6:	b0 e0       	ldi	r27, 0x00	; 0
 4e8:	bc 01       	movw	r22, r24
 4ea:	cd 01       	movw	r24, r26
 4ec:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 4f0:	da 01       	movw	r26, r20
 4f2:	c9 01       	movw	r24, r18
 4f4:	2f ef       	ldi	r18, 0xFF	; 255
 4f6:	30 e0       	ldi	r19, 0x00	; 0
 4f8:	40 e0       	ldi	r20, 0x00	; 0
 4fa:	50 e0       	ldi	r21, 0x00	; 0
 4fc:	bc 01       	movw	r22, r24
 4fe:	cd 01       	movw	r24, r26
 500:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 504:	dc 01       	movw	r26, r24
 506:	cb 01       	movw	r24, r22
 508:	28 85       	ldd	r18, Y+8	; 0x08
 50a:	39 85       	ldd	r19, Y+9	; 0x09
 50c:	4a 85       	ldd	r20, Y+10	; 0x0a
 50e:	5b 85       	ldd	r21, Y+11	; 0x0b
 510:	bc 01       	movw	r22, r24
 512:	cd 01       	movw	r24, r26
 514:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 518:	da 01       	movw	r26, r20
 51a:	c9 01       	movw	r24, r18
 51c:	28 2f       	mov	r18, r24
 51e:	2f 5f       	subi	r18, 0xFF	; 255
 520:	2d 87       	std	Y+13, r18	; 0x0d
 522:	8d 85       	ldd	r24, Y+13	; 0x0d
 524:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t u2x_baud_error = abs((int)(255-((F_CPU/(8*(((F_CPU/4/baud-1)/2)+1))*255)/baud)));
 526:	28 85       	ldd	r18, Y+8	; 0x08
 528:	39 85       	ldd	r19, Y+9	; 0x09
 52a:	4a 85       	ldd	r20, Y+10	; 0x0a
 52c:	5b 85       	ldd	r21, Y+11	; 0x0b
 52e:	80 e0       	ldi	r24, 0x00	; 0
 530:	99 e0       	ldi	r25, 0x09	; 9
 532:	ad e3       	ldi	r26, 0x3D	; 61
 534:	b0 e0       	ldi	r27, 0x00	; 0
 536:	bc 01       	movw	r22, r24
 538:	cd 01       	movw	r24, r26
 53a:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 53e:	da 01       	movw	r26, r20
 540:	c9 01       	movw	r24, r18
 542:	01 97       	sbiw	r24, 0x01	; 1
 544:	a1 09       	sbc	r26, r1
 546:	b1 09       	sbc	r27, r1
 548:	b6 95       	lsr	r27
 54a:	a7 95       	ror	r26
 54c:	97 95       	ror	r25
 54e:	87 95       	ror	r24
 550:	01 96       	adiw	r24, 0x01	; 1
 552:	a1 1d       	adc	r26, r1
 554:	b1 1d       	adc	r27, r1
 556:	88 0f       	add	r24, r24
 558:	99 1f       	adc	r25, r25
 55a:	aa 1f       	adc	r26, r26
 55c:	bb 1f       	adc	r27, r27
 55e:	88 0f       	add	r24, r24
 560:	99 1f       	adc	r25, r25
 562:	aa 1f       	adc	r26, r26
 564:	bb 1f       	adc	r27, r27
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	aa 1f       	adc	r26, r26
 56c:	bb 1f       	adc	r27, r27
 56e:	9c 01       	movw	r18, r24
 570:	ad 01       	movw	r20, r26
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	94 e2       	ldi	r25, 0x24	; 36
 576:	a4 ef       	ldi	r26, 0xF4	; 244
 578:	b0 e0       	ldi	r27, 0x00	; 0
 57a:	bc 01       	movw	r22, r24
 57c:	cd 01       	movw	r24, r26
 57e:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 582:	da 01       	movw	r26, r20
 584:	c9 01       	movw	r24, r18
 586:	2f ef       	ldi	r18, 0xFF	; 255
 588:	30 e0       	ldi	r19, 0x00	; 0
 58a:	40 e0       	ldi	r20, 0x00	; 0
 58c:	50 e0       	ldi	r21, 0x00	; 0
 58e:	bc 01       	movw	r22, r24
 590:	cd 01       	movw	r24, r26
 592:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 596:	dc 01       	movw	r26, r24
 598:	cb 01       	movw	r24, r22
 59a:	28 85       	ldd	r18, Y+8	; 0x08
 59c:	39 85       	ldd	r19, Y+9	; 0x09
 59e:	4a 85       	ldd	r20, Y+10	; 0x0a
 5a0:	5b 85       	ldd	r21, Y+11	; 0x0b
 5a2:	bc 01       	movw	r22, r24
 5a4:	cd 01       	movw	r24, r26
 5a6:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 5aa:	da 01       	movw	r26, r20
 5ac:	c9 01       	movw	r24, r18
 5ae:	9c 01       	movw	r18, r24
 5b0:	8f ef       	ldi	r24, 0xFF	; 255
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	82 1b       	sub	r24, r18
 5b6:	93 0b       	sbc	r25, r19
 5b8:	18 16       	cp	r1, r24
 5ba:	19 06       	cpc	r1, r25
 5bc:	04 f0       	brlt	.+0      	; 0x5be <_ZN14HardwareSerial5beginEl+0x2aa>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <_ZN14HardwareSerial5beginEl+0x2ac>
 5c0:	28 85       	ldd	r18, Y+8	; 0x08
 5c2:	39 85       	ldd	r19, Y+9	; 0x09
 5c4:	4a 85       	ldd	r20, Y+10	; 0x0a
 5c6:	5b 85       	ldd	r21, Y+11	; 0x0b
 5c8:	80 e0       	ldi	r24, 0x00	; 0
 5ca:	99 e0       	ldi	r25, 0x09	; 9
 5cc:	ad e3       	ldi	r26, 0x3D	; 61
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	bc 01       	movw	r22, r24
 5d2:	cd 01       	movw	r24, r26
 5d4:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 5d8:	da 01       	movw	r26, r20
 5da:	c9 01       	movw	r24, r18
 5dc:	01 97       	sbiw	r24, 0x01	; 1
 5de:	a1 09       	sbc	r26, r1
 5e0:	b1 09       	sbc	r27, r1
 5e2:	b6 95       	lsr	r27
 5e4:	a7 95       	ror	r26
 5e6:	97 95       	ror	r25
 5e8:	87 95       	ror	r24
 5ea:	01 96       	adiw	r24, 0x01	; 1
 5ec:	a1 1d       	adc	r26, r1
 5ee:	b1 1d       	adc	r27, r1
 5f0:	88 0f       	add	r24, r24
 5f2:	99 1f       	adc	r25, r25
 5f4:	aa 1f       	adc	r26, r26
 5f6:	bb 1f       	adc	r27, r27
 5f8:	88 0f       	add	r24, r24
 5fa:	99 1f       	adc	r25, r25
 5fc:	aa 1f       	adc	r26, r26
 5fe:	bb 1f       	adc	r27, r27
 600:	88 0f       	add	r24, r24
 602:	99 1f       	adc	r25, r25
 604:	aa 1f       	adc	r26, r26
 606:	bb 1f       	adc	r27, r27
 608:	9c 01       	movw	r18, r24
 60a:	ad 01       	movw	r20, r26
 60c:	80 e0       	ldi	r24, 0x00	; 0
 60e:	94 e2       	ldi	r25, 0x24	; 36
 610:	a4 ef       	ldi	r26, 0xF4	; 244
 612:	b0 e0       	ldi	r27, 0x00	; 0
 614:	bc 01       	movw	r22, r24
 616:	cd 01       	movw	r24, r26
 618:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 61c:	da 01       	movw	r26, r20
 61e:	c9 01       	movw	r24, r18
 620:	2f ef       	ldi	r18, 0xFF	; 255
 622:	30 e0       	ldi	r19, 0x00	; 0
 624:	40 e0       	ldi	r20, 0x00	; 0
 626:	50 e0       	ldi	r21, 0x00	; 0
 628:	bc 01       	movw	r22, r24
 62a:	cd 01       	movw	r24, r26
 62c:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 630:	dc 01       	movw	r26, r24
 632:	cb 01       	movw	r24, r22
 634:	28 85       	ldd	r18, Y+8	; 0x08
 636:	39 85       	ldd	r19, Y+9	; 0x09
 638:	4a 85       	ldd	r20, Y+10	; 0x0a
 63a:	5b 85       	ldd	r21, Y+11	; 0x0b
 63c:	bc 01       	movw	r22, r24
 63e:	cd 01       	movw	r24, r26
 640:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 644:	da 01       	movw	r26, r20
 646:	c9 01       	movw	r24, r18
 648:	98 2f       	mov	r25, r24
 64a:	90 95       	com	r25
 64c:	9c 87       	std	Y+12, r25	; 0x0c
 64e:	00 c0       	rjmp	.+0      	; 0x650 <_ZN14HardwareSerial5beginEl+0x33c>
 650:	28 85       	ldd	r18, Y+8	; 0x08
 652:	39 85       	ldd	r19, Y+9	; 0x09
 654:	4a 85       	ldd	r20, Y+10	; 0x0a
 656:	5b 85       	ldd	r21, Y+11	; 0x0b
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	99 e0       	ldi	r25, 0x09	; 9
 65c:	ad e3       	ldi	r26, 0x3D	; 61
 65e:	b0 e0       	ldi	r27, 0x00	; 0
 660:	bc 01       	movw	r22, r24
 662:	cd 01       	movw	r24, r26
 664:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 668:	da 01       	movw	r26, r20
 66a:	c9 01       	movw	r24, r18
 66c:	01 97       	sbiw	r24, 0x01	; 1
 66e:	a1 09       	sbc	r26, r1
 670:	b1 09       	sbc	r27, r1
 672:	b6 95       	lsr	r27
 674:	a7 95       	ror	r26
 676:	97 95       	ror	r25
 678:	87 95       	ror	r24
 67a:	01 96       	adiw	r24, 0x01	; 1
 67c:	a1 1d       	adc	r26, r1
 67e:	b1 1d       	adc	r27, r1
 680:	88 0f       	add	r24, r24
 682:	99 1f       	adc	r25, r25
 684:	aa 1f       	adc	r26, r26
 686:	bb 1f       	adc	r27, r27
 688:	88 0f       	add	r24, r24
 68a:	99 1f       	adc	r25, r25
 68c:	aa 1f       	adc	r26, r26
 68e:	bb 1f       	adc	r27, r27
 690:	88 0f       	add	r24, r24
 692:	99 1f       	adc	r25, r25
 694:	aa 1f       	adc	r26, r26
 696:	bb 1f       	adc	r27, r27
 698:	9c 01       	movw	r18, r24
 69a:	ad 01       	movw	r20, r26
 69c:	80 e0       	ldi	r24, 0x00	; 0
 69e:	94 e2       	ldi	r25, 0x24	; 36
 6a0:	a4 ef       	ldi	r26, 0xF4	; 244
 6a2:	b0 e0       	ldi	r27, 0x00	; 0
 6a4:	bc 01       	movw	r22, r24
 6a6:	cd 01       	movw	r24, r26
 6a8:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 6ac:	da 01       	movw	r26, r20
 6ae:	c9 01       	movw	r24, r18
 6b0:	2f ef       	ldi	r18, 0xFF	; 255
 6b2:	30 e0       	ldi	r19, 0x00	; 0
 6b4:	40 e0       	ldi	r20, 0x00	; 0
 6b6:	50 e0       	ldi	r21, 0x00	; 0
 6b8:	bc 01       	movw	r22, r24
 6ba:	cd 01       	movw	r24, r26
 6bc:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 6c0:	dc 01       	movw	r26, r24
 6c2:	cb 01       	movw	r24, r22
 6c4:	28 85       	ldd	r18, Y+8	; 0x08
 6c6:	39 85       	ldd	r19, Y+9	; 0x09
 6c8:	4a 85       	ldd	r20, Y+10	; 0x0a
 6ca:	5b 85       	ldd	r21, Y+11	; 0x0b
 6cc:	bc 01       	movw	r22, r24
 6ce:	cd 01       	movw	r24, r26
 6d0:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 6d4:	da 01       	movw	r26, r20
 6d6:	c9 01       	movw	r24, r18
 6d8:	28 2f       	mov	r18, r24
 6da:	2f 5f       	subi	r18, 0xFF	; 255
 6dc:	2c 87       	std	Y+12, r18	; 0x0c
 6de:	8c 85       	ldd	r24, Y+12	; 0x0c
 6e0:	89 83       	std	Y+1, r24	; 0x01
    
    // prefer non-U2X mode because it handles clock skew better
    use_u2x = (nonu2x_baud_error > u2x_baud_error);
 6e2:	1b 82       	std	Y+3, r1	; 0x03
 6e4:	9a 81       	ldd	r25, Y+2	; 0x02
 6e6:	89 81       	ldd	r24, Y+1	; 0x01
 6e8:	89 17       	cp	r24, r25
 6ea:	00 f4       	brcc	.+0      	; 0x6ec <_ZN14HardwareSerial5beginEl+0x3d8>
 6ec:	81 e0       	ldi	r24, 0x01	; 1
 6ee:	8b 83       	std	Y+3, r24	; 0x03
  }
  
  if (use_u2x) {
 6f0:	8b 81       	ldd	r24, Y+3	; 0x03
 6f2:	88 23       	and	r24, r24
 6f4:	01 f0       	breq	.+0      	; 0x6f6 <_ZN14HardwareSerial5beginEl+0x3e2>
    *_ucsra = 1 << _u2x;
 6f6:	ee 81       	ldd	r30, Y+6	; 0x06
 6f8:	ff 81       	ldd	r31, Y+7	; 0x07
 6fa:	a0 85       	ldd	r26, Z+8	; 0x08
 6fc:	b1 85       	ldd	r27, Z+9	; 0x09
 6fe:	ee 81       	ldd	r30, Y+6	; 0x06
 700:	ff 81       	ldd	r31, Y+7	; 0x07
 702:	82 89       	ldd	r24, Z+18	; 0x12
 704:	28 2f       	mov	r18, r24
 706:	30 e0       	ldi	r19, 0x00	; 0
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	90 e0       	ldi	r25, 0x00	; 0
 70c:	00 c0       	rjmp	.+0      	; 0x70e <_ZN14HardwareSerial5beginEl+0x3fa>
 70e:	88 0f       	add	r24, r24
 710:	99 1f       	adc	r25, r25
 712:	2a 95       	dec	r18
 714:	02 f4       	brpl	.+0      	; 0x716 <_ZN14HardwareSerial5beginEl+0x402>
 716:	8c 93       	st	X, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
 718:	28 85       	ldd	r18, Y+8	; 0x08
 71a:	39 85       	ldd	r19, Y+9	; 0x09
 71c:	4a 85       	ldd	r20, Y+10	; 0x0a
 71e:	5b 85       	ldd	r21, Y+11	; 0x0b
 720:	80 e0       	ldi	r24, 0x00	; 0
 722:	99 e0       	ldi	r25, 0x09	; 9
 724:	ad e3       	ldi	r26, 0x3D	; 61
 726:	b0 e0       	ldi	r27, 0x00	; 0
 728:	bc 01       	movw	r22, r24
 72a:	cd 01       	movw	r24, r26
 72c:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 730:	da 01       	movw	r26, r20
 732:	c9 01       	movw	r24, r18
 734:	01 97       	sbiw	r24, 0x01	; 1
 736:	a1 09       	sbc	r26, r1
 738:	b1 09       	sbc	r27, r1
 73a:	b6 95       	lsr	r27
 73c:	a7 95       	ror	r26
 73e:	97 95       	ror	r25
 740:	87 95       	ror	r24
 742:	9d 83       	std	Y+5, r25	; 0x05
 744:	8c 83       	std	Y+4, r24	; 0x04
 746:	00 c0       	rjmp	.+0      	; 0x748 <_ZN14HardwareSerial5beginEl+0x434>
  } else {
    *_ucsra = 0;
 748:	ee 81       	ldd	r30, Y+6	; 0x06
 74a:	ff 81       	ldd	r31, Y+7	; 0x07
 74c:	00 84       	ldd	r0, Z+8	; 0x08
 74e:	f1 85       	ldd	r31, Z+9	; 0x09
 750:	e0 2d       	mov	r30, r0
 752:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
 754:	28 85       	ldd	r18, Y+8	; 0x08
 756:	39 85       	ldd	r19, Y+9	; 0x09
 758:	4a 85       	ldd	r20, Y+10	; 0x0a
 75a:	5b 85       	ldd	r21, Y+11	; 0x0b
 75c:	80 e8       	ldi	r24, 0x80	; 128
 75e:	94 e8       	ldi	r25, 0x84	; 132
 760:	ae e1       	ldi	r26, 0x1E	; 30
 762:	b0 e0       	ldi	r27, 0x00	; 0
 764:	bc 01       	movw	r22, r24
 766:	cd 01       	movw	r24, r26
 768:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 76c:	da 01       	movw	r26, r20
 76e:	c9 01       	movw	r24, r18
 770:	01 97       	sbiw	r24, 0x01	; 1
 772:	a1 09       	sbc	r26, r1
 774:	b1 09       	sbc	r27, r1
 776:	b6 95       	lsr	r27
 778:	a7 95       	ror	r26
 77a:	97 95       	ror	r25
 77c:	87 95       	ror	r24
 77e:	9d 83       	std	Y+5, r25	; 0x05
 780:	8c 83       	std	Y+4, r24	; 0x04
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
 782:	ee 81       	ldd	r30, Y+6	; 0x06
 784:	ff 81       	ldd	r31, Y+7	; 0x07
 786:	04 80       	ldd	r0, Z+4	; 0x04
 788:	f5 81       	ldd	r31, Z+5	; 0x05
 78a:	e0 2d       	mov	r30, r0
 78c:	8c 81       	ldd	r24, Y+4	; 0x04
 78e:	9d 81       	ldd	r25, Y+5	; 0x05
 790:	89 2f       	mov	r24, r25
 792:	99 27       	eor	r25, r25
 794:	80 83       	st	Z, r24
  *_ubrrl = baud_setting;
 796:	ee 81       	ldd	r30, Y+6	; 0x06
 798:	ff 81       	ldd	r31, Y+7	; 0x07
 79a:	06 80       	ldd	r0, Z+6	; 0x06
 79c:	f7 81       	ldd	r31, Z+7	; 0x07
 79e:	e0 2d       	mov	r30, r0
 7a0:	8c 81       	ldd	r24, Y+4	; 0x04
 7a2:	80 83       	st	Z, r24

  sbi(*_ucsrb, _rxen);
 7a4:	ee 81       	ldd	r30, Y+6	; 0x06
 7a6:	ff 81       	ldd	r31, Y+7	; 0x07
 7a8:	a2 85       	ldd	r26, Z+10	; 0x0a
 7aa:	b3 85       	ldd	r27, Z+11	; 0x0b
 7ac:	ee 81       	ldd	r30, Y+6	; 0x06
 7ae:	ff 81       	ldd	r31, Y+7	; 0x07
 7b0:	02 84       	ldd	r0, Z+10	; 0x0a
 7b2:	f3 85       	ldd	r31, Z+11	; 0x0b
 7b4:	e0 2d       	mov	r30, r0
 7b6:	80 81       	ld	r24, Z
 7b8:	48 2f       	mov	r20, r24
 7ba:	ee 81       	ldd	r30, Y+6	; 0x06
 7bc:	ff 81       	ldd	r31, Y+7	; 0x07
 7be:	86 85       	ldd	r24, Z+14	; 0x0e
 7c0:	28 2f       	mov	r18, r24
 7c2:	30 e0       	ldi	r19, 0x00	; 0
 7c4:	81 e0       	ldi	r24, 0x01	; 1
 7c6:	90 e0       	ldi	r25, 0x00	; 0
 7c8:	00 c0       	rjmp	.+0      	; 0x7ca <_ZN14HardwareSerial5beginEl+0x4b6>
 7ca:	88 0f       	add	r24, r24
 7cc:	99 1f       	adc	r25, r25
 7ce:	2a 95       	dec	r18
 7d0:	02 f4       	brpl	.+0      	; 0x7d2 <_ZN14HardwareSerial5beginEl+0x4be>
 7d2:	84 2b       	or	r24, r20
 7d4:	8c 93       	st	X, r24
  sbi(*_ucsrb, _txen);
 7d6:	ee 81       	ldd	r30, Y+6	; 0x06
 7d8:	ff 81       	ldd	r31, Y+7	; 0x07
 7da:	a2 85       	ldd	r26, Z+10	; 0x0a
 7dc:	b3 85       	ldd	r27, Z+11	; 0x0b
 7de:	ee 81       	ldd	r30, Y+6	; 0x06
 7e0:	ff 81       	ldd	r31, Y+7	; 0x07
 7e2:	02 84       	ldd	r0, Z+10	; 0x0a
 7e4:	f3 85       	ldd	r31, Z+11	; 0x0b
 7e6:	e0 2d       	mov	r30, r0
 7e8:	80 81       	ld	r24, Z
 7ea:	48 2f       	mov	r20, r24
 7ec:	ee 81       	ldd	r30, Y+6	; 0x06
 7ee:	ff 81       	ldd	r31, Y+7	; 0x07
 7f0:	87 85       	ldd	r24, Z+15	; 0x0f
 7f2:	28 2f       	mov	r18, r24
 7f4:	30 e0       	ldi	r19, 0x00	; 0
 7f6:	81 e0       	ldi	r24, 0x01	; 1
 7f8:	90 e0       	ldi	r25, 0x00	; 0
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <_ZN14HardwareSerial5beginEl+0x4e8>
 7fc:	88 0f       	add	r24, r24
 7fe:	99 1f       	adc	r25, r25
 800:	2a 95       	dec	r18
 802:	02 f4       	brpl	.+0      	; 0x804 <_ZN14HardwareSerial5beginEl+0x4f0>
 804:	84 2b       	or	r24, r20
 806:	8c 93       	st	X, r24
  sbi(*_ucsrb, _rxcie);
 808:	ee 81       	ldd	r30, Y+6	; 0x06
 80a:	ff 81       	ldd	r31, Y+7	; 0x07
 80c:	a2 85       	ldd	r26, Z+10	; 0x0a
 80e:	b3 85       	ldd	r27, Z+11	; 0x0b
 810:	ee 81       	ldd	r30, Y+6	; 0x06
 812:	ff 81       	ldd	r31, Y+7	; 0x07
 814:	02 84       	ldd	r0, Z+10	; 0x0a
 816:	f3 85       	ldd	r31, Z+11	; 0x0b
 818:	e0 2d       	mov	r30, r0
 81a:	80 81       	ld	r24, Z
 81c:	48 2f       	mov	r20, r24
 81e:	ee 81       	ldd	r30, Y+6	; 0x06
 820:	ff 81       	ldd	r31, Y+7	; 0x07
 822:	80 89       	ldd	r24, Z+16	; 0x10
 824:	28 2f       	mov	r18, r24
 826:	30 e0       	ldi	r19, 0x00	; 0
 828:	81 e0       	ldi	r24, 0x01	; 1
 82a:	90 e0       	ldi	r25, 0x00	; 0
 82c:	02 2e       	mov	r0, r18
 82e:	00 c0       	rjmp	.+0      	; 0x830 <_ZN14HardwareSerial5beginEl+0x51c>
 830:	88 0f       	add	r24, r24
 832:	99 1f       	adc	r25, r25
 834:	0a 94       	dec	r0
 836:	02 f4       	brpl	.+0      	; 0x838 <_ZN14HardwareSerial5beginEl+0x524>
 838:	84 2b       	or	r24, r20
 83a:	8c 93       	st	X, r24
}
 83c:	2d 96       	adiw	r28, 0x0d	; 13
 83e:	0f b6       	in	r0, 0x3f	; 63
 840:	f8 94       	cli
 842:	de bf       	out	0x3e, r29	; 62
 844:	0f be       	out	0x3f, r0	; 63
 846:	cd bf       	out	0x3d, r28	; 61
 848:	cf 91       	pop	r28
 84a:	df 91       	pop	r29
 84c:	08 95       	ret

0000084e <_ZN14HardwareSerial3endEv>:

void HardwareSerial::end()
 84e:	df 93       	push	r29
 850:	cf 93       	push	r28
 852:	00 d0       	rcall	.+0      	; 0x854 <_ZN14HardwareSerial3endEv+0x6>
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
 858:	9a 83       	std	Y+2, r25	; 0x02
 85a:	89 83       	std	Y+1, r24	; 0x01
{
  cbi(*_ucsrb, _rxen);
 85c:	e9 81       	ldd	r30, Y+1	; 0x01
 85e:	fa 81       	ldd	r31, Y+2	; 0x02
 860:	a2 85       	ldd	r26, Z+10	; 0x0a
 862:	b3 85       	ldd	r27, Z+11	; 0x0b
 864:	e9 81       	ldd	r30, Y+1	; 0x01
 866:	fa 81       	ldd	r31, Y+2	; 0x02
 868:	02 84       	ldd	r0, Z+10	; 0x0a
 86a:	f3 85       	ldd	r31, Z+11	; 0x0b
 86c:	e0 2d       	mov	r30, r0
 86e:	80 81       	ld	r24, Z
 870:	48 2f       	mov	r20, r24
 872:	e9 81       	ldd	r30, Y+1	; 0x01
 874:	fa 81       	ldd	r31, Y+2	; 0x02
 876:	86 85       	ldd	r24, Z+14	; 0x0e
 878:	28 2f       	mov	r18, r24
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	00 c0       	rjmp	.+0      	; 0x882 <_ZN14HardwareSerial3endEv+0x34>
 882:	88 0f       	add	r24, r24
 884:	99 1f       	adc	r25, r25
 886:	2a 95       	dec	r18
 888:	02 f4       	brpl	.+0      	; 0x88a <_ZN14HardwareSerial3endEv+0x3c>
 88a:	80 95       	com	r24
 88c:	84 23       	and	r24, r20
 88e:	8c 93       	st	X, r24
  cbi(*_ucsrb, _txen);
 890:	e9 81       	ldd	r30, Y+1	; 0x01
 892:	fa 81       	ldd	r31, Y+2	; 0x02
 894:	a2 85       	ldd	r26, Z+10	; 0x0a
 896:	b3 85       	ldd	r27, Z+11	; 0x0b
 898:	e9 81       	ldd	r30, Y+1	; 0x01
 89a:	fa 81       	ldd	r31, Y+2	; 0x02
 89c:	02 84       	ldd	r0, Z+10	; 0x0a
 89e:	f3 85       	ldd	r31, Z+11	; 0x0b
 8a0:	e0 2d       	mov	r30, r0
 8a2:	80 81       	ld	r24, Z
 8a4:	48 2f       	mov	r20, r24
 8a6:	e9 81       	ldd	r30, Y+1	; 0x01
 8a8:	fa 81       	ldd	r31, Y+2	; 0x02
 8aa:	87 85       	ldd	r24, Z+15	; 0x0f
 8ac:	28 2f       	mov	r18, r24
 8ae:	30 e0       	ldi	r19, 0x00	; 0
 8b0:	81 e0       	ldi	r24, 0x01	; 1
 8b2:	90 e0       	ldi	r25, 0x00	; 0
 8b4:	00 c0       	rjmp	.+0      	; 0x8b6 <_ZN14HardwareSerial3endEv+0x68>
 8b6:	88 0f       	add	r24, r24
 8b8:	99 1f       	adc	r25, r25
 8ba:	2a 95       	dec	r18
 8bc:	02 f4       	brpl	.+0      	; 0x8be <_ZN14HardwareSerial3endEv+0x70>
 8be:	80 95       	com	r24
 8c0:	84 23       	and	r24, r20
 8c2:	8c 93       	st	X, r24
  cbi(*_ucsrb, _rxcie);  
 8c4:	e9 81       	ldd	r30, Y+1	; 0x01
 8c6:	fa 81       	ldd	r31, Y+2	; 0x02
 8c8:	a2 85       	ldd	r26, Z+10	; 0x0a
 8ca:	b3 85       	ldd	r27, Z+11	; 0x0b
 8cc:	e9 81       	ldd	r30, Y+1	; 0x01
 8ce:	fa 81       	ldd	r31, Y+2	; 0x02
 8d0:	02 84       	ldd	r0, Z+10	; 0x0a
 8d2:	f3 85       	ldd	r31, Z+11	; 0x0b
 8d4:	e0 2d       	mov	r30, r0
 8d6:	80 81       	ld	r24, Z
 8d8:	48 2f       	mov	r20, r24
 8da:	e9 81       	ldd	r30, Y+1	; 0x01
 8dc:	fa 81       	ldd	r31, Y+2	; 0x02
 8de:	80 89       	ldd	r24, Z+16	; 0x10
 8e0:	28 2f       	mov	r18, r24
 8e2:	30 e0       	ldi	r19, 0x00	; 0
 8e4:	81 e0       	ldi	r24, 0x01	; 1
 8e6:	90 e0       	ldi	r25, 0x00	; 0
 8e8:	02 2e       	mov	r0, r18
 8ea:	00 c0       	rjmp	.+0      	; 0x8ec <_ZN14HardwareSerial3endEv+0x9e>
 8ec:	88 0f       	add	r24, r24
 8ee:	99 1f       	adc	r25, r25
 8f0:	0a 94       	dec	r0
 8f2:	02 f4       	brpl	.+0      	; 0x8f4 <_ZN14HardwareSerial3endEv+0xa6>
 8f4:	80 95       	com	r24
 8f6:	84 23       	and	r24, r20
 8f8:	8c 93       	st	X, r24
}
 8fa:	0f 90       	pop	r0
 8fc:	0f 90       	pop	r0
 8fe:	cf 91       	pop	r28
 900:	df 91       	pop	r29
 902:	08 95       	ret

00000904 <_ZN14HardwareSerial9availableEv>:

int HardwareSerial::available(void)
 904:	df 93       	push	r29
 906:	cf 93       	push	r28
 908:	00 d0       	rcall	.+0      	; 0x90a <_ZN14HardwareSerial9availableEv+0x6>
 90a:	cd b7       	in	r28, 0x3d	; 61
 90c:	de b7       	in	r29, 0x3e	; 62
 90e:	9a 83       	std	Y+2, r25	; 0x02
 910:	89 83       	std	Y+1, r24	; 0x01
{
  return (RX_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % RX_BUFFER_SIZE;
 912:	e9 81       	ldd	r30, Y+1	; 0x01
 914:	fa 81       	ldd	r31, Y+2	; 0x02
 916:	82 81       	ldd	r24, Z+2	; 0x02
 918:	93 81       	ldd	r25, Z+3	; 0x03
 91a:	fc 01       	movw	r30, r24
 91c:	e0 58       	subi	r30, 0x80	; 128
 91e:	ff 4f       	sbci	r31, 0xFF	; 255
 920:	80 81       	ld	r24, Z
 922:	91 81       	ldd	r25, Z+1	; 0x01
 924:	9c 01       	movw	r18, r24
 926:	20 58       	subi	r18, 0x80	; 128
 928:	3f 4f       	sbci	r19, 0xFF	; 255
 92a:	e9 81       	ldd	r30, Y+1	; 0x01
 92c:	fa 81       	ldd	r31, Y+2	; 0x02
 92e:	82 81       	ldd	r24, Z+2	; 0x02
 930:	93 81       	ldd	r25, Z+3	; 0x03
 932:	fc 01       	movw	r30, r24
 934:	ee 57       	subi	r30, 0x7E	; 126
 936:	ff 4f       	sbci	r31, 0xFF	; 255
 938:	80 81       	ld	r24, Z
 93a:	91 81       	ldd	r25, Z+1	; 0x01
 93c:	a9 01       	movw	r20, r18
 93e:	48 1b       	sub	r20, r24
 940:	59 0b       	sbc	r21, r25
 942:	ca 01       	movw	r24, r20
 944:	20 e8       	ldi	r18, 0x80	; 128
 946:	30 e0       	ldi	r19, 0x00	; 0
 948:	b9 01       	movw	r22, r18
 94a:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
}
 94e:	0f 90       	pop	r0
 950:	0f 90       	pop	r0
 952:	cf 91       	pop	r28
 954:	df 91       	pop	r29
 956:	08 95       	ret

00000958 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
 958:	df 93       	push	r29
 95a:	cf 93       	push	r28
 95c:	00 d0       	rcall	.+0      	; 0x95e <_ZN14HardwareSerial4peekEv+0x6>
 95e:	00 d0       	rcall	.+0      	; 0x960 <_ZN14HardwareSerial4peekEv+0x8>
 960:	cd b7       	in	r28, 0x3d	; 61
 962:	de b7       	in	r29, 0x3e	; 62
 964:	9a 83       	std	Y+2, r25	; 0x02
 966:	89 83       	std	Y+1, r24	; 0x01
{
  if (_rx_buffer->head == _rx_buffer->tail) {
 968:	e9 81       	ldd	r30, Y+1	; 0x01
 96a:	fa 81       	ldd	r31, Y+2	; 0x02
 96c:	82 81       	ldd	r24, Z+2	; 0x02
 96e:	93 81       	ldd	r25, Z+3	; 0x03
 970:	fc 01       	movw	r30, r24
 972:	e0 58       	subi	r30, 0x80	; 128
 974:	ff 4f       	sbci	r31, 0xFF	; 255
 976:	20 81       	ld	r18, Z
 978:	31 81       	ldd	r19, Z+1	; 0x01
 97a:	e9 81       	ldd	r30, Y+1	; 0x01
 97c:	fa 81       	ldd	r31, Y+2	; 0x02
 97e:	82 81       	ldd	r24, Z+2	; 0x02
 980:	93 81       	ldd	r25, Z+3	; 0x03
 982:	fc 01       	movw	r30, r24
 984:	ee 57       	subi	r30, 0x7E	; 126
 986:	ff 4f       	sbci	r31, 0xFF	; 255
 988:	80 81       	ld	r24, Z
 98a:	91 81       	ldd	r25, Z+1	; 0x01
 98c:	28 17       	cp	r18, r24
 98e:	39 07       	cpc	r19, r25
 990:	01 f4       	brne	.+0      	; 0x992 <_ZN14HardwareSerial4peekEv+0x3a>
    return -1;
 992:	2f ef       	ldi	r18, 0xFF	; 255
 994:	3f ef       	ldi	r19, 0xFF	; 255
 996:	3c 83       	std	Y+4, r19	; 0x04
 998:	2b 83       	std	Y+3, r18	; 0x03
 99a:	00 c0       	rjmp	.+0      	; 0x99c <_ZN14HardwareSerial4peekEv+0x44>
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
 99c:	e9 81       	ldd	r30, Y+1	; 0x01
 99e:	fa 81       	ldd	r31, Y+2	; 0x02
 9a0:	22 81       	ldd	r18, Z+2	; 0x02
 9a2:	33 81       	ldd	r19, Z+3	; 0x03
 9a4:	e9 81       	ldd	r30, Y+1	; 0x01
 9a6:	fa 81       	ldd	r31, Y+2	; 0x02
 9a8:	82 81       	ldd	r24, Z+2	; 0x02
 9aa:	93 81       	ldd	r25, Z+3	; 0x03
 9ac:	fc 01       	movw	r30, r24
 9ae:	ee 57       	subi	r30, 0x7E	; 126
 9b0:	ff 4f       	sbci	r31, 0xFF	; 255
 9b2:	80 81       	ld	r24, Z
 9b4:	91 81       	ldd	r25, Z+1	; 0x01
 9b6:	f9 01       	movw	r30, r18
 9b8:	e8 0f       	add	r30, r24
 9ba:	f9 1f       	adc	r31, r25
 9bc:	80 81       	ld	r24, Z
 9be:	28 2f       	mov	r18, r24
 9c0:	30 e0       	ldi	r19, 0x00	; 0
 9c2:	3c 83       	std	Y+4, r19	; 0x04
 9c4:	2b 83       	std	Y+3, r18	; 0x03
 9c6:	8b 81       	ldd	r24, Y+3	; 0x03
 9c8:	9c 81       	ldd	r25, Y+4	; 0x04
  }
}
 9ca:	0f 90       	pop	r0
 9cc:	0f 90       	pop	r0
 9ce:	0f 90       	pop	r0
 9d0:	0f 90       	pop	r0
 9d2:	cf 91       	pop	r28
 9d4:	df 91       	pop	r29
 9d6:	08 95       	ret

000009d8 <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
 9d8:	0f 93       	push	r16
 9da:	1f 93       	push	r17
 9dc:	df 93       	push	r29
 9de:	cf 93       	push	r28
 9e0:	00 d0       	rcall	.+0      	; 0x9e2 <_ZN14HardwareSerial4readEv+0xa>
 9e2:	00 d0       	rcall	.+0      	; 0x9e4 <_ZN14HardwareSerial4readEv+0xc>
 9e4:	0f 92       	push	r0
 9e6:	cd b7       	in	r28, 0x3d	; 61
 9e8:	de b7       	in	r29, 0x3e	; 62
 9ea:	9b 83       	std	Y+3, r25	; 0x03
 9ec:	8a 83       	std	Y+2, r24	; 0x02
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
 9ee:	ea 81       	ldd	r30, Y+2	; 0x02
 9f0:	fb 81       	ldd	r31, Y+3	; 0x03
 9f2:	82 81       	ldd	r24, Z+2	; 0x02
 9f4:	93 81       	ldd	r25, Z+3	; 0x03
 9f6:	fc 01       	movw	r30, r24
 9f8:	e0 58       	subi	r30, 0x80	; 128
 9fa:	ff 4f       	sbci	r31, 0xFF	; 255
 9fc:	20 81       	ld	r18, Z
 9fe:	31 81       	ldd	r19, Z+1	; 0x01
 a00:	ea 81       	ldd	r30, Y+2	; 0x02
 a02:	fb 81       	ldd	r31, Y+3	; 0x03
 a04:	82 81       	ldd	r24, Z+2	; 0x02
 a06:	93 81       	ldd	r25, Z+3	; 0x03
 a08:	fc 01       	movw	r30, r24
 a0a:	ee 57       	subi	r30, 0x7E	; 126
 a0c:	ff 4f       	sbci	r31, 0xFF	; 255
 a0e:	80 81       	ld	r24, Z
 a10:	91 81       	ldd	r25, Z+1	; 0x01
 a12:	28 17       	cp	r18, r24
 a14:	39 07       	cpc	r19, r25
 a16:	01 f4       	brne	.+0      	; 0xa18 <_ZN14HardwareSerial4readEv+0x40>
    return -1;
 a18:	2f ef       	ldi	r18, 0xFF	; 255
 a1a:	3f ef       	ldi	r19, 0xFF	; 255
 a1c:	3d 83       	std	Y+5, r19	; 0x05
 a1e:	2c 83       	std	Y+4, r18	; 0x04
 a20:	00 c0       	rjmp	.+0      	; 0xa22 <_ZN14HardwareSerial4readEv+0x4a>
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 a22:	ea 81       	ldd	r30, Y+2	; 0x02
 a24:	fb 81       	ldd	r31, Y+3	; 0x03
 a26:	22 81       	ldd	r18, Z+2	; 0x02
 a28:	33 81       	ldd	r19, Z+3	; 0x03
 a2a:	ea 81       	ldd	r30, Y+2	; 0x02
 a2c:	fb 81       	ldd	r31, Y+3	; 0x03
 a2e:	82 81       	ldd	r24, Z+2	; 0x02
 a30:	93 81       	ldd	r25, Z+3	; 0x03
 a32:	fc 01       	movw	r30, r24
 a34:	ee 57       	subi	r30, 0x7E	; 126
 a36:	ff 4f       	sbci	r31, 0xFF	; 255
 a38:	80 81       	ld	r24, Z
 a3a:	91 81       	ldd	r25, Z+1	; 0x01
 a3c:	f9 01       	movw	r30, r18
 a3e:	e8 0f       	add	r30, r24
 a40:	f9 1f       	adc	r31, r25
 a42:	80 81       	ld	r24, Z
 a44:	89 83       	std	Y+1, r24	; 0x01
    _rx_buffer->tail = (_rx_buffer->tail + 1) % RX_BUFFER_SIZE;
 a46:	ea 81       	ldd	r30, Y+2	; 0x02
 a48:	fb 81       	ldd	r31, Y+3	; 0x03
 a4a:	02 81       	ldd	r16, Z+2	; 0x02
 a4c:	13 81       	ldd	r17, Z+3	; 0x03
 a4e:	ea 81       	ldd	r30, Y+2	; 0x02
 a50:	fb 81       	ldd	r31, Y+3	; 0x03
 a52:	82 81       	ldd	r24, Z+2	; 0x02
 a54:	93 81       	ldd	r25, Z+3	; 0x03
 a56:	fc 01       	movw	r30, r24
 a58:	ee 57       	subi	r30, 0x7E	; 126
 a5a:	ff 4f       	sbci	r31, 0xFF	; 255
 a5c:	80 81       	ld	r24, Z
 a5e:	91 81       	ldd	r25, Z+1	; 0x01
 a60:	01 96       	adiw	r24, 0x01	; 1
 a62:	20 e8       	ldi	r18, 0x80	; 128
 a64:	30 e0       	ldi	r19, 0x00	; 0
 a66:	b9 01       	movw	r22, r18
 a68:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 a6c:	f8 01       	movw	r30, r16
 a6e:	ee 57       	subi	r30, 0x7E	; 126
 a70:	ff 4f       	sbci	r31, 0xFF	; 255
 a72:	91 83       	std	Z+1, r25	; 0x01
 a74:	80 83       	st	Z, r24
    return c;
 a76:	89 81       	ldd	r24, Y+1	; 0x01
 a78:	28 2f       	mov	r18, r24
 a7a:	30 e0       	ldi	r19, 0x00	; 0
 a7c:	3d 83       	std	Y+5, r19	; 0x05
 a7e:	2c 83       	std	Y+4, r18	; 0x04
 a80:	8c 81       	ldd	r24, Y+4	; 0x04
 a82:	9d 81       	ldd	r25, Y+5	; 0x05
  }
}
 a84:	0f 90       	pop	r0
 a86:	0f 90       	pop	r0
 a88:	0f 90       	pop	r0
 a8a:	0f 90       	pop	r0
 a8c:	0f 90       	pop	r0
 a8e:	cf 91       	pop	r28
 a90:	df 91       	pop	r29
 a92:	1f 91       	pop	r17
 a94:	0f 91       	pop	r16
 a96:	08 95       	ret

00000a98 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
 a98:	df 93       	push	r29
 a9a:	cf 93       	push	r28
 a9c:	00 d0       	rcall	.+0      	; 0xa9e <_ZN14HardwareSerial5flushEv+0x6>
 a9e:	cd b7       	in	r28, 0x3d	; 61
 aa0:	de b7       	in	r29, 0x3e	; 62
 aa2:	9a 83       	std	Y+2, r25	; 0x02
 aa4:	89 83       	std	Y+1, r24	; 0x01
  // don't reverse this or there may be problems if the RX interrupt
  // occurs after reading the value of rx_buffer_head but before writing
  // the value to rx_buffer_tail; the previous value of rx_buffer_head
  // may be written to rx_buffer_tail, making it appear as if the buffer
  // were full, not empty.
  _rx_buffer->head = _rx_buffer->tail;
 aa6:	e9 81       	ldd	r30, Y+1	; 0x01
 aa8:	fa 81       	ldd	r31, Y+2	; 0x02
 aaa:	22 81       	ldd	r18, Z+2	; 0x02
 aac:	33 81       	ldd	r19, Z+3	; 0x03
 aae:	e9 81       	ldd	r30, Y+1	; 0x01
 ab0:	fa 81       	ldd	r31, Y+2	; 0x02
 ab2:	82 81       	ldd	r24, Z+2	; 0x02
 ab4:	93 81       	ldd	r25, Z+3	; 0x03
 ab6:	fc 01       	movw	r30, r24
 ab8:	ee 57       	subi	r30, 0x7E	; 126
 aba:	ff 4f       	sbci	r31, 0xFF	; 255
 abc:	80 81       	ld	r24, Z
 abe:	91 81       	ldd	r25, Z+1	; 0x01
 ac0:	f9 01       	movw	r30, r18
 ac2:	e0 58       	subi	r30, 0x80	; 128
 ac4:	ff 4f       	sbci	r31, 0xFF	; 255
 ac6:	91 83       	std	Z+1, r25	; 0x01
 ac8:	80 83       	st	Z, r24
}
 aca:	0f 90       	pop	r0
 acc:	0f 90       	pop	r0
 ace:	cf 91       	pop	r28
 ad0:	df 91       	pop	r29
 ad2:	08 95       	ret

00000ad4 <_ZN14HardwareSerial5writeEh>:

void HardwareSerial::write(uint8_t c)
 ad4:	df 93       	push	r29
 ad6:	cf 93       	push	r28
 ad8:	00 d0       	rcall	.+0      	; 0xada <_ZN14HardwareSerial5writeEh+0x6>
 ada:	0f 92       	push	r0
 adc:	cd b7       	in	r28, 0x3d	; 61
 ade:	de b7       	in	r29, 0x3e	; 62
 ae0:	9a 83       	std	Y+2, r25	; 0x02
 ae2:	89 83       	std	Y+1, r24	; 0x01
 ae4:	6b 83       	std	Y+3, r22	; 0x03
{
  while (!((*_ucsra) & (1 << _udre)))
 ae6:	e9 81       	ldd	r30, Y+1	; 0x01
 ae8:	fa 81       	ldd	r31, Y+2	; 0x02
 aea:	00 84       	ldd	r0, Z+8	; 0x08
 aec:	f1 85       	ldd	r31, Z+9	; 0x09
 aee:	e0 2d       	mov	r30, r0
 af0:	80 81       	ld	r24, Z
 af2:	28 2f       	mov	r18, r24
 af4:	30 e0       	ldi	r19, 0x00	; 0
 af6:	e9 81       	ldd	r30, Y+1	; 0x01
 af8:	fa 81       	ldd	r31, Y+2	; 0x02
 afa:	81 89       	ldd	r24, Z+17	; 0x11
 afc:	88 2f       	mov	r24, r24
 afe:	90 e0       	ldi	r25, 0x00	; 0
 b00:	a9 01       	movw	r20, r18
 b02:	00 c0       	rjmp	.+0      	; 0xb04 <_ZN14HardwareSerial5writeEh+0x30>
 b04:	55 95       	asr	r21
 b06:	47 95       	ror	r20
 b08:	8a 95       	dec	r24
 b0a:	02 f4       	brpl	.+0      	; 0xb0c <_ZN14HardwareSerial5writeEh+0x38>
 b0c:	ca 01       	movw	r24, r20
 b0e:	81 70       	andi	r24, 0x01	; 1
 b10:	90 70       	andi	r25, 0x00	; 0
 b12:	98 2f       	mov	r25, r24
 b14:	81 e0       	ldi	r24, 0x01	; 1
 b16:	89 27       	eor	r24, r25
 b18:	88 23       	and	r24, r24
 b1a:	01 f4       	brne	.+0      	; 0xb1c <_ZN14HardwareSerial5writeEh+0x48>
    ;

  *_udr = c;
 b1c:	e9 81       	ldd	r30, Y+1	; 0x01
 b1e:	fa 81       	ldd	r31, Y+2	; 0x02
 b20:	04 84       	ldd	r0, Z+12	; 0x0c
 b22:	f5 85       	ldd	r31, Z+13	; 0x0d
 b24:	e0 2d       	mov	r30, r0
 b26:	8b 81       	ldd	r24, Y+3	; 0x03
 b28:	80 83       	st	Z, r24
}
 b2a:	0f 90       	pop	r0
 b2c:	0f 90       	pop	r0
 b2e:	0f 90       	pop	r0
 b30:	cf 91       	pop	r28
 b32:	df 91       	pop	r29
 b34:	08 95       	ret

00000b36 <_Z41__static_initialization_and_destruction_0ii>:
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(__AVR_ATmega8__)
HardwareSerial Serial(&rx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRE, U2X);
#else
HardwareSerial Serial(&rx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRE0, U2X0);
 b36:	8f 92       	push	r8
 b38:	af 92       	push	r10
 b3a:	cf 92       	push	r12
 b3c:	df 92       	push	r13
 b3e:	ef 92       	push	r14
 b40:	ff 92       	push	r15
 b42:	0f 93       	push	r16
 b44:	1f 93       	push	r17
 b46:	df 93       	push	r29
 b48:	cf 93       	push	r28
 b4a:	00 d0       	rcall	.+0      	; 0xb4c <_Z41__static_initialization_and_destruction_0ii+0x16>
 b4c:	00 d0       	rcall	.+0      	; 0xb4e <_Z41__static_initialization_and_destruction_0ii+0x18>
 b4e:	cd b7       	in	r28, 0x3d	; 61
 b50:	de b7       	in	r29, 0x3e	; 62
 b52:	9a 83       	std	Y+2, r25	; 0x02
 b54:	89 83       	std	Y+1, r24	; 0x01
 b56:	7c 83       	std	Y+4, r23	; 0x04
 b58:	6b 83       	std	Y+3, r22	; 0x03
 b5a:	89 81       	ldd	r24, Y+1	; 0x01
 b5c:	9a 81       	ldd	r25, Y+2	; 0x02
 b5e:	81 30       	cpi	r24, 0x01	; 1
 b60:	91 05       	cpc	r25, r1
 b62:	01 f4       	brne	.+0      	; 0xb64 <_Z41__static_initialization_and_destruction_0ii+0x2e>
 b64:	8b 81       	ldd	r24, Y+3	; 0x03
 b66:	9c 81       	ldd	r25, Y+4	; 0x04
 b68:	2f ef       	ldi	r18, 0xFF	; 255
 b6a:	8f 3f       	cpi	r24, 0xFF	; 255
 b6c:	92 07       	cpc	r25, r18
 b6e:	01 f4       	brne	.+0      	; 0xb70 <_Z41__static_initialization_and_destruction_0ii+0x3a>
 b70:	00 d0       	rcall	.+0      	; 0xb72 <_Z41__static_initialization_and_destruction_0ii+0x3c>
 b72:	0f 92       	push	r0
 b74:	ed b7       	in	r30, 0x3d	; 61
 b76:	fe b7       	in	r31, 0x3e	; 62
 b78:	31 96       	adiw	r30, 0x01	; 1
 b7a:	20 e0       	ldi	r18, 0x00	; 0
 b7c:	30 e0       	ldi	r19, 0x00	; 0
 b7e:	40 e0       	ldi	r20, 0x00	; 0
 b80:	50 e0       	ldi	r21, 0x00	; 0
 b82:	87 e0       	ldi	r24, 0x07	; 7
 b84:	80 83       	st	Z, r24
 b86:	85 e0       	ldi	r24, 0x05	; 5
 b88:	81 83       	std	Z+1, r24	; 0x01
 b8a:	81 e0       	ldi	r24, 0x01	; 1
 b8c:	82 83       	std	Z+2, r24	; 0x02
 b8e:	c9 01       	movw	r24, r18
 b90:	ba 01       	movw	r22, r20
 b92:	45 ec       	ldi	r20, 0xC5	; 197
 b94:	50 e0       	ldi	r21, 0x00	; 0
 b96:	24 ec       	ldi	r18, 0xC4	; 196
 b98:	30 e0       	ldi	r19, 0x00	; 0
 b9a:	00 ec       	ldi	r16, 0xC0	; 192
 b9c:	10 e0       	ldi	r17, 0x00	; 0
 b9e:	0f 2e       	mov	r0, r31
 ba0:	f1 ec       	ldi	r31, 0xC1	; 193
 ba2:	ef 2e       	mov	r14, r31
 ba4:	ff 24       	eor	r15, r15
 ba6:	f0 2d       	mov	r31, r0
 ba8:	0f 2e       	mov	r0, r31
 baa:	f6 ec       	ldi	r31, 0xC6	; 198
 bac:	cf 2e       	mov	r12, r31
 bae:	dd 24       	eor	r13, r13
 bb0:	f0 2d       	mov	r31, r0
 bb2:	aa 24       	eor	r10, r10
 bb4:	68 94       	set
 bb6:	a2 f8       	bld	r10, 2
 bb8:	0f 2e       	mov	r0, r31
 bba:	f3 e0       	ldi	r31, 0x03	; 3
 bbc:	8f 2e       	mov	r8, r31
 bbe:	f0 2d       	mov	r31, r0
 bc0:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 bc4:	0f 90       	pop	r0
 bc6:	0f 90       	pop	r0
 bc8:	0f 90       	pop	r0
 bca:	0f 90       	pop	r0
 bcc:	0f 90       	pop	r0
 bce:	0f 90       	pop	r0
 bd0:	0f 90       	pop	r0
 bd2:	cf 91       	pop	r28
 bd4:	df 91       	pop	r29
 bd6:	1f 91       	pop	r17
 bd8:	0f 91       	pop	r16
 bda:	ff 90       	pop	r15
 bdc:	ef 90       	pop	r14
 bde:	df 90       	pop	r13
 be0:	cf 90       	pop	r12
 be2:	af 90       	pop	r10
 be4:	8f 90       	pop	r8
 be6:	08 95       	ret

00000be8 <_GLOBAL__I_rx_buffer>:
 be8:	df 93       	push	r29
 bea:	cf 93       	push	r28
 bec:	cd b7       	in	r28, 0x3d	; 61
 bee:	de b7       	in	r29, 0x3e	; 62
 bf0:	81 e0       	ldi	r24, 0x01	; 1
 bf2:	90 e0       	ldi	r25, 0x00	; 0
 bf4:	6f ef       	ldi	r22, 0xFF	; 255
 bf6:	7f ef       	ldi	r23, 0xFF	; 255
 bf8:	0e 94 00 00 	call	0	; 0x0 <_Z10store_charhP11ring_buffer>
 bfc:	cf 91       	pop	r28
 bfe:	df 91       	pop	r29
 c00:	08 95       	ret

Print.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a7a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         0000000c  00000000  00000000  00000aae  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, DATA
  2 .bss          00000000  00000000  00000000  00000aba  2**0
                  ALLOC
  3 .stab         00000e64  00000000  00000000  00000abc  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      0000105a  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZNK6String6lengthEv>:
    int	indexOf( const String &str, unsigned int fromIndex ) const;
    int	lastIndexOf( char ch ) const;
    int	lastIndexOf( char ch, unsigned int fromIndex ) const;
    int	lastIndexOf( const String &str ) const;
    int	lastIndexOf( const String &str, unsigned int fromIndex ) const;
    const unsigned int length( ) const { return _length; }
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6lengthEv+0x6>
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	9a 83       	std	Y+2, r25	; 0x02
   c:	89 83       	std	Y+1, r24	; 0x01
   e:	e9 81       	ldd	r30, Y+1	; 0x01
  10:	fa 81       	ldd	r31, Y+2	; 0x02
  12:	84 81       	ldd	r24, Z+4	; 0x04
  14:	95 81       	ldd	r25, Z+5	; 0x05
  16:	0f 90       	pop	r0
  18:	0f 90       	pop	r0
  1a:	cf 91       	pop	r28
  1c:	df 91       	pop	r29
  1e:	08 95       	ret

00000020 <_ZN5Print5writeEPKc>:
#include "Print.h"

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
  20:	df 93       	push	r29
  22:	cf 93       	push	r28
  24:	00 d0       	rcall	.+0      	; 0x26 <_ZN5Print5writeEPKc+0x6>
  26:	00 d0       	rcall	.+0      	; 0x28 <_ZN5Print5writeEPKc+0x8>
  28:	cd b7       	in	r28, 0x3d	; 61
  2a:	de b7       	in	r29, 0x3e	; 62
  2c:	9a 83       	std	Y+2, r25	; 0x02
  2e:	89 83       	std	Y+1, r24	; 0x01
  30:	7c 83       	std	Y+4, r23	; 0x04
  32:	6b 83       	std	Y+3, r22	; 0x03
  34:	00 c0       	rjmp	.+0      	; 0x36 <_ZN5Print5writeEPKc+0x16>
{
  while (*str)
    write(*str++);
  36:	e9 81       	ldd	r30, Y+1	; 0x01
  38:	fa 81       	ldd	r31, Y+2	; 0x02
  3a:	01 90       	ld	r0, Z+
  3c:	f0 81       	ld	r31, Z
  3e:	e0 2d       	mov	r30, r0
  40:	20 81       	ld	r18, Z
  42:	31 81       	ldd	r19, Z+1	; 0x01
  44:	eb 81       	ldd	r30, Y+3	; 0x03
  46:	fc 81       	ldd	r31, Y+4	; 0x04
  48:	40 81       	ld	r20, Z
  4a:	8b 81       	ldd	r24, Y+3	; 0x03
  4c:	9c 81       	ldd	r25, Y+4	; 0x04
  4e:	01 96       	adiw	r24, 0x01	; 1
  50:	9c 83       	std	Y+4, r25	; 0x04
  52:	8b 83       	std	Y+3, r24	; 0x03
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	9a 81       	ldd	r25, Y+2	; 0x02
  58:	64 2f       	mov	r22, r20
  5a:	f9 01       	movw	r30, r18
  5c:	09 95       	icall
// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
void Print::write(const char *str)
{
  while (*str)
  5e:	eb 81       	ldd	r30, Y+3	; 0x03
  60:	fc 81       	ldd	r31, Y+4	; 0x04
  62:	80 81       	ld	r24, Z
  64:	88 23       	and	r24, r24
  66:	01 f4       	brne	.+0      	; 0x68 <_ZN5Print5writeEPKc+0x48>
    write(*str++);
}
  68:	0f 90       	pop	r0
  6a:	0f 90       	pop	r0
  6c:	0f 90       	pop	r0
  6e:	0f 90       	pop	r0
  70:	cf 91       	pop	r28
  72:	df 91       	pop	r29
  74:	08 95       	ret

00000076 <_ZN5Print5writeEPKhj>:

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
  76:	df 93       	push	r29
  78:	cf 93       	push	r28
  7a:	cd b7       	in	r28, 0x3d	; 61
  7c:	de b7       	in	r29, 0x3e	; 62
  7e:	27 97       	sbiw	r28, 0x07	; 7
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	f8 94       	cli
  84:	de bf       	out	0x3e, r29	; 62
  86:	0f be       	out	0x3f, r0	; 63
  88:	cd bf       	out	0x3d, r28	; 61
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	89 83       	std	Y+1, r24	; 0x01
  8e:	7c 83       	std	Y+4, r23	; 0x04
  90:	6b 83       	std	Y+3, r22	; 0x03
  92:	5e 83       	std	Y+6, r21	; 0x06
  94:	4d 83       	std	Y+5, r20	; 0x05
  96:	00 c0       	rjmp	.+0      	; 0x98 <_ZN5Print5writeEPKhj+0x22>
{
  while (size--)
    write(*buffer++);
  98:	e9 81       	ldd	r30, Y+1	; 0x01
  9a:	fa 81       	ldd	r31, Y+2	; 0x02
  9c:	01 90       	ld	r0, Z+
  9e:	f0 81       	ld	r31, Z
  a0:	e0 2d       	mov	r30, r0
  a2:	20 81       	ld	r18, Z
  a4:	31 81       	ldd	r19, Z+1	; 0x01
  a6:	eb 81       	ldd	r30, Y+3	; 0x03
  a8:	fc 81       	ldd	r31, Y+4	; 0x04
  aa:	40 81       	ld	r20, Z
  ac:	8b 81       	ldd	r24, Y+3	; 0x03
  ae:	9c 81       	ldd	r25, Y+4	; 0x04
  b0:	01 96       	adiw	r24, 0x01	; 1
  b2:	9c 83       	std	Y+4, r25	; 0x04
  b4:	8b 83       	std	Y+3, r24	; 0x03
  b6:	89 81       	ldd	r24, Y+1	; 0x01
  b8:	9a 81       	ldd	r25, Y+2	; 0x02
  ba:	64 2f       	mov	r22, r20
  bc:	f9 01       	movw	r30, r18
  be:	09 95       	icall
}

/* default implementation: may be overridden */
void Print::write(const uint8_t *buffer, size_t size)
{
  while (size--)
  c0:	1f 82       	std	Y+7, r1	; 0x07
  c2:	8d 81       	ldd	r24, Y+5	; 0x05
  c4:	9e 81       	ldd	r25, Y+6	; 0x06
  c6:	00 97       	sbiw	r24, 0x00	; 0
  c8:	01 f0       	breq	.+0      	; 0xca <_ZN5Print5writeEPKhj+0x54>
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	8f 83       	std	Y+7, r24	; 0x07
  ce:	8d 81       	ldd	r24, Y+5	; 0x05
  d0:	9e 81       	ldd	r25, Y+6	; 0x06
  d2:	01 97       	sbiw	r24, 0x01	; 1
  d4:	9e 83       	std	Y+6, r25	; 0x06
  d6:	8d 83       	std	Y+5, r24	; 0x05
  d8:	8f 81       	ldd	r24, Y+7	; 0x07
  da:	88 23       	and	r24, r24
  dc:	01 f4       	brne	.+0      	; 0xde <_ZN5Print5writeEPKhj+0x68>
    write(*buffer++);
}
  de:	27 96       	adiw	r28, 0x07	; 7
  e0:	0f b6       	in	r0, 0x3f	; 63
  e2:	f8 94       	cli
  e4:	de bf       	out	0x3e, r29	; 62
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	cd bf       	out	0x3d, r28	; 61
  ea:	cf 91       	pop	r28
  ec:	df 91       	pop	r29
  ee:	08 95       	ret

000000f0 <_ZN5Print5printEPKc>:
  for (int i = 0; i < s.length(); i++) {
    write(s[i]);
  }
}

void Print::print(const char str[])
  f0:	df 93       	push	r29
  f2:	cf 93       	push	r28
  f4:	00 d0       	rcall	.+0      	; 0xf6 <_ZN5Print5printEPKc+0x6>
  f6:	00 d0       	rcall	.+0      	; 0xf8 <_ZN5Print5printEPKc+0x8>
  f8:	cd b7       	in	r28, 0x3d	; 61
  fa:	de b7       	in	r29, 0x3e	; 62
  fc:	9a 83       	std	Y+2, r25	; 0x02
  fe:	89 83       	std	Y+1, r24	; 0x01
 100:	7c 83       	std	Y+4, r23	; 0x04
 102:	6b 83       	std	Y+3, r22	; 0x03
{
  write(str);
 104:	e9 81       	ldd	r30, Y+1	; 0x01
 106:	fa 81       	ldd	r31, Y+2	; 0x02
 108:	80 81       	ld	r24, Z
 10a:	91 81       	ldd	r25, Z+1	; 0x01
 10c:	fc 01       	movw	r30, r24
 10e:	32 96       	adiw	r30, 0x02	; 2
 110:	01 90       	ld	r0, Z+
 112:	f0 81       	ld	r31, Z
 114:	e0 2d       	mov	r30, r0
 116:	89 81       	ldd	r24, Y+1	; 0x01
 118:	9a 81       	ldd	r25, Y+2	; 0x02
 11a:	2b 81       	ldd	r18, Y+3	; 0x03
 11c:	3c 81       	ldd	r19, Y+4	; 0x04
 11e:	b9 01       	movw	r22, r18
 120:	09 95       	icall
}
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	cf 91       	pop	r28
 12c:	df 91       	pop	r29
 12e:	08 95       	ret

00000130 <_ZN5Print11printNumberEmh>:
  println();
}

// Private Methods /////////////////////////////////////////////////////////////

void Print::printNumber(unsigned long n, uint8_t base)
 130:	ef 92       	push	r14
 132:	ff 92       	push	r15
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	df 93       	push	r29
 13a:	cf 93       	push	r28
 13c:	cd b7       	in	r28, 0x3d	; 61
 13e:	de b7       	in	r29, 0x3e	; 62
 140:	ac 97       	sbiw	r28, 0x2c	; 44
 142:	0f b6       	in	r0, 0x3f	; 63
 144:	f8 94       	cli
 146:	de bf       	out	0x3e, r29	; 62
 148:	0f be       	out	0x3f, r0	; 63
 14a:	cd bf       	out	0x3d, r28	; 61
 14c:	9e a3       	std	Y+38, r25	; 0x26
 14e:	8d a3       	std	Y+37, r24	; 0x25
 150:	4f a3       	std	Y+39, r20	; 0x27
 152:	58 a7       	std	Y+40, r21	; 0x28
 154:	69 a7       	std	Y+41, r22	; 0x29
 156:	7a a7       	std	Y+42, r23	; 0x2a
 158:	2b a7       	std	Y+43, r18	; 0x2b
{
  unsigned char buf[8 * sizeof(long)]; // Assumes 8-bit chars. 
  unsigned long i = 0;
 15a:	19 82       	std	Y+1, r1	; 0x01
 15c:	1a 82       	std	Y+2, r1	; 0x02
 15e:	1b 82       	std	Y+3, r1	; 0x03
 160:	1c 82       	std	Y+4, r1	; 0x04

  if (n == 0) {
 162:	8f a1       	ldd	r24, Y+39	; 0x27
 164:	98 a5       	ldd	r25, Y+40	; 0x28
 166:	a9 a5       	ldd	r26, Y+41	; 0x29
 168:	ba a5       	ldd	r27, Y+42	; 0x2a
 16a:	00 97       	sbiw	r24, 0x00	; 0
 16c:	a1 05       	cpc	r26, r1
 16e:	b1 05       	cpc	r27, r1
 170:	01 f0       	breq	.+0      	; 0x172 <_ZN5Print11printNumberEmh+0x42>
 172:	00 c0       	rjmp	.+0      	; 0x174 <_ZN5Print11printNumberEmh+0x44>
    print('0');
 174:	8d a1       	ldd	r24, Y+37	; 0x25
 176:	9e a1       	ldd	r25, Y+38	; 0x26
 178:	60 e3       	ldi	r22, 0x30	; 48
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	50 e0       	ldi	r21, 0x00	; 0
 17e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 182:	00 c0       	rjmp	.+0      	; 0x184 <_ZN5Print11printNumberEmh+0x54>
    return;
  } 

  while (n > 0) {
    buf[i++] = n % base;
 184:	e9 80       	ldd	r14, Y+1	; 0x01
 186:	fa 80       	ldd	r15, Y+2	; 0x02
 188:	0b 81       	ldd	r16, Y+3	; 0x03
 18a:	1c 81       	ldd	r17, Y+4	; 0x04
 18c:	8b a5       	ldd	r24, Y+43	; 0x2b
 18e:	28 2f       	mov	r18, r24
 190:	30 e0       	ldi	r19, 0x00	; 0
 192:	40 e0       	ldi	r20, 0x00	; 0
 194:	50 e0       	ldi	r21, 0x00	; 0
 196:	8f a1       	ldd	r24, Y+39	; 0x27
 198:	98 a5       	ldd	r25, Y+40	; 0x28
 19a:	a9 a5       	ldd	r26, Y+41	; 0x29
 19c:	ba a5       	ldd	r27, Y+42	; 0x2a
 19e:	bc 01       	movw	r22, r24
 1a0:	cd 01       	movw	r24, r26
 1a2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 1a6:	dc 01       	movw	r26, r24
 1a8:	cb 01       	movw	r24, r22
 1aa:	28 2f       	mov	r18, r24
 1ac:	ce 01       	movw	r24, r28
 1ae:	05 96       	adiw	r24, 0x05	; 5
 1b0:	fc 01       	movw	r30, r24
 1b2:	ee 0d       	add	r30, r14
 1b4:	ff 1d       	adc	r31, r15
 1b6:	20 83       	st	Z, r18
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	9a 81       	ldd	r25, Y+2	; 0x02
 1bc:	ab 81       	ldd	r26, Y+3	; 0x03
 1be:	bc 81       	ldd	r27, Y+4	; 0x04
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	a1 1d       	adc	r26, r1
 1c4:	b1 1d       	adc	r27, r1
 1c6:	89 83       	std	Y+1, r24	; 0x01
 1c8:	9a 83       	std	Y+2, r25	; 0x02
 1ca:	ab 83       	std	Y+3, r26	; 0x03
 1cc:	bc 83       	std	Y+4, r27	; 0x04
    n /= base;
 1ce:	8b a5       	ldd	r24, Y+43	; 0x2b
 1d0:	28 2f       	mov	r18, r24
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
 1d8:	8f a1       	ldd	r24, Y+39	; 0x27
 1da:	98 a5       	ldd	r25, Y+40	; 0x28
 1dc:	a9 a5       	ldd	r26, Y+41	; 0x29
 1de:	ba a5       	ldd	r27, Y+42	; 0x2a
 1e0:	bc 01       	movw	r22, r24
 1e2:	cd 01       	movw	r24, r26
 1e4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 1e8:	da 01       	movw	r26, r20
 1ea:	c9 01       	movw	r24, r18
 1ec:	8f a3       	std	Y+39, r24	; 0x27
 1ee:	98 a7       	std	Y+40, r25	; 0x28
 1f0:	a9 a7       	std	Y+41, r26	; 0x29
 1f2:	ba a7       	std	Y+42, r27	; 0x2a
  if (n == 0) {
    print('0');
    return;
  } 

  while (n > 0) {
 1f4:	8f a1       	ldd	r24, Y+39	; 0x27
 1f6:	98 a5       	ldd	r25, Y+40	; 0x28
 1f8:	a9 a5       	ldd	r26, Y+41	; 0x29
 1fa:	ba a5       	ldd	r27, Y+42	; 0x2a
 1fc:	00 97       	sbiw	r24, 0x00	; 0
 1fe:	a1 05       	cpc	r26, r1
 200:	b1 05       	cpc	r27, r1
 202:	01 f0       	breq	.+0      	; 0x204 <_ZN5Print11printNumberEmh+0xd4>
 204:	00 c0       	rjmp	.+0      	; 0x206 <_ZN5Print11printNumberEmh+0xd6>
 206:	00 c0       	rjmp	.+0      	; 0x208 <_ZN5Print11printNumberEmh+0xd8>
  }

  for (; i > 0; i--)
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
 208:	89 81       	ldd	r24, Y+1	; 0x01
 20a:	9a 81       	ldd	r25, Y+2	; 0x02
 20c:	ab 81       	ldd	r26, Y+3	; 0x03
 20e:	bc 81       	ldd	r27, Y+4	; 0x04
 210:	01 97       	sbiw	r24, 0x01	; 1
 212:	a1 09       	sbc	r26, r1
 214:	b1 09       	sbc	r27, r1
 216:	9e 01       	movw	r18, r28
 218:	2b 5f       	subi	r18, 0xFB	; 251
 21a:	3f 4f       	sbci	r19, 0xFF	; 255
 21c:	f9 01       	movw	r30, r18
 21e:	e8 0f       	add	r30, r24
 220:	f9 1f       	adc	r31, r25
 222:	80 81       	ld	r24, Z
 224:	8a 30       	cpi	r24, 0x0A	; 10
 226:	00 f4       	brcc	.+0      	; 0x228 <_ZN5Print11printNumberEmh+0xf8>
 228:	89 81       	ldd	r24, Y+1	; 0x01
 22a:	9a 81       	ldd	r25, Y+2	; 0x02
 22c:	ab 81       	ldd	r26, Y+3	; 0x03
 22e:	bc 81       	ldd	r27, Y+4	; 0x04
 230:	01 97       	sbiw	r24, 0x01	; 1
 232:	a1 09       	sbc	r26, r1
 234:	b1 09       	sbc	r27, r1
 236:	9e 01       	movw	r18, r28
 238:	2b 5f       	subi	r18, 0xFB	; 251
 23a:	3f 4f       	sbci	r19, 0xFF	; 255
 23c:	f9 01       	movw	r30, r18
 23e:	e8 0f       	add	r30, r24
 240:	f9 1f       	adc	r31, r25
 242:	80 81       	ld	r24, Z
 244:	98 2f       	mov	r25, r24
 246:	90 5d       	subi	r25, 0xD0	; 208
 248:	9c a7       	std	Y+44, r25	; 0x2c
 24a:	00 c0       	rjmp	.+0      	; 0x24c <_ZN5Print11printNumberEmh+0x11c>
 24c:	89 81       	ldd	r24, Y+1	; 0x01
 24e:	9a 81       	ldd	r25, Y+2	; 0x02
 250:	ab 81       	ldd	r26, Y+3	; 0x03
 252:	bc 81       	ldd	r27, Y+4	; 0x04
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	a1 09       	sbc	r26, r1
 258:	b1 09       	sbc	r27, r1
 25a:	9e 01       	movw	r18, r28
 25c:	2b 5f       	subi	r18, 0xFB	; 251
 25e:	3f 4f       	sbci	r19, 0xFF	; 255
 260:	f9 01       	movw	r30, r18
 262:	e8 0f       	add	r30, r24
 264:	f9 1f       	adc	r31, r25
 266:	80 81       	ld	r24, Z
 268:	98 2f       	mov	r25, r24
 26a:	99 5c       	subi	r25, 0xC9	; 201
 26c:	9c a7       	std	Y+44, r25	; 0x2c
 26e:	8d a1       	ldd	r24, Y+37	; 0x25
 270:	9e a1       	ldd	r25, Y+38	; 0x26
 272:	6c a5       	ldd	r22, Y+44	; 0x2c
 274:	40 e0       	ldi	r20, 0x00	; 0
 276:	50 e0       	ldi	r21, 0x00	; 0
 278:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  while (n > 0) {
    buf[i++] = n % base;
    n /= base;
  }

  for (; i > 0; i--)
 27c:	89 81       	ldd	r24, Y+1	; 0x01
 27e:	9a 81       	ldd	r25, Y+2	; 0x02
 280:	ab 81       	ldd	r26, Y+3	; 0x03
 282:	bc 81       	ldd	r27, Y+4	; 0x04
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	a1 09       	sbc	r26, r1
 288:	b1 09       	sbc	r27, r1
 28a:	89 83       	std	Y+1, r24	; 0x01
 28c:	9a 83       	std	Y+2, r25	; 0x02
 28e:	ab 83       	std	Y+3, r26	; 0x03
 290:	bc 83       	std	Y+4, r27	; 0x04
 292:	89 81       	ldd	r24, Y+1	; 0x01
 294:	9a 81       	ldd	r25, Y+2	; 0x02
 296:	ab 81       	ldd	r26, Y+3	; 0x03
 298:	bc 81       	ldd	r27, Y+4	; 0x04
 29a:	00 97       	sbiw	r24, 0x00	; 0
 29c:	a1 05       	cpc	r26, r1
 29e:	b1 05       	cpc	r27, r1
 2a0:	01 f0       	breq	.+0      	; 0x2a2 <_ZN5Print11printNumberEmh+0x172>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <_ZN5Print11printNumberEmh+0x174>
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}
 2a4:	ac 96       	adiw	r28, 0x2c	; 44
 2a6:	0f b6       	in	r0, 0x3f	; 63
 2a8:	f8 94       	cli
 2aa:	de bf       	out	0x3e, r29	; 62
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	cd bf       	out	0x3d, r28	; 61
 2b0:	cf 91       	pop	r28
 2b2:	df 91       	pop	r29
 2b4:	1f 91       	pop	r17
 2b6:	0f 91       	pop	r16
 2b8:	ff 90       	pop	r15
 2ba:	ef 90       	pop	r14
 2bc:	08 95       	ret

000002be <_ZN5Print5printEmi>:
  } else {
    printNumber(n, base);
  }
}

void Print::print(unsigned long n, int base)
 2be:	df 93       	push	r29
 2c0:	cf 93       	push	r28
 2c2:	cd b7       	in	r28, 0x3d	; 61
 2c4:	de b7       	in	r29, 0x3e	; 62
 2c6:	28 97       	sbiw	r28, 0x08	; 8
 2c8:	0f b6       	in	r0, 0x3f	; 63
 2ca:	f8 94       	cli
 2cc:	de bf       	out	0x3e, r29	; 62
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	cd bf       	out	0x3d, r28	; 61
 2d2:	9a 83       	std	Y+2, r25	; 0x02
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	4b 83       	std	Y+3, r20	; 0x03
 2d8:	5c 83       	std	Y+4, r21	; 0x04
 2da:	6d 83       	std	Y+5, r22	; 0x05
 2dc:	7e 83       	std	Y+6, r23	; 0x06
 2de:	38 87       	std	Y+8, r19	; 0x08
 2e0:	2f 83       	std	Y+7, r18	; 0x07
{
  if (base == 0) write(n);
 2e2:	8f 81       	ldd	r24, Y+7	; 0x07
 2e4:	98 85       	ldd	r25, Y+8	; 0x08
 2e6:	00 97       	sbiw	r24, 0x00	; 0
 2e8:	01 f4       	brne	.+0      	; 0x2ea <_ZN5Print5printEmi+0x2c>
 2ea:	e9 81       	ldd	r30, Y+1	; 0x01
 2ec:	fa 81       	ldd	r31, Y+2	; 0x02
 2ee:	01 90       	ld	r0, Z+
 2f0:	f0 81       	ld	r31, Z
 2f2:	e0 2d       	mov	r30, r0
 2f4:	01 90       	ld	r0, Z+
 2f6:	f0 81       	ld	r31, Z
 2f8:	e0 2d       	mov	r30, r0
 2fa:	2b 81       	ldd	r18, Y+3	; 0x03
 2fc:	89 81       	ldd	r24, Y+1	; 0x01
 2fe:	9a 81       	ldd	r25, Y+2	; 0x02
 300:	62 2f       	mov	r22, r18
 302:	09 95       	icall
 304:	00 c0       	rjmp	.+0      	; 0x306 <_ZN5Print5printEmi+0x48>
  else printNumber(n, base);
 306:	ef 81       	ldd	r30, Y+7	; 0x07
 308:	89 81       	ldd	r24, Y+1	; 0x01
 30a:	9a 81       	ldd	r25, Y+2	; 0x02
 30c:	2b 81       	ldd	r18, Y+3	; 0x03
 30e:	3c 81       	ldd	r19, Y+4	; 0x04
 310:	4d 81       	ldd	r20, Y+5	; 0x05
 312:	5e 81       	ldd	r21, Y+6	; 0x06
 314:	ba 01       	movw	r22, r20
 316:	a9 01       	movw	r20, r18
 318:	2e 2f       	mov	r18, r30
 31a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 31e:	28 96       	adiw	r28, 0x08	; 8
 320:	0f b6       	in	r0, 0x3f	; 63
 322:	f8 94       	cli
 324:	de bf       	out	0x3e, r29	; 62
 326:	0f be       	out	0x3f, r0	; 63
 328:	cd bf       	out	0x3d, r28	; 61
 32a:	cf 91       	pop	r28
 32c:	df 91       	pop	r29
 32e:	08 95       	ret

00000330 <_ZN5Print5printEji>:
void Print::print(int n, int base)
{
  print((long) n, base);
}

void Print::print(unsigned int n, int base)
 330:	df 93       	push	r29
 332:	cf 93       	push	r28
 334:	00 d0       	rcall	.+0      	; 0x336 <_ZN5Print5printEji+0x6>
 336:	00 d0       	rcall	.+0      	; 0x338 <_ZN5Print5printEji+0x8>
 338:	00 d0       	rcall	.+0      	; 0x33a <_ZN5Print5printEji+0xa>
 33a:	cd b7       	in	r28, 0x3d	; 61
 33c:	de b7       	in	r29, 0x3e	; 62
 33e:	9a 83       	std	Y+2, r25	; 0x02
 340:	89 83       	std	Y+1, r24	; 0x01
 342:	7c 83       	std	Y+4, r23	; 0x04
 344:	6b 83       	std	Y+3, r22	; 0x03
 346:	5e 83       	std	Y+6, r21	; 0x06
 348:	4d 83       	std	Y+5, r20	; 0x05
{
  print((unsigned long) n, base);
 34a:	8b 81       	ldd	r24, Y+3	; 0x03
 34c:	9c 81       	ldd	r25, Y+4	; 0x04
 34e:	9c 01       	movw	r18, r24
 350:	40 e0       	ldi	r20, 0x00	; 0
 352:	50 e0       	ldi	r21, 0x00	; 0
 354:	89 81       	ldd	r24, Y+1	; 0x01
 356:	9a 81       	ldd	r25, Y+2	; 0x02
 358:	ed 81       	ldd	r30, Y+5	; 0x05
 35a:	fe 81       	ldd	r31, Y+6	; 0x06
 35c:	ba 01       	movw	r22, r20
 35e:	a9 01       	movw	r20, r18
 360:	9f 01       	movw	r18, r30
 362:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 366:	26 96       	adiw	r28, 0x06	; 6
 368:	0f b6       	in	r0, 0x3f	; 63
 36a:	f8 94       	cli
 36c:	de bf       	out	0x3e, r29	; 62
 36e:	0f be       	out	0x3f, r0	; 63
 370:	cd bf       	out	0x3d, r28	; 61
 372:	cf 91       	pop	r28
 374:	df 91       	pop	r29
 376:	08 95       	ret

00000378 <_ZN5Print5printEhi>:
void Print::print(char c, int base)
{
  print((long) c, base);
}

void Print::print(unsigned char b, int base)
 378:	df 93       	push	r29
 37a:	cf 93       	push	r28
 37c:	00 d0       	rcall	.+0      	; 0x37e <_ZN5Print5printEhi+0x6>
 37e:	00 d0       	rcall	.+0      	; 0x380 <_ZN5Print5printEhi+0x8>
 380:	0f 92       	push	r0
 382:	cd b7       	in	r28, 0x3d	; 61
 384:	de b7       	in	r29, 0x3e	; 62
 386:	9a 83       	std	Y+2, r25	; 0x02
 388:	89 83       	std	Y+1, r24	; 0x01
 38a:	6b 83       	std	Y+3, r22	; 0x03
 38c:	5d 83       	std	Y+5, r21	; 0x05
 38e:	4c 83       	std	Y+4, r20	; 0x04
{
  print((unsigned long) b, base);
 390:	8b 81       	ldd	r24, Y+3	; 0x03
 392:	28 2f       	mov	r18, r24
 394:	30 e0       	ldi	r19, 0x00	; 0
 396:	40 e0       	ldi	r20, 0x00	; 0
 398:	50 e0       	ldi	r21, 0x00	; 0
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	ec 81       	ldd	r30, Y+4	; 0x04
 3a0:	fd 81       	ldd	r31, Y+5	; 0x05
 3a2:	ba 01       	movw	r22, r20
 3a4:	a9 01       	movw	r20, r18
 3a6:	9f 01       	movw	r18, r30
 3a8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 3ac:	0f 90       	pop	r0
 3ae:	0f 90       	pop	r0
 3b0:	0f 90       	pop	r0
 3b2:	0f 90       	pop	r0
 3b4:	0f 90       	pop	r0
 3b6:	cf 91       	pop	r28
 3b8:	df 91       	pop	r29
 3ba:	08 95       	ret

000003bc <_ZN5Print5printEli>:
void Print::print(unsigned int n, int base)
{
  print((unsigned long) n, base);
}

void Print::print(long n, int base)
 3bc:	df 93       	push	r29
 3be:	cf 93       	push	r28
 3c0:	cd b7       	in	r28, 0x3d	; 61
 3c2:	de b7       	in	r29, 0x3e	; 62
 3c4:	28 97       	sbiw	r28, 0x08	; 8
 3c6:	0f b6       	in	r0, 0x3f	; 63
 3c8:	f8 94       	cli
 3ca:	de bf       	out	0x3e, r29	; 62
 3cc:	0f be       	out	0x3f, r0	; 63
 3ce:	cd bf       	out	0x3d, r28	; 61
 3d0:	9a 83       	std	Y+2, r25	; 0x02
 3d2:	89 83       	std	Y+1, r24	; 0x01
 3d4:	4b 83       	std	Y+3, r20	; 0x03
 3d6:	5c 83       	std	Y+4, r21	; 0x04
 3d8:	6d 83       	std	Y+5, r22	; 0x05
 3da:	7e 83       	std	Y+6, r23	; 0x06
 3dc:	38 87       	std	Y+8, r19	; 0x08
 3de:	2f 83       	std	Y+7, r18	; 0x07
{
  if (base == 0) {
 3e0:	8f 81       	ldd	r24, Y+7	; 0x07
 3e2:	98 85       	ldd	r25, Y+8	; 0x08
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	01 f4       	brne	.+0      	; 0x3e8 <_ZN5Print5printEli+0x2c>
    write(n);
 3e8:	e9 81       	ldd	r30, Y+1	; 0x01
 3ea:	fa 81       	ldd	r31, Y+2	; 0x02
 3ec:	01 90       	ld	r0, Z+
 3ee:	f0 81       	ld	r31, Z
 3f0:	e0 2d       	mov	r30, r0
 3f2:	01 90       	ld	r0, Z+
 3f4:	f0 81       	ld	r31, Z
 3f6:	e0 2d       	mov	r30, r0
 3f8:	2b 81       	ldd	r18, Y+3	; 0x03
 3fa:	89 81       	ldd	r24, Y+1	; 0x01
 3fc:	9a 81       	ldd	r25, Y+2	; 0x02
 3fe:	62 2f       	mov	r22, r18
 400:	09 95       	icall
 402:	00 c0       	rjmp	.+0      	; 0x404 <_ZN5Print5printEli+0x48>
  } else if (base == 10) {
 404:	8f 81       	ldd	r24, Y+7	; 0x07
 406:	98 85       	ldd	r25, Y+8	; 0x08
 408:	8a 30       	cpi	r24, 0x0A	; 10
 40a:	91 05       	cpc	r25, r1
 40c:	01 f4       	brne	.+0      	; 0x40e <_ZN5Print5printEli+0x52>
    if (n < 0) {
 40e:	8b 81       	ldd	r24, Y+3	; 0x03
 410:	9c 81       	ldd	r25, Y+4	; 0x04
 412:	ad 81       	ldd	r26, Y+5	; 0x05
 414:	be 81       	ldd	r27, Y+6	; 0x06
 416:	bb 23       	and	r27, r27
 418:	04 f4       	brge	.+0      	; 0x41a <_ZN5Print5printEli+0x5e>
      print('-');
 41a:	89 81       	ldd	r24, Y+1	; 0x01
 41c:	9a 81       	ldd	r25, Y+2	; 0x02
 41e:	6d e2       	ldi	r22, 0x2D	; 45
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	50 e0       	ldi	r21, 0x00	; 0
 424:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
      n = -n;
 428:	8b 81       	ldd	r24, Y+3	; 0x03
 42a:	9c 81       	ldd	r25, Y+4	; 0x04
 42c:	ad 81       	ldd	r26, Y+5	; 0x05
 42e:	be 81       	ldd	r27, Y+6	; 0x06
 430:	b0 95       	com	r27
 432:	a0 95       	com	r26
 434:	90 95       	com	r25
 436:	81 95       	neg	r24
 438:	9f 4f       	sbci	r25, 0xFF	; 255
 43a:	af 4f       	sbci	r26, 0xFF	; 255
 43c:	bf 4f       	sbci	r27, 0xFF	; 255
 43e:	8b 83       	std	Y+3, r24	; 0x03
 440:	9c 83       	std	Y+4, r25	; 0x04
 442:	ad 83       	std	Y+5, r26	; 0x05
 444:	be 83       	std	Y+6, r27	; 0x06
    }
    printNumber(n, 10);
 446:	2b 81       	ldd	r18, Y+3	; 0x03
 448:	3c 81       	ldd	r19, Y+4	; 0x04
 44a:	4d 81       	ldd	r20, Y+5	; 0x05
 44c:	5e 81       	ldd	r21, Y+6	; 0x06
 44e:	89 81       	ldd	r24, Y+1	; 0x01
 450:	9a 81       	ldd	r25, Y+2	; 0x02
 452:	ba 01       	movw	r22, r20
 454:	a9 01       	movw	r20, r18
 456:	2a e0       	ldi	r18, 0x0A	; 10
 458:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 45c:	00 c0       	rjmp	.+0      	; 0x45e <_ZN5Print5printEli+0xa2>
  } else {
    printNumber(n, base);
 45e:	2b 81       	ldd	r18, Y+3	; 0x03
 460:	3c 81       	ldd	r19, Y+4	; 0x04
 462:	4d 81       	ldd	r20, Y+5	; 0x05
 464:	5e 81       	ldd	r21, Y+6	; 0x06
 466:	ef 81       	ldd	r30, Y+7	; 0x07
 468:	89 81       	ldd	r24, Y+1	; 0x01
 46a:	9a 81       	ldd	r25, Y+2	; 0x02
 46c:	ba 01       	movw	r22, r20
 46e:	a9 01       	movw	r20, r18
 470:	2e 2f       	mov	r18, r30
 472:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
}
 476:	28 96       	adiw	r28, 0x08	; 8
 478:	0f b6       	in	r0, 0x3f	; 63
 47a:	f8 94       	cli
 47c:	de bf       	out	0x3e, r29	; 62
 47e:	0f be       	out	0x3f, r0	; 63
 480:	cd bf       	out	0x3d, r28	; 61
 482:	cf 91       	pop	r28
 484:	df 91       	pop	r29
 486:	08 95       	ret

00000488 <_ZN5Print5printEii>:
void Print::print(unsigned char b, int base)
{
  print((unsigned long) b, base);
}

void Print::print(int n, int base)
 488:	df 93       	push	r29
 48a:	cf 93       	push	r28
 48c:	00 d0       	rcall	.+0      	; 0x48e <_ZN5Print5printEii+0x6>
 48e:	00 d0       	rcall	.+0      	; 0x490 <_ZN5Print5printEii+0x8>
 490:	00 d0       	rcall	.+0      	; 0x492 <_ZN5Print5printEii+0xa>
 492:	cd b7       	in	r28, 0x3d	; 61
 494:	de b7       	in	r29, 0x3e	; 62
 496:	9a 83       	std	Y+2, r25	; 0x02
 498:	89 83       	std	Y+1, r24	; 0x01
 49a:	7c 83       	std	Y+4, r23	; 0x04
 49c:	6b 83       	std	Y+3, r22	; 0x03
 49e:	5e 83       	std	Y+6, r21	; 0x06
 4a0:	4d 83       	std	Y+5, r20	; 0x05
{
  print((long) n, base);
 4a2:	8b 81       	ldd	r24, Y+3	; 0x03
 4a4:	9c 81       	ldd	r25, Y+4	; 0x04
 4a6:	9c 01       	movw	r18, r24
 4a8:	44 27       	eor	r20, r20
 4aa:	37 fd       	sbrc	r19, 7
 4ac:	40 95       	com	r20
 4ae:	54 2f       	mov	r21, r20
 4b0:	89 81       	ldd	r24, Y+1	; 0x01
 4b2:	9a 81       	ldd	r25, Y+2	; 0x02
 4b4:	ed 81       	ldd	r30, Y+5	; 0x05
 4b6:	fe 81       	ldd	r31, Y+6	; 0x06
 4b8:	ba 01       	movw	r22, r20
 4ba:	a9 01       	movw	r20, r18
 4bc:	9f 01       	movw	r18, r30
 4be:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 4c2:	26 96       	adiw	r28, 0x06	; 6
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	cf 91       	pop	r28
 4d0:	df 91       	pop	r29
 4d2:	08 95       	ret

000004d4 <_ZN5Print5printEci>:
void Print::print(const char str[])
{
  write(str);
}

void Print::print(char c, int base)
 4d4:	df 93       	push	r29
 4d6:	cf 93       	push	r28
 4d8:	00 d0       	rcall	.+0      	; 0x4da <_ZN5Print5printEci+0x6>
 4da:	00 d0       	rcall	.+0      	; 0x4dc <_ZN5Print5printEci+0x8>
 4dc:	0f 92       	push	r0
 4de:	cd b7       	in	r28, 0x3d	; 61
 4e0:	de b7       	in	r29, 0x3e	; 62
 4e2:	9a 83       	std	Y+2, r25	; 0x02
 4e4:	89 83       	std	Y+1, r24	; 0x01
 4e6:	6b 83       	std	Y+3, r22	; 0x03
 4e8:	5d 83       	std	Y+5, r21	; 0x05
 4ea:	4c 83       	std	Y+4, r20	; 0x04
{
  print((long) c, base);
 4ec:	8b 81       	ldd	r24, Y+3	; 0x03
 4ee:	28 2f       	mov	r18, r24
 4f0:	30 e0       	ldi	r19, 0x00	; 0
 4f2:	40 e0       	ldi	r20, 0x00	; 0
 4f4:	50 e0       	ldi	r21, 0x00	; 0
 4f6:	89 81       	ldd	r24, Y+1	; 0x01
 4f8:	9a 81       	ldd	r25, Y+2	; 0x02
 4fa:	ec 81       	ldd	r30, Y+4	; 0x04
 4fc:	fd 81       	ldd	r31, Y+5	; 0x05
 4fe:	ba 01       	movw	r22, r20
 500:	a9 01       	movw	r20, r18
 502:	9f 01       	movw	r18, r30
 504:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 508:	0f 90       	pop	r0
 50a:	0f 90       	pop	r0
 50c:	0f 90       	pop	r0
 50e:	0f 90       	pop	r0
 510:	0f 90       	pop	r0
 512:	cf 91       	pop	r28
 514:	df 91       	pop	r29
 516:	08 95       	ret

00000518 <_ZN5Print7printlnEv>:
void Print::print(double n, int digits)
{
  printFloat(n, digits);
}

void Print::println(void)
 518:	df 93       	push	r29
 51a:	cf 93       	push	r28
 51c:	00 d0       	rcall	.+0      	; 0x51e <_ZN5Print7printlnEv+0x6>
 51e:	cd b7       	in	r28, 0x3d	; 61
 520:	de b7       	in	r29, 0x3e	; 62
 522:	9a 83       	std	Y+2, r25	; 0x02
 524:	89 83       	std	Y+1, r24	; 0x01
{
  print('\r');
 526:	89 81       	ldd	r24, Y+1	; 0x01
 528:	9a 81       	ldd	r25, Y+2	; 0x02
 52a:	6d e0       	ldi	r22, 0x0D	; 13
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	50 e0       	ldi	r21, 0x00	; 0
 530:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  print('\n');  
 534:	89 81       	ldd	r24, Y+1	; 0x01
 536:	9a 81       	ldd	r25, Y+2	; 0x02
 538:	6a e0       	ldi	r22, 0x0A	; 10
 53a:	40 e0       	ldi	r20, 0x00	; 0
 53c:	50 e0       	ldi	r21, 0x00	; 0
 53e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 542:	0f 90       	pop	r0
 544:	0f 90       	pop	r0
 546:	cf 91       	pop	r28
 548:	df 91       	pop	r29
 54a:	08 95       	ret

0000054c <_ZN5Print7printlnEmi>:
{
  print(n, base);
  println();
}

void Print::println(unsigned long n, int base)
 54c:	df 93       	push	r29
 54e:	cf 93       	push	r28
 550:	cd b7       	in	r28, 0x3d	; 61
 552:	de b7       	in	r29, 0x3e	; 62
 554:	28 97       	sbiw	r28, 0x08	; 8
 556:	0f b6       	in	r0, 0x3f	; 63
 558:	f8 94       	cli
 55a:	de bf       	out	0x3e, r29	; 62
 55c:	0f be       	out	0x3f, r0	; 63
 55e:	cd bf       	out	0x3d, r28	; 61
 560:	9a 83       	std	Y+2, r25	; 0x02
 562:	89 83       	std	Y+1, r24	; 0x01
 564:	4b 83       	std	Y+3, r20	; 0x03
 566:	5c 83       	std	Y+4, r21	; 0x04
 568:	6d 83       	std	Y+5, r22	; 0x05
 56a:	7e 83       	std	Y+6, r23	; 0x06
 56c:	38 87       	std	Y+8, r19	; 0x08
 56e:	2f 83       	std	Y+7, r18	; 0x07
{
  print(n, base);
 570:	89 81       	ldd	r24, Y+1	; 0x01
 572:	9a 81       	ldd	r25, Y+2	; 0x02
 574:	2b 81       	ldd	r18, Y+3	; 0x03
 576:	3c 81       	ldd	r19, Y+4	; 0x04
 578:	4d 81       	ldd	r20, Y+5	; 0x05
 57a:	5e 81       	ldd	r21, Y+6	; 0x06
 57c:	ef 81       	ldd	r30, Y+7	; 0x07
 57e:	f8 85       	ldd	r31, Y+8	; 0x08
 580:	ba 01       	movw	r22, r20
 582:	a9 01       	movw	r20, r18
 584:	9f 01       	movw	r18, r30
 586:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 58a:	89 81       	ldd	r24, Y+1	; 0x01
 58c:	9a 81       	ldd	r25, Y+2	; 0x02
 58e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 592:	28 96       	adiw	r28, 0x08	; 8
 594:	0f b6       	in	r0, 0x3f	; 63
 596:	f8 94       	cli
 598:	de bf       	out	0x3e, r29	; 62
 59a:	0f be       	out	0x3f, r0	; 63
 59c:	cd bf       	out	0x3d, r28	; 61
 59e:	cf 91       	pop	r28
 5a0:	df 91       	pop	r29
 5a2:	08 95       	ret

000005a4 <_ZN5Print7printlnEji>:
{
  print(n, base);
  println();
}

void Print::println(unsigned int n, int base)
 5a4:	df 93       	push	r29
 5a6:	cf 93       	push	r28
 5a8:	00 d0       	rcall	.+0      	; 0x5aa <_ZN5Print7printlnEji+0x6>
 5aa:	00 d0       	rcall	.+0      	; 0x5ac <_ZN5Print7printlnEji+0x8>
 5ac:	00 d0       	rcall	.+0      	; 0x5ae <_ZN5Print7printlnEji+0xa>
 5ae:	cd b7       	in	r28, 0x3d	; 61
 5b0:	de b7       	in	r29, 0x3e	; 62
 5b2:	9a 83       	std	Y+2, r25	; 0x02
 5b4:	89 83       	std	Y+1, r24	; 0x01
 5b6:	7c 83       	std	Y+4, r23	; 0x04
 5b8:	6b 83       	std	Y+3, r22	; 0x03
 5ba:	5e 83       	std	Y+6, r21	; 0x06
 5bc:	4d 83       	std	Y+5, r20	; 0x05
{
  print(n, base);
 5be:	89 81       	ldd	r24, Y+1	; 0x01
 5c0:	9a 81       	ldd	r25, Y+2	; 0x02
 5c2:	2b 81       	ldd	r18, Y+3	; 0x03
 5c4:	3c 81       	ldd	r19, Y+4	; 0x04
 5c6:	4d 81       	ldd	r20, Y+5	; 0x05
 5c8:	5e 81       	ldd	r21, Y+6	; 0x06
 5ca:	b9 01       	movw	r22, r18
 5cc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 5d0:	89 81       	ldd	r24, Y+1	; 0x01
 5d2:	9a 81       	ldd	r25, Y+2	; 0x02
 5d4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 5d8:	26 96       	adiw	r28, 0x06	; 6
 5da:	0f b6       	in	r0, 0x3f	; 63
 5dc:	f8 94       	cli
 5de:	de bf       	out	0x3e, r29	; 62
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	cd bf       	out	0x3d, r28	; 61
 5e4:	cf 91       	pop	r28
 5e6:	df 91       	pop	r29
 5e8:	08 95       	ret

000005ea <_ZN5Print7printlnEii>:
{
  print(b, base);
  println();
}

void Print::println(int n, int base)
 5ea:	df 93       	push	r29
 5ec:	cf 93       	push	r28
 5ee:	00 d0       	rcall	.+0      	; 0x5f0 <_ZN5Print7printlnEii+0x6>
 5f0:	00 d0       	rcall	.+0      	; 0x5f2 <_ZN5Print7printlnEii+0x8>
 5f2:	00 d0       	rcall	.+0      	; 0x5f4 <_ZN5Print7printlnEii+0xa>
 5f4:	cd b7       	in	r28, 0x3d	; 61
 5f6:	de b7       	in	r29, 0x3e	; 62
 5f8:	9a 83       	std	Y+2, r25	; 0x02
 5fa:	89 83       	std	Y+1, r24	; 0x01
 5fc:	7c 83       	std	Y+4, r23	; 0x04
 5fe:	6b 83       	std	Y+3, r22	; 0x03
 600:	5e 83       	std	Y+6, r21	; 0x06
 602:	4d 83       	std	Y+5, r20	; 0x05
{
  print(n, base);
 604:	89 81       	ldd	r24, Y+1	; 0x01
 606:	9a 81       	ldd	r25, Y+2	; 0x02
 608:	2b 81       	ldd	r18, Y+3	; 0x03
 60a:	3c 81       	ldd	r19, Y+4	; 0x04
 60c:	4d 81       	ldd	r20, Y+5	; 0x05
 60e:	5e 81       	ldd	r21, Y+6	; 0x06
 610:	b9 01       	movw	r22, r18
 612:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 616:	89 81       	ldd	r24, Y+1	; 0x01
 618:	9a 81       	ldd	r25, Y+2	; 0x02
 61a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 61e:	26 96       	adiw	r28, 0x06	; 6
 620:	0f b6       	in	r0, 0x3f	; 63
 622:	f8 94       	cli
 624:	de bf       	out	0x3e, r29	; 62
 626:	0f be       	out	0x3f, r0	; 63
 628:	cd bf       	out	0x3d, r28	; 61
 62a:	cf 91       	pop	r28
 62c:	df 91       	pop	r29
 62e:	08 95       	ret

00000630 <_ZN5Print7printlnEhi>:
{
  print(c, base);
  println();
}

void Print::println(unsigned char b, int base)
 630:	df 93       	push	r29
 632:	cf 93       	push	r28
 634:	00 d0       	rcall	.+0      	; 0x636 <_ZN5Print7printlnEhi+0x6>
 636:	00 d0       	rcall	.+0      	; 0x638 <_ZN5Print7printlnEhi+0x8>
 638:	0f 92       	push	r0
 63a:	cd b7       	in	r28, 0x3d	; 61
 63c:	de b7       	in	r29, 0x3e	; 62
 63e:	9a 83       	std	Y+2, r25	; 0x02
 640:	89 83       	std	Y+1, r24	; 0x01
 642:	6b 83       	std	Y+3, r22	; 0x03
 644:	5d 83       	std	Y+5, r21	; 0x05
 646:	4c 83       	std	Y+4, r20	; 0x04
{
  print(b, base);
 648:	89 81       	ldd	r24, Y+1	; 0x01
 64a:	9a 81       	ldd	r25, Y+2	; 0x02
 64c:	2c 81       	ldd	r18, Y+4	; 0x04
 64e:	3d 81       	ldd	r19, Y+5	; 0x05
 650:	6b 81       	ldd	r22, Y+3	; 0x03
 652:	a9 01       	movw	r20, r18
 654:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 658:	89 81       	ldd	r24, Y+1	; 0x01
 65a:	9a 81       	ldd	r25, Y+2	; 0x02
 65c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 660:	0f 90       	pop	r0
 662:	0f 90       	pop	r0
 664:	0f 90       	pop	r0
 666:	0f 90       	pop	r0
 668:	0f 90       	pop	r0
 66a:	cf 91       	pop	r28
 66c:	df 91       	pop	r29
 66e:	08 95       	ret

00000670 <_ZN5Print7printlnEPKc>:
{
  print(s);
  println();
}

void Print::println(const char c[])
 670:	df 93       	push	r29
 672:	cf 93       	push	r28
 674:	00 d0       	rcall	.+0      	; 0x676 <_ZN5Print7printlnEPKc+0x6>
 676:	00 d0       	rcall	.+0      	; 0x678 <_ZN5Print7printlnEPKc+0x8>
 678:	cd b7       	in	r28, 0x3d	; 61
 67a:	de b7       	in	r29, 0x3e	; 62
 67c:	9a 83       	std	Y+2, r25	; 0x02
 67e:	89 83       	std	Y+1, r24	; 0x01
 680:	7c 83       	std	Y+4, r23	; 0x04
 682:	6b 83       	std	Y+3, r22	; 0x03
{
  print(c);
 684:	89 81       	ldd	r24, Y+1	; 0x01
 686:	9a 81       	ldd	r25, Y+2	; 0x02
 688:	2b 81       	ldd	r18, Y+3	; 0x03
 68a:	3c 81       	ldd	r19, Y+4	; 0x04
 68c:	b9 01       	movw	r22, r18
 68e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 692:	89 81       	ldd	r24, Y+1	; 0x01
 694:	9a 81       	ldd	r25, Y+2	; 0x02
 696:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 69a:	0f 90       	pop	r0
 69c:	0f 90       	pop	r0
 69e:	0f 90       	pop	r0
 6a0:	0f 90       	pop	r0
 6a2:	cf 91       	pop	r28
 6a4:	df 91       	pop	r29
 6a6:	08 95       	ret

000006a8 <_ZN5Print7printlnEci>:

void Print::println(char c, int base)
 6a8:	df 93       	push	r29
 6aa:	cf 93       	push	r28
 6ac:	00 d0       	rcall	.+0      	; 0x6ae <_ZN5Print7printlnEci+0x6>
 6ae:	00 d0       	rcall	.+0      	; 0x6b0 <_ZN5Print7printlnEci+0x8>
 6b0:	0f 92       	push	r0
 6b2:	cd b7       	in	r28, 0x3d	; 61
 6b4:	de b7       	in	r29, 0x3e	; 62
 6b6:	9a 83       	std	Y+2, r25	; 0x02
 6b8:	89 83       	std	Y+1, r24	; 0x01
 6ba:	6b 83       	std	Y+3, r22	; 0x03
 6bc:	5d 83       	std	Y+5, r21	; 0x05
 6be:	4c 83       	std	Y+4, r20	; 0x04
{
  print(c, base);
 6c0:	89 81       	ldd	r24, Y+1	; 0x01
 6c2:	9a 81       	ldd	r25, Y+2	; 0x02
 6c4:	2c 81       	ldd	r18, Y+4	; 0x04
 6c6:	3d 81       	ldd	r19, Y+5	; 0x05
 6c8:	6b 81       	ldd	r22, Y+3	; 0x03
 6ca:	a9 01       	movw	r20, r18
 6cc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 6d0:	89 81       	ldd	r24, Y+1	; 0x01
 6d2:	9a 81       	ldd	r25, Y+2	; 0x02
 6d4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 6d8:	0f 90       	pop	r0
 6da:	0f 90       	pop	r0
 6dc:	0f 90       	pop	r0
 6de:	0f 90       	pop	r0
 6e0:	0f 90       	pop	r0
 6e2:	cf 91       	pop	r28
 6e4:	df 91       	pop	r29
 6e6:	08 95       	ret

000006e8 <_ZN5Print7printlnEli>:
{
  print(n, base);
  println();
}

void Print::println(long n, int base)
 6e8:	df 93       	push	r29
 6ea:	cf 93       	push	r28
 6ec:	cd b7       	in	r28, 0x3d	; 61
 6ee:	de b7       	in	r29, 0x3e	; 62
 6f0:	28 97       	sbiw	r28, 0x08	; 8
 6f2:	0f b6       	in	r0, 0x3f	; 63
 6f4:	f8 94       	cli
 6f6:	de bf       	out	0x3e, r29	; 62
 6f8:	0f be       	out	0x3f, r0	; 63
 6fa:	cd bf       	out	0x3d, r28	; 61
 6fc:	9a 83       	std	Y+2, r25	; 0x02
 6fe:	89 83       	std	Y+1, r24	; 0x01
 700:	4b 83       	std	Y+3, r20	; 0x03
 702:	5c 83       	std	Y+4, r21	; 0x04
 704:	6d 83       	std	Y+5, r22	; 0x05
 706:	7e 83       	std	Y+6, r23	; 0x06
 708:	38 87       	std	Y+8, r19	; 0x08
 70a:	2f 83       	std	Y+7, r18	; 0x07
{
  print(n, base);
 70c:	89 81       	ldd	r24, Y+1	; 0x01
 70e:	9a 81       	ldd	r25, Y+2	; 0x02
 710:	2b 81       	ldd	r18, Y+3	; 0x03
 712:	3c 81       	ldd	r19, Y+4	; 0x04
 714:	4d 81       	ldd	r20, Y+5	; 0x05
 716:	5e 81       	ldd	r21, Y+6	; 0x06
 718:	ef 81       	ldd	r30, Y+7	; 0x07
 71a:	f8 85       	ldd	r31, Y+8	; 0x08
 71c:	ba 01       	movw	r22, r20
 71e:	a9 01       	movw	r20, r18
 720:	9f 01       	movw	r18, r30
 722:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 726:	89 81       	ldd	r24, Y+1	; 0x01
 728:	9a 81       	ldd	r25, Y+2	; 0x02
 72a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 72e:	28 96       	adiw	r28, 0x08	; 8
 730:	0f b6       	in	r0, 0x3f	; 63
 732:	f8 94       	cli
 734:	de bf       	out	0x3e, r29	; 62
 736:	0f be       	out	0x3f, r0	; 63
 738:	cd bf       	out	0x3d, r28	; 61
 73a:	cf 91       	pop	r28
 73c:	df 91       	pop	r29
 73e:	08 95       	ret

00000740 <_ZN5Print10printFloatEdh>:
    print((char) (buf[i - 1] < 10 ?
      '0' + buf[i - 1] :
      'A' + buf[i - 1] - 10));
}

void Print::printFloat(double number, uint8_t digits) 
 740:	df 93       	push	r29
 742:	cf 93       	push	r28
 744:	cd b7       	in	r28, 0x3d	; 61
 746:	de b7       	in	r29, 0x3e	; 62
 748:	67 97       	sbiw	r28, 0x17	; 23
 74a:	0f b6       	in	r0, 0x3f	; 63
 74c:	f8 94       	cli
 74e:	de bf       	out	0x3e, r29	; 62
 750:	0f be       	out	0x3f, r0	; 63
 752:	cd bf       	out	0x3d, r28	; 61
 754:	99 8b       	std	Y+17, r25	; 0x11
 756:	88 8b       	std	Y+16, r24	; 0x10
 758:	4a 8b       	std	Y+18, r20	; 0x12
 75a:	5b 8b       	std	Y+19, r21	; 0x13
 75c:	6c 8b       	std	Y+20, r22	; 0x14
 75e:	7d 8b       	std	Y+21, r23	; 0x15
 760:	2e 8b       	std	Y+22, r18	; 0x16
{ 
  // Handle negative numbers
  if (number < 0.0)
 762:	6a 89       	ldd	r22, Y+18	; 0x12
 764:	7b 89       	ldd	r23, Y+19	; 0x13
 766:	8c 89       	ldd	r24, Y+20	; 0x14
 768:	9d 89       	ldd	r25, Y+21	; 0x15
 76a:	20 e0       	ldi	r18, 0x00	; 0
 76c:	30 e0       	ldi	r19, 0x00	; 0
 76e:	40 e0       	ldi	r20, 0x00	; 0
 770:	50 e0       	ldi	r21, 0x00	; 0
 772:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 776:	88 23       	and	r24, r24
 778:	04 f4       	brge	.+0      	; 0x77a <_ZN5Print10printFloatEdh+0x3a>
  {
     print('-');
 77a:	88 89       	ldd	r24, Y+16	; 0x10
 77c:	99 89       	ldd	r25, Y+17	; 0x11
 77e:	6d e2       	ldi	r22, 0x2D	; 45
 780:	40 e0       	ldi	r20, 0x00	; 0
 782:	50 e0       	ldi	r21, 0x00	; 0
 784:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     number = -number;
 788:	8a 89       	ldd	r24, Y+18	; 0x12
 78a:	9b 89       	ldd	r25, Y+19	; 0x13
 78c:	ac 89       	ldd	r26, Y+20	; 0x14
 78e:	bd 89       	ldd	r27, Y+21	; 0x15
 790:	b0 58       	subi	r27, 0x80	; 128
 792:	8a 8b       	std	Y+18, r24	; 0x12
 794:	9b 8b       	std	Y+19, r25	; 0x13
 796:	ac 8b       	std	Y+20, r26	; 0x14
 798:	bd 8b       	std	Y+21, r27	; 0x15
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 79a:	80 e0       	ldi	r24, 0x00	; 0
 79c:	90 e0       	ldi	r25, 0x00	; 0
 79e:	a0 e0       	ldi	r26, 0x00	; 0
 7a0:	bf e3       	ldi	r27, 0x3F	; 63
 7a2:	8c 87       	std	Y+12, r24	; 0x0c
 7a4:	9d 87       	std	Y+13, r25	; 0x0d
 7a6:	ae 87       	std	Y+14, r26	; 0x0e
 7a8:	bf 87       	std	Y+15, r27	; 0x0f
  for (uint8_t i=0; i<digits; ++i)
 7aa:	1b 82       	std	Y+3, r1	; 0x03
 7ac:	00 c0       	rjmp	.+0      	; 0x7ae <_ZN5Print10printFloatEdh+0x6e>
    rounding /= 10.0;
 7ae:	6c 85       	ldd	r22, Y+12	; 0x0c
 7b0:	7d 85       	ldd	r23, Y+13	; 0x0d
 7b2:	8e 85       	ldd	r24, Y+14	; 0x0e
 7b4:	9f 85       	ldd	r25, Y+15	; 0x0f
 7b6:	20 e0       	ldi	r18, 0x00	; 0
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	40 e2       	ldi	r20, 0x20	; 32
 7bc:	51 e4       	ldi	r21, 0x41	; 65
 7be:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7c2:	dc 01       	movw	r26, r24
 7c4:	cb 01       	movw	r24, r22
 7c6:	8c 87       	std	Y+12, r24	; 0x0c
 7c8:	9d 87       	std	Y+13, r25	; 0x0d
 7ca:	ae 87       	std	Y+14, r26	; 0x0e
 7cc:	bf 87       	std	Y+15, r27	; 0x0f
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
 7ce:	8b 81       	ldd	r24, Y+3	; 0x03
 7d0:	8f 5f       	subi	r24, 0xFF	; 255
 7d2:	8b 83       	std	Y+3, r24	; 0x03
 7d4:	9b 81       	ldd	r25, Y+3	; 0x03
 7d6:	8e 89       	ldd	r24, Y+22	; 0x16
 7d8:	98 17       	cp	r25, r24
 7da:	00 f0       	brcs	.+0      	; 0x7dc <_ZN5Print10printFloatEdh+0x9c>
    rounding /= 10.0;
  
  number += rounding;
 7dc:	6a 89       	ldd	r22, Y+18	; 0x12
 7de:	7b 89       	ldd	r23, Y+19	; 0x13
 7e0:	8c 89       	ldd	r24, Y+20	; 0x14
 7e2:	9d 89       	ldd	r25, Y+21	; 0x15
 7e4:	2c 85       	ldd	r18, Y+12	; 0x0c
 7e6:	3d 85       	ldd	r19, Y+13	; 0x0d
 7e8:	4e 85       	ldd	r20, Y+14	; 0x0e
 7ea:	5f 85       	ldd	r21, Y+15	; 0x0f
 7ec:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 7f0:	dc 01       	movw	r26, r24
 7f2:	cb 01       	movw	r24, r22
 7f4:	8a 8b       	std	Y+18, r24	; 0x12
 7f6:	9b 8b       	std	Y+19, r25	; 0x13
 7f8:	ac 8b       	std	Y+20, r26	; 0x14
 7fa:	bd 8b       	std	Y+21, r27	; 0x15

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 7fc:	6a 89       	ldd	r22, Y+18	; 0x12
 7fe:	7b 89       	ldd	r23, Y+19	; 0x13
 800:	8c 89       	ldd	r24, Y+20	; 0x14
 802:	9d 89       	ldd	r25, Y+21	; 0x15
 804:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 808:	dc 01       	movw	r26, r24
 80a:	cb 01       	movw	r24, r22
 80c:	88 87       	std	Y+8, r24	; 0x08
 80e:	99 87       	std	Y+9, r25	; 0x09
 810:	aa 87       	std	Y+10, r26	; 0x0a
 812:	bb 87       	std	Y+11, r27	; 0x0b
  double remainder = number - (double)int_part;
 814:	68 85       	ldd	r22, Y+8	; 0x08
 816:	79 85       	ldd	r23, Y+9	; 0x09
 818:	8a 85       	ldd	r24, Y+10	; 0x0a
 81a:	9b 85       	ldd	r25, Y+11	; 0x0b
 81c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 820:	9b 01       	movw	r18, r22
 822:	ac 01       	movw	r20, r24
 824:	6a 89       	ldd	r22, Y+18	; 0x12
 826:	7b 89       	ldd	r23, Y+19	; 0x13
 828:	8c 89       	ldd	r24, Y+20	; 0x14
 82a:	9d 89       	ldd	r25, Y+21	; 0x15
 82c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 830:	dc 01       	movw	r26, r24
 832:	cb 01       	movw	r24, r22
 834:	8c 83       	std	Y+4, r24	; 0x04
 836:	9d 83       	std	Y+5, r25	; 0x05
 838:	ae 83       	std	Y+6, r26	; 0x06
 83a:	bf 83       	std	Y+7, r27	; 0x07
  print(int_part);
 83c:	88 89       	ldd	r24, Y+16	; 0x10
 83e:	99 89       	ldd	r25, Y+17	; 0x11
 840:	28 85       	ldd	r18, Y+8	; 0x08
 842:	39 85       	ldd	r19, Y+9	; 0x09
 844:	4a 85       	ldd	r20, Y+10	; 0x0a
 846:	5b 85       	ldd	r21, Y+11	; 0x0b
 848:	ba 01       	movw	r22, r20
 84a:	a9 01       	movw	r20, r18
 84c:	2a e0       	ldi	r18, 0x0A	; 10
 84e:	30 e0       	ldi	r19, 0x00	; 0
 850:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
 854:	8e 89       	ldd	r24, Y+22	; 0x16
 856:	88 23       	and	r24, r24
 858:	01 f4       	brne	.+0      	; 0x85a <_ZN5Print10printFloatEdh+0x11a>
 85a:	00 c0       	rjmp	.+0      	; 0x85c <_ZN5Print10printFloatEdh+0x11c>
    print("."); 
 85c:	88 89       	ldd	r24, Y+16	; 0x10
 85e:	99 89       	ldd	r25, Y+17	; 0x11
 860:	20 e0       	ldi	r18, 0x00	; 0
 862:	30 e0       	ldi	r19, 0x00	; 0
 864:	b9 01       	movw	r22, r18
 866:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 86a:	00 c0       	rjmp	.+0      	; 0x86c <_ZN5Print10printFloatEdh+0x12c>

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 86c:	6c 81       	ldd	r22, Y+4	; 0x04
 86e:	7d 81       	ldd	r23, Y+5	; 0x05
 870:	8e 81       	ldd	r24, Y+6	; 0x06
 872:	9f 81       	ldd	r25, Y+7	; 0x07
 874:	20 e0       	ldi	r18, 0x00	; 0
 876:	30 e0       	ldi	r19, 0x00	; 0
 878:	40 e2       	ldi	r20, 0x20	; 32
 87a:	51 e4       	ldi	r21, 0x41	; 65
 87c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 880:	dc 01       	movw	r26, r24
 882:	cb 01       	movw	r24, r22
 884:	8c 83       	std	Y+4, r24	; 0x04
 886:	9d 83       	std	Y+5, r25	; 0x05
 888:	ae 83       	std	Y+6, r26	; 0x06
 88a:	bf 83       	std	Y+7, r27	; 0x07
    int toPrint = int(remainder);
 88c:	6c 81       	ldd	r22, Y+4	; 0x04
 88e:	7d 81       	ldd	r23, Y+5	; 0x05
 890:	8e 81       	ldd	r24, Y+6	; 0x06
 892:	9f 81       	ldd	r25, Y+7	; 0x07
 894:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 898:	dc 01       	movw	r26, r24
 89a:	cb 01       	movw	r24, r22
 89c:	9a 83       	std	Y+2, r25	; 0x02
 89e:	89 83       	std	Y+1, r24	; 0x01
    print(toPrint);
 8a0:	88 89       	ldd	r24, Y+16	; 0x10
 8a2:	99 89       	ldd	r25, Y+17	; 0x11
 8a4:	29 81       	ldd	r18, Y+1	; 0x01
 8a6:	3a 81       	ldd	r19, Y+2	; 0x02
 8a8:	b9 01       	movw	r22, r18
 8aa:	4a e0       	ldi	r20, 0x0A	; 10
 8ac:	50 e0       	ldi	r21, 0x00	; 0
 8ae:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    remainder -= toPrint; 
 8b2:	89 81       	ldd	r24, Y+1	; 0x01
 8b4:	9a 81       	ldd	r25, Y+2	; 0x02
 8b6:	aa 27       	eor	r26, r26
 8b8:	97 fd       	sbrc	r25, 7
 8ba:	a0 95       	com	r26
 8bc:	ba 2f       	mov	r27, r26
 8be:	bc 01       	movw	r22, r24
 8c0:	cd 01       	movw	r24, r26
 8c2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 8c6:	9b 01       	movw	r18, r22
 8c8:	ac 01       	movw	r20, r24
 8ca:	6c 81       	ldd	r22, Y+4	; 0x04
 8cc:	7d 81       	ldd	r23, Y+5	; 0x05
 8ce:	8e 81       	ldd	r24, Y+6	; 0x06
 8d0:	9f 81       	ldd	r25, Y+7	; 0x07
 8d2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 8d6:	dc 01       	movw	r26, r24
 8d8:	cb 01       	movw	r24, r22
 8da:	8c 83       	std	Y+4, r24	; 0x04
 8dc:	9d 83       	std	Y+5, r25	; 0x05
 8de:	ae 83       	std	Y+6, r26	; 0x06
 8e0:	bf 83       	std	Y+7, r27	; 0x07
  // Print the decimal point, but only if there are digits beyond
  if (digits > 0)
    print("."); 

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8e2:	8e 89       	ldd	r24, Y+22	; 0x16
 8e4:	8f 8b       	std	Y+23, r24	; 0x17
 8e6:	8f 89       	ldd	r24, Y+23	; 0x17
 8e8:	88 23       	and	r24, r24
 8ea:	01 f0       	breq	.+0      	; 0x8ec <_ZN5Print10printFloatEdh+0x1ac>
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	8f 8b       	std	Y+23, r24	; 0x17
 8f0:	8f 89       	ldd	r24, Y+23	; 0x17
 8f2:	9e 89       	ldd	r25, Y+22	; 0x16
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	9e 8b       	std	Y+22, r25	; 0x16
 8f8:	88 23       	and	r24, r24
 8fa:	01 f0       	breq	.+0      	; 0x8fc <_ZN5Print10printFloatEdh+0x1bc>
 8fc:	00 c0       	rjmp	.+0      	; 0x8fe <_ZN5Print10printFloatEdh+0x1be>
    remainder *= 10.0;
    int toPrint = int(remainder);
    print(toPrint);
    remainder -= toPrint; 
  } 
}
 8fe:	67 96       	adiw	r28, 0x17	; 23
 900:	0f b6       	in	r0, 0x3f	; 63
 902:	f8 94       	cli
 904:	de bf       	out	0x3e, r29	; 62
 906:	0f be       	out	0x3f, r0	; 63
 908:	cd bf       	out	0x3d, r28	; 61
 90a:	cf 91       	pop	r28
 90c:	df 91       	pop	r29
 90e:	08 95       	ret

00000910 <_ZN5Print5printEdi>:
{
  if (base == 0) write(n);
  else printNumber(n, base);
}

void Print::print(double n, int digits)
 910:	df 93       	push	r29
 912:	cf 93       	push	r28
 914:	cd b7       	in	r28, 0x3d	; 61
 916:	de b7       	in	r29, 0x3e	; 62
 918:	28 97       	sbiw	r28, 0x08	; 8
 91a:	0f b6       	in	r0, 0x3f	; 63
 91c:	f8 94       	cli
 91e:	de bf       	out	0x3e, r29	; 62
 920:	0f be       	out	0x3f, r0	; 63
 922:	cd bf       	out	0x3d, r28	; 61
 924:	9a 83       	std	Y+2, r25	; 0x02
 926:	89 83       	std	Y+1, r24	; 0x01
 928:	4b 83       	std	Y+3, r20	; 0x03
 92a:	5c 83       	std	Y+4, r21	; 0x04
 92c:	6d 83       	std	Y+5, r22	; 0x05
 92e:	7e 83       	std	Y+6, r23	; 0x06
 930:	38 87       	std	Y+8, r19	; 0x08
 932:	2f 83       	std	Y+7, r18	; 0x07
{
  printFloat(n, digits);
 934:	ef 81       	ldd	r30, Y+7	; 0x07
 936:	89 81       	ldd	r24, Y+1	; 0x01
 938:	9a 81       	ldd	r25, Y+2	; 0x02
 93a:	2b 81       	ldd	r18, Y+3	; 0x03
 93c:	3c 81       	ldd	r19, Y+4	; 0x04
 93e:	4d 81       	ldd	r20, Y+5	; 0x05
 940:	5e 81       	ldd	r21, Y+6	; 0x06
 942:	ba 01       	movw	r22, r20
 944:	a9 01       	movw	r20, r18
 946:	2e 2f       	mov	r18, r30
 948:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 94c:	28 96       	adiw	r28, 0x08	; 8
 94e:	0f b6       	in	r0, 0x3f	; 63
 950:	f8 94       	cli
 952:	de bf       	out	0x3e, r29	; 62
 954:	0f be       	out	0x3f, r0	; 63
 956:	cd bf       	out	0x3d, r28	; 61
 958:	cf 91       	pop	r28
 95a:	df 91       	pop	r29
 95c:	08 95       	ret

0000095e <_ZN5Print7printlnEdi>:
{
  print(n, base);
  println();
}

void Print::println(double n, int digits)
 95e:	df 93       	push	r29
 960:	cf 93       	push	r28
 962:	cd b7       	in	r28, 0x3d	; 61
 964:	de b7       	in	r29, 0x3e	; 62
 966:	28 97       	sbiw	r28, 0x08	; 8
 968:	0f b6       	in	r0, 0x3f	; 63
 96a:	f8 94       	cli
 96c:	de bf       	out	0x3e, r29	; 62
 96e:	0f be       	out	0x3f, r0	; 63
 970:	cd bf       	out	0x3d, r28	; 61
 972:	9a 83       	std	Y+2, r25	; 0x02
 974:	89 83       	std	Y+1, r24	; 0x01
 976:	4b 83       	std	Y+3, r20	; 0x03
 978:	5c 83       	std	Y+4, r21	; 0x04
 97a:	6d 83       	std	Y+5, r22	; 0x05
 97c:	7e 83       	std	Y+6, r23	; 0x06
 97e:	38 87       	std	Y+8, r19	; 0x08
 980:	2f 83       	std	Y+7, r18	; 0x07
{
  print(n, digits);
 982:	89 81       	ldd	r24, Y+1	; 0x01
 984:	9a 81       	ldd	r25, Y+2	; 0x02
 986:	2b 81       	ldd	r18, Y+3	; 0x03
 988:	3c 81       	ldd	r19, Y+4	; 0x04
 98a:	4d 81       	ldd	r20, Y+5	; 0x05
 98c:	5e 81       	ldd	r21, Y+6	; 0x06
 98e:	ef 81       	ldd	r30, Y+7	; 0x07
 990:	f8 85       	ldd	r31, Y+8	; 0x08
 992:	ba 01       	movw	r22, r20
 994:	a9 01       	movw	r20, r18
 996:	9f 01       	movw	r18, r30
 998:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 99c:	89 81       	ldd	r24, Y+1	; 0x01
 99e:	9a 81       	ldd	r25, Y+2	; 0x02
 9a0:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 9a4:	28 96       	adiw	r28, 0x08	; 8
 9a6:	0f b6       	in	r0, 0x3f	; 63
 9a8:	f8 94       	cli
 9aa:	de bf       	out	0x3e, r29	; 62
 9ac:	0f be       	out	0x3f, r0	; 63
 9ae:	cd bf       	out	0x3d, r28	; 61
 9b0:	cf 91       	pop	r28
 9b2:	df 91       	pop	r29
 9b4:	08 95       	ret

000009b6 <_ZN5Print5printERK6String>:
{
  while (size--)
    write(*buffer++);
}

void Print::print(const String &s)
 9b6:	0f 93       	push	r16
 9b8:	1f 93       	push	r17
 9ba:	df 93       	push	r29
 9bc:	cf 93       	push	r28
 9be:	cd b7       	in	r28, 0x3d	; 61
 9c0:	de b7       	in	r29, 0x3e	; 62
 9c2:	27 97       	sbiw	r28, 0x07	; 7
 9c4:	0f b6       	in	r0, 0x3f	; 63
 9c6:	f8 94       	cli
 9c8:	de bf       	out	0x3e, r29	; 62
 9ca:	0f be       	out	0x3f, r0	; 63
 9cc:	cd bf       	out	0x3d, r28	; 61
 9ce:	9c 83       	std	Y+4, r25	; 0x04
 9d0:	8b 83       	std	Y+3, r24	; 0x03
 9d2:	7e 83       	std	Y+6, r23	; 0x06
 9d4:	6d 83       	std	Y+5, r22	; 0x05
{
  for (int i = 0; i < s.length(); i++) {
 9d6:	1a 82       	std	Y+2, r1	; 0x02
 9d8:	19 82       	std	Y+1, r1	; 0x01
 9da:	00 c0       	rjmp	.+0      	; 0x9dc <_ZN5Print5printERK6String+0x26>
    write(s[i]);
 9dc:	eb 81       	ldd	r30, Y+3	; 0x03
 9de:	fc 81       	ldd	r31, Y+4	; 0x04
 9e0:	01 90       	ld	r0, Z+
 9e2:	f0 81       	ld	r31, Z
 9e4:	e0 2d       	mov	r30, r0
 9e6:	00 81       	ld	r16, Z
 9e8:	11 81       	ldd	r17, Z+1	; 0x01
 9ea:	29 81       	ldd	r18, Y+1	; 0x01
 9ec:	3a 81       	ldd	r19, Y+2	; 0x02
 9ee:	8d 81       	ldd	r24, Y+5	; 0x05
 9f0:	9e 81       	ldd	r25, Y+6	; 0x06
 9f2:	b9 01       	movw	r22, r18
 9f4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 9f8:	28 2f       	mov	r18, r24
 9fa:	8b 81       	ldd	r24, Y+3	; 0x03
 9fc:	9c 81       	ldd	r25, Y+4	; 0x04
 9fe:	62 2f       	mov	r22, r18
 a00:	f8 01       	movw	r30, r16
 a02:	09 95       	icall
    write(*buffer++);
}

void Print::print(const String &s)
{
  for (int i = 0; i < s.length(); i++) {
 a04:	89 81       	ldd	r24, Y+1	; 0x01
 a06:	9a 81       	ldd	r25, Y+2	; 0x02
 a08:	01 96       	adiw	r24, 0x01	; 1
 a0a:	9a 83       	std	Y+2, r25	; 0x02
 a0c:	89 83       	std	Y+1, r24	; 0x01
 a0e:	09 81       	ldd	r16, Y+1	; 0x01
 a10:	1a 81       	ldd	r17, Y+2	; 0x02
 a12:	8d 81       	ldd	r24, Y+5	; 0x05
 a14:	9e 81       	ldd	r25, Y+6	; 0x06
 a16:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
 a1a:	1f 82       	std	Y+7, r1	; 0x07
 a1c:	08 17       	cp	r16, r24
 a1e:	19 07       	cpc	r17, r25
 a20:	00 f4       	brcc	.+0      	; 0xa22 <_ZN5Print5printERK6String+0x6c>
 a22:	81 e0       	ldi	r24, 0x01	; 1
 a24:	8f 83       	std	Y+7, r24	; 0x07
 a26:	8f 81       	ldd	r24, Y+7	; 0x07
 a28:	88 23       	and	r24, r24
 a2a:	01 f4       	brne	.+0      	; 0xa2c <_ZN5Print5printERK6String+0x76>
    write(s[i]);
  }
}
 a2c:	27 96       	adiw	r28, 0x07	; 7
 a2e:	0f b6       	in	r0, 0x3f	; 63
 a30:	f8 94       	cli
 a32:	de bf       	out	0x3e, r29	; 62
 a34:	0f be       	out	0x3f, r0	; 63
 a36:	cd bf       	out	0x3d, r28	; 61
 a38:	cf 91       	pop	r28
 a3a:	df 91       	pop	r29
 a3c:	1f 91       	pop	r17
 a3e:	0f 91       	pop	r16
 a40:	08 95       	ret

00000a42 <_ZN5Print7printlnERK6String>:
{
  print('\r');
  print('\n');  
}

void Print::println(const String &s)
 a42:	df 93       	push	r29
 a44:	cf 93       	push	r28
 a46:	00 d0       	rcall	.+0      	; 0xa48 <_ZN5Print7printlnERK6String+0x6>
 a48:	00 d0       	rcall	.+0      	; 0xa4a <_ZN5Print7printlnERK6String+0x8>
 a4a:	cd b7       	in	r28, 0x3d	; 61
 a4c:	de b7       	in	r29, 0x3e	; 62
 a4e:	9a 83       	std	Y+2, r25	; 0x02
 a50:	89 83       	std	Y+1, r24	; 0x01
 a52:	7c 83       	std	Y+4, r23	; 0x04
 a54:	6b 83       	std	Y+3, r22	; 0x03
{
  print(s);
 a56:	89 81       	ldd	r24, Y+1	; 0x01
 a58:	9a 81       	ldd	r25, Y+2	; 0x02
 a5a:	2b 81       	ldd	r18, Y+3	; 0x03
 a5c:	3c 81       	ldd	r19, Y+4	; 0x04
 a5e:	b9 01       	movw	r22, r18
 a60:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  println();
 a64:	89 81       	ldd	r24, Y+1	; 0x01
 a66:	9a 81       	ldd	r25, Y+2	; 0x02
 a68:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
 a6c:	0f 90       	pop	r0
 a6e:	0f 90       	pop	r0
 a70:	0f 90       	pop	r0
 a72:	0f 90       	pop	r0
 a74:	cf 91       	pop	r28
 a76:	df 91       	pop	r29
 a78:	08 95       	ret

Tone.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000090e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00000942  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00000000  00000000  00000943  2**0
                  ALLOC
  3 .stab         00000dbc  00000000  00000000  00000944  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000d99  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 00000001  00000000  00000000  00002499  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

Disassembly of section .text:

00000000 <_ZL9toneBeginh>:

#endif



static int8_t toneBegin(uint8_t _pin)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ad 97       	sbiw	r28, 0x2d	; 45
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a a7       	std	Y+42, r24	; 0x2a
{
  int8_t _timer = -1;
  16:	8f ef       	ldi	r24, 0xFF	; 255
  18:	89 a7       	std	Y+41, r24	; 0x29

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  1a:	18 a6       	std	Y+40, r1	; 0x28
  1c:	1f a2       	std	Y+39, r1	; 0x27
  1e:	00 c0       	rjmp	.+0      	; 0x20 <_ZL9toneBeginh+0x20>
    if (tone_pins[i] == _pin) {
  20:	8f a1       	ldd	r24, Y+39	; 0x27
  22:	98 a5       	ldd	r25, Y+40	; 0x28
  24:	fc 01       	movw	r30, r24
  26:	e0 50       	subi	r30, 0x00	; 0
  28:	f0 40       	sbci	r31, 0x00	; 0
  2a:	90 81       	ld	r25, Z
  2c:	8a a5       	ldd	r24, Y+42	; 0x2a
  2e:	98 17       	cp	r25, r24
  30:	01 f4       	brne	.+0      	; 0x32 <_ZL9toneBeginh+0x32>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
  32:	8f a1       	ldd	r24, Y+39	; 0x27
  34:	98 a5       	ldd	r25, Y+40	; 0x28
  36:	80 50       	subi	r24, 0x00	; 0
  38:	90 40       	sbci	r25, 0x00	; 0
  3a:	9e a3       	std	Y+38, r25	; 0x26
  3c:	8d a3       	std	Y+37, r24	; 0x25
  3e:	ed a1       	ldd	r30, Y+37	; 0x25
  40:	fe a1       	ldd	r31, Y+38	; 0x26
  42:	84 91       	lpm	r24, Z+
  44:	8c a3       	std	Y+36, r24	; 0x24
  46:	8c a1       	ldd	r24, Y+36	; 0x24
  48:	8d a7       	std	Y+45, r24	; 0x2d
  4a:	00 c0       	rjmp	.+0      	; 0x4c <_ZL9toneBeginh+0x4c>
static int8_t toneBegin(uint8_t _pin)
{
  int8_t _timer = -1;

  // if we're already using the pin, the timer should be configured.  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  4c:	8f a1       	ldd	r24, Y+39	; 0x27
  4e:	98 a5       	ldd	r25, Y+40	; 0x28
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	98 a7       	std	Y+40, r25	; 0x28
  54:	8f a3       	std	Y+39, r24	; 0x27
  56:	8f a1       	ldd	r24, Y+39	; 0x27
  58:	98 a5       	ldd	r25, Y+40	; 0x28
  5a:	18 16       	cp	r1, r24
  5c:	19 06       	cpc	r1, r25
  5e:	04 f4       	brge	.+0      	; 0x60 <_ZL9toneBeginh+0x60>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  60:	1b a2       	std	Y+35, r1	; 0x23
  62:	1a a2       	std	Y+34, r1	; 0x22
  64:	00 c0       	rjmp	.+0      	; 0x66 <_ZL9toneBeginh+0x66>
    if (tone_pins[i] == 255) {
  66:	8a a1       	ldd	r24, Y+34	; 0x22
  68:	9b a1       	ldd	r25, Y+35	; 0x23
  6a:	fc 01       	movw	r30, r24
  6c:	e0 50       	subi	r30, 0x00	; 0
  6e:	f0 40       	sbci	r31, 0x00	; 0
  70:	80 81       	ld	r24, Z
  72:	8f 3f       	cpi	r24, 0xFF	; 255
  74:	01 f4       	brne	.+0      	; 0x76 <_ZL9toneBeginh+0x76>
      tone_pins[i] = _pin;
  76:	8a a1       	ldd	r24, Y+34	; 0x22
  78:	9b a1       	ldd	r25, Y+35	; 0x23
  7a:	fc 01       	movw	r30, r24
  7c:	e0 50       	subi	r30, 0x00	; 0
  7e:	f0 40       	sbci	r31, 0x00	; 0
  80:	8a a5       	ldd	r24, Y+42	; 0x2a
  82:	80 83       	st	Z, r24
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
  84:	8a a1       	ldd	r24, Y+34	; 0x22
  86:	9b a1       	ldd	r25, Y+35	; 0x23
  88:	80 50       	subi	r24, 0x00	; 0
  8a:	90 40       	sbci	r25, 0x00	; 0
  8c:	99 a3       	std	Y+33, r25	; 0x21
  8e:	88 a3       	std	Y+32, r24	; 0x20
  90:	e8 a1       	ldd	r30, Y+32	; 0x20
  92:	f9 a1       	ldd	r31, Y+33	; 0x21
  94:	84 91       	lpm	r24, Z+
  96:	8f 8f       	std	Y+31, r24	; 0x1f
  98:	8f 8d       	ldd	r24, Y+31	; 0x1f
  9a:	89 a7       	std	Y+41, r24	; 0x29
  9c:	00 c0       	rjmp	.+0      	; 0x9e <_ZL9toneBeginh+0x9e>
      return pgm_read_byte(tone_pin_to_timer_PGM + i);
    }
  }
  
  // search for an unused timer.
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
  9e:	8a a1       	ldd	r24, Y+34	; 0x22
  a0:	9b a1       	ldd	r25, Y+35	; 0x23
  a2:	01 96       	adiw	r24, 0x01	; 1
  a4:	9b a3       	std	Y+35, r25	; 0x23
  a6:	8a a3       	std	Y+34, r24	; 0x22
  a8:	8a a1       	ldd	r24, Y+34	; 0x22
  aa:	9b a1       	ldd	r25, Y+35	; 0x23
  ac:	18 16       	cp	r1, r24
  ae:	19 06       	cpc	r1, r25
  b0:	04 f4       	brge	.+0      	; 0xb2 <_ZL9toneBeginh+0xb2>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      break;
    }
  }
  
  if (_timer != -1)
  b2:	89 a5       	ldd	r24, Y+41	; 0x29
  b4:	8f 3f       	cpi	r24, 0xFF	; 255
  b6:	01 f4       	brne	.+0      	; 0xb8 <_ZL9toneBeginh+0xb8>
  b8:	00 c0       	rjmp	.+0      	; 0xba <_ZL9toneBeginh+0xba>
  {
    // Set timer specific stuff
    // All timers in CTC mode
    // 8 bit timers will require changing prescalar values,
    // whereas 16 bit timers are set to either ck/1 or ck/64 prescalar
    switch (_timer)
  ba:	89 a5       	ldd	r24, Y+41	; 0x29
  bc:	28 2f       	mov	r18, r24
  be:	33 27       	eor	r19, r19
  c0:	27 fd       	sbrc	r18, 7
  c2:	30 95       	com	r19
  c4:	3c a7       	std	Y+44, r19	; 0x2c
  c6:	2b a7       	std	Y+43, r18	; 0x2b
  c8:	8b a5       	ldd	r24, Y+43	; 0x2b
  ca:	9c a5       	ldd	r25, Y+44	; 0x2c
  cc:	81 30       	cpi	r24, 0x01	; 1
  ce:	91 05       	cpc	r25, r1
  d0:	01 f4       	brne	.+0      	; 0xd2 <_ZL9toneBeginh+0xd2>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <_ZL9toneBeginh+0xd4>
  d4:	2b a5       	ldd	r18, Y+43	; 0x2b
  d6:	3c a5       	ldd	r19, Y+44	; 0x2c
  d8:	22 30       	cpi	r18, 0x02	; 2
  da:	31 05       	cpc	r19, r1
  dc:	01 f4       	brne	.+0      	; 0xde <_ZL9toneBeginh+0xde>
  de:	00 c0       	rjmp	.+0      	; 0xe0 <_ZL9toneBeginh+0xe0>
  e0:	8b a5       	ldd	r24, Y+43	; 0x2b
  e2:	9c a5       	ldd	r25, Y+44	; 0x2c
  e4:	00 97       	sbiw	r24, 0x00	; 0
  e6:	01 f0       	breq	.+0      	; 0xe8 <_ZL9toneBeginh+0xe8>
  e8:	00 c0       	rjmp	.+0      	; 0xea <_ZL9toneBeginh+0xea>
    {
#if !defined(__AVR_ATmega8__)
      case 0:
        // 8 bit timer
        TCCR0A = 0;
  ea:	e4 e4       	ldi	r30, 0x44	; 68
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	10 82       	st	Z, r1
        TCCR0B = 0;
  f0:	e5 e4       	ldi	r30, 0x45	; 69
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	10 82       	st	Z, r1
        bitWrite(TCCR0A, WGM01, 1);
  f6:	a4 e4       	ldi	r26, 0x44	; 68
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	e4 e4       	ldi	r30, 0x44	; 68
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	80 81       	ld	r24, Z
 100:	82 60       	ori	r24, 0x02	; 2
 102:	8c 93       	st	X, r24
        bitWrite(TCCR0B, CS00, 1);
 104:	a5 e4       	ldi	r26, 0x45	; 69
 106:	b0 e0       	ldi	r27, 0x00	; 0
 108:	e5 e4       	ldi	r30, 0x45	; 69
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	80 81       	ld	r24, Z
 10e:	81 60       	ori	r24, 0x01	; 1
 110:	8c 93       	st	X, r24
        timer0_pin_port = portOutputRegister(digitalPinToPort(_pin));
 112:	8a a5       	ldd	r24, Y+42	; 0x2a
 114:	88 2f       	mov	r24, r24
 116:	90 e0       	ldi	r25, 0x00	; 0
 118:	80 50       	subi	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	9a 8f       	std	Y+26, r25	; 0x1a
 11e:	89 8f       	std	Y+25, r24	; 0x19
 120:	e9 8d       	ldd	r30, Y+25	; 0x19
 122:	fa 8d       	ldd	r31, Y+26	; 0x1a
 124:	84 91       	lpm	r24, Z+
 126:	88 8f       	std	Y+24, r24	; 0x18
 128:	88 8d       	ldd	r24, Y+24	; 0x18
 12a:	88 2f       	mov	r24, r24
 12c:	90 e0       	ldi	r25, 0x00	; 0
 12e:	88 0f       	add	r24, r24
 130:	99 1f       	adc	r25, r25
 132:	80 50       	subi	r24, 0x00	; 0
 134:	90 40       	sbci	r25, 0x00	; 0
 136:	9e 8f       	std	Y+30, r25	; 0x1e
 138:	8d 8f       	std	Y+29, r24	; 0x1d
 13a:	8d 8d       	ldd	r24, Y+29	; 0x1d
 13c:	9e 8d       	ldd	r25, Y+30	; 0x1e
 13e:	fc 01       	movw	r30, r24
 140:	85 91       	lpm	r24, Z+
 142:	94 91       	lpm	r25, Z+
 144:	9c 8f       	std	Y+28, r25	; 0x1c
 146:	8b 8f       	std	Y+27, r24	; 0x1b
 148:	fe 8f       	std	Y+30, r31	; 0x1e
 14a:	ed 8f       	std	Y+29, r30	; 0x1d
 14c:	8b 8d       	ldd	r24, Y+27	; 0x1b
 14e:	9c 8d       	ldd	r25, Y+28	; 0x1c
 150:	90 93 00 00 	sts	0x0000, r25
 154:	80 93 00 00 	sts	0x0000, r24
        timer0_pin_mask = digitalPinToBitMask(_pin);
 158:	8a a5       	ldd	r24, Y+42	; 0x2a
 15a:	88 2f       	mov	r24, r24
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	80 50       	subi	r24, 0x00	; 0
 160:	90 40       	sbci	r25, 0x00	; 0
 162:	9f 8b       	std	Y+23, r25	; 0x17
 164:	8e 8b       	std	Y+22, r24	; 0x16
 166:	ee 89       	ldd	r30, Y+22	; 0x16
 168:	ff 89       	ldd	r31, Y+23	; 0x17
 16a:	84 91       	lpm	r24, Z+
 16c:	8d 8b       	std	Y+21, r24	; 0x15
 16e:	8d 89       	ldd	r24, Y+21	; 0x15
 170:	80 93 00 00 	sts	0x0000, r24
 174:	00 c0       	rjmp	.+0      	; 0x176 <_ZL9toneBeginh+0x176>
        break;
#endif

      case 1:
        // 16 bit timer
        TCCR1A = 0;
 176:	e0 e8       	ldi	r30, 0x80	; 128
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	10 82       	st	Z, r1
        TCCR1B = 0;
 17c:	e1 e8       	ldi	r30, 0x81	; 129
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	10 82       	st	Z, r1
        bitWrite(TCCR1B, WGM12, 1);
 182:	a1 e8       	ldi	r26, 0x81	; 129
 184:	b0 e0       	ldi	r27, 0x00	; 0
 186:	e1 e8       	ldi	r30, 0x81	; 129
 188:	f0 e0       	ldi	r31, 0x00	; 0
 18a:	80 81       	ld	r24, Z
 18c:	88 60       	ori	r24, 0x08	; 8
 18e:	8c 93       	st	X, r24
        bitWrite(TCCR1B, CS10, 1);
 190:	a1 e8       	ldi	r26, 0x81	; 129
 192:	b0 e0       	ldi	r27, 0x00	; 0
 194:	e1 e8       	ldi	r30, 0x81	; 129
 196:	f0 e0       	ldi	r31, 0x00	; 0
 198:	80 81       	ld	r24, Z
 19a:	81 60       	ori	r24, 0x01	; 1
 19c:	8c 93       	st	X, r24
        timer1_pin_port = portOutputRegister(digitalPinToPort(_pin));
 19e:	8a a5       	ldd	r24, Y+42	; 0x2a
 1a0:	88 2f       	mov	r24, r24
 1a2:	90 e0       	ldi	r25, 0x00	; 0
 1a4:	80 50       	subi	r24, 0x00	; 0
 1a6:	90 40       	sbci	r25, 0x00	; 0
 1a8:	98 8b       	std	Y+16, r25	; 0x10
 1aa:	8f 87       	std	Y+15, r24	; 0x0f
 1ac:	ef 85       	ldd	r30, Y+15	; 0x0f
 1ae:	f8 89       	ldd	r31, Y+16	; 0x10
 1b0:	84 91       	lpm	r24, Z+
 1b2:	8e 87       	std	Y+14, r24	; 0x0e
 1b4:	8e 85       	ldd	r24, Y+14	; 0x0e
 1b6:	88 2f       	mov	r24, r24
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	80 50       	subi	r24, 0x00	; 0
 1c0:	90 40       	sbci	r25, 0x00	; 0
 1c2:	9c 8b       	std	Y+20, r25	; 0x14
 1c4:	8b 8b       	std	Y+19, r24	; 0x13
 1c6:	8b 89       	ldd	r24, Y+19	; 0x13
 1c8:	9c 89       	ldd	r25, Y+20	; 0x14
 1ca:	fc 01       	movw	r30, r24
 1cc:	85 91       	lpm	r24, Z+
 1ce:	94 91       	lpm	r25, Z+
 1d0:	9a 8b       	std	Y+18, r25	; 0x12
 1d2:	89 8b       	std	Y+17, r24	; 0x11
 1d4:	fc 8b       	std	Y+20, r31	; 0x14
 1d6:	eb 8b       	std	Y+19, r30	; 0x13
 1d8:	89 89       	ldd	r24, Y+17	; 0x11
 1da:	9a 89       	ldd	r25, Y+18	; 0x12
 1dc:	90 93 00 00 	sts	0x0000, r25
 1e0:	80 93 00 00 	sts	0x0000, r24
        timer1_pin_mask = digitalPinToBitMask(_pin);
 1e4:	8a a5       	ldd	r24, Y+42	; 0x2a
 1e6:	88 2f       	mov	r24, r24
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	80 50       	subi	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	9d 87       	std	Y+13, r25	; 0x0d
 1f0:	8c 87       	std	Y+12, r24	; 0x0c
 1f2:	ec 85       	ldd	r30, Y+12	; 0x0c
 1f4:	fd 85       	ldd	r31, Y+13	; 0x0d
 1f6:	84 91       	lpm	r24, Z+
 1f8:	8b 87       	std	Y+11, r24	; 0x0b
 1fa:	8b 85       	ldd	r24, Y+11	; 0x0b
 1fc:	80 93 00 00 	sts	0x0000, r24
 200:	00 c0       	rjmp	.+0      	; 0x202 <_ZL9toneBeginh+0x202>
        break;
      case 2:
        // 8 bit timer
        TCCR2A = 0;
 202:	e0 eb       	ldi	r30, 0xB0	; 176
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	10 82       	st	Z, r1
        TCCR2B = 0;
 208:	e1 eb       	ldi	r30, 0xB1	; 177
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	10 82       	st	Z, r1
        bitWrite(TCCR2A, WGM21, 1);
 20e:	a0 eb       	ldi	r26, 0xB0	; 176
 210:	b0 e0       	ldi	r27, 0x00	; 0
 212:	e0 eb       	ldi	r30, 0xB0	; 176
 214:	f0 e0       	ldi	r31, 0x00	; 0
 216:	80 81       	ld	r24, Z
 218:	82 60       	ori	r24, 0x02	; 2
 21a:	8c 93       	st	X, r24
        bitWrite(TCCR2B, CS20, 1);
 21c:	a1 eb       	ldi	r26, 0xB1	; 177
 21e:	b0 e0       	ldi	r27, 0x00	; 0
 220:	e1 eb       	ldi	r30, 0xB1	; 177
 222:	f0 e0       	ldi	r31, 0x00	; 0
 224:	80 81       	ld	r24, Z
 226:	81 60       	ori	r24, 0x01	; 1
 228:	8c 93       	st	X, r24
        timer2_pin_port = portOutputRegister(digitalPinToPort(_pin));
 22a:	8a a5       	ldd	r24, Y+42	; 0x2a
 22c:	88 2f       	mov	r24, r24
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	80 50       	subi	r24, 0x00	; 0
 232:	90 40       	sbci	r25, 0x00	; 0
 234:	9e 83       	std	Y+6, r25	; 0x06
 236:	8d 83       	std	Y+5, r24	; 0x05
 238:	ed 81       	ldd	r30, Y+5	; 0x05
 23a:	fe 81       	ldd	r31, Y+6	; 0x06
 23c:	84 91       	lpm	r24, Z+
 23e:	8c 83       	std	Y+4, r24	; 0x04
 240:	8c 81       	ldd	r24, Y+4	; 0x04
 242:	88 2f       	mov	r24, r24
 244:	90 e0       	ldi	r25, 0x00	; 0
 246:	88 0f       	add	r24, r24
 248:	99 1f       	adc	r25, r25
 24a:	80 50       	subi	r24, 0x00	; 0
 24c:	90 40       	sbci	r25, 0x00	; 0
 24e:	9a 87       	std	Y+10, r25	; 0x0a
 250:	89 87       	std	Y+9, r24	; 0x09
 252:	89 85       	ldd	r24, Y+9	; 0x09
 254:	9a 85       	ldd	r25, Y+10	; 0x0a
 256:	fc 01       	movw	r30, r24
 258:	85 91       	lpm	r24, Z+
 25a:	94 91       	lpm	r25, Z+
 25c:	98 87       	std	Y+8, r25	; 0x08
 25e:	8f 83       	std	Y+7, r24	; 0x07
 260:	fa 87       	std	Y+10, r31	; 0x0a
 262:	e9 87       	std	Y+9, r30	; 0x09
 264:	8f 81       	ldd	r24, Y+7	; 0x07
 266:	98 85       	ldd	r25, Y+8	; 0x08
 268:	90 93 00 00 	sts	0x0000, r25
 26c:	80 93 00 00 	sts	0x0000, r24
        timer2_pin_mask = digitalPinToBitMask(_pin);
 270:	8a a5       	ldd	r24, Y+42	; 0x2a
 272:	88 2f       	mov	r24, r24
 274:	90 e0       	ldi	r25, 0x00	; 0
 276:	80 50       	subi	r24, 0x00	; 0
 278:	90 40       	sbci	r25, 0x00	; 0
 27a:	9b 83       	std	Y+3, r25	; 0x03
 27c:	8a 83       	std	Y+2, r24	; 0x02
 27e:	ea 81       	ldd	r30, Y+2	; 0x02
 280:	fb 81       	ldd	r31, Y+3	; 0x03
 282:	84 91       	lpm	r24, Z+
 284:	89 83       	std	Y+1, r24	; 0x01
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	80 93 00 00 	sts	0x0000, r24
        break;
#endif
    }
  }

  return _timer;
 28c:	99 a5       	ldd	r25, Y+41	; 0x29
 28e:	9d a7       	std	Y+45, r25	; 0x2d
 290:	8d a5       	ldd	r24, Y+45	; 0x2d
}
 292:	ad 96       	adiw	r28, 0x2d	; 45
 294:	0f b6       	in	r0, 0x3f	; 63
 296:	f8 94       	cli
 298:	de bf       	out	0x3e, r29	; 62
 29a:	0f be       	out	0x3f, r0	; 63
 29c:	cd bf       	out	0x3d, r28	; 61
 29e:	cf 91       	pop	r28
 2a0:	df 91       	pop	r29
 2a2:	08 95       	ret

000002a4 <_Z12disableTimerh>:


// XXX: this function only works properly for timer 2 (the only one we use
// currently).  for the others, it should end the tone, but won't restore
// proper PWM functionality for the timer.
void disableTimer(uint8_t _timer)
 2a4:	df 93       	push	r29
 2a6:	cf 93       	push	r28
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <_Z12disableTimerh+0x6>
 2aa:	0f 92       	push	r0
 2ac:	cd b7       	in	r28, 0x3d	; 61
 2ae:	de b7       	in	r29, 0x3e	; 62
 2b0:	89 83       	std	Y+1, r24	; 0x01
{
  switch (_timer)
 2b2:	89 81       	ldd	r24, Y+1	; 0x01
 2b4:	28 2f       	mov	r18, r24
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	3b 83       	std	Y+3, r19	; 0x03
 2ba:	2a 83       	std	Y+2, r18	; 0x02
 2bc:	8a 81       	ldd	r24, Y+2	; 0x02
 2be:	9b 81       	ldd	r25, Y+3	; 0x03
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	91 05       	cpc	r25, r1
 2c4:	01 f0       	breq	.+0      	; 0x2c6 <_Z12disableTimerh+0x22>
 2c6:	2a 81       	ldd	r18, Y+2	; 0x02
 2c8:	3b 81       	ldd	r19, Y+3	; 0x03
 2ca:	22 30       	cpi	r18, 0x02	; 2
 2cc:	31 05       	cpc	r19, r1
 2ce:	01 f0       	breq	.+0      	; 0x2d0 <_Z12disableTimerh+0x2c>
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	9b 81       	ldd	r25, Y+3	; 0x03
 2d4:	00 97       	sbiw	r24, 0x00	; 0
 2d6:	01 f4       	brne	.+0      	; 0x2d8 <_Z12disableTimerh+0x34>
  {
#if !defined(__AVR_ATmega8__)
    case 0:
      TIMSK0 = 0;
 2d8:	ee e6       	ldi	r30, 0x6E	; 110
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	10 82       	st	Z, r1
 2de:	00 c0       	rjmp	.+0      	; 0x2e0 <_Z12disableTimerh+0x3c>
      break;
#endif
    case 1:
      bitWrite(TIMSK1, OCIE1A, 0);
 2e0:	af e6       	ldi	r26, 0x6F	; 111
 2e2:	b0 e0       	ldi	r27, 0x00	; 0
 2e4:	ef e6       	ldi	r30, 0x6F	; 111
 2e6:	f0 e0       	ldi	r31, 0x00	; 0
 2e8:	80 81       	ld	r24, Z
 2ea:	8d 7f       	andi	r24, 0xFD	; 253
 2ec:	8c 93       	st	X, r24
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <_Z12disableTimerh+0x4c>
      break;
    case 2:
      bitWrite(TIMSK2, OCIE2A, 0); // disable interrupt
 2f0:	a0 e7       	ldi	r26, 0x70	; 112
 2f2:	b0 e0       	ldi	r27, 0x00	; 0
 2f4:	e0 e7       	ldi	r30, 0x70	; 112
 2f6:	f0 e0       	ldi	r31, 0x00	; 0
 2f8:	80 81       	ld	r24, Z
 2fa:	8d 7f       	andi	r24, 0xFD	; 253
 2fc:	8c 93       	st	X, r24
      TCCR2A = (1 << WGM20);
 2fe:	e0 eb       	ldi	r30, 0xB0	; 176
 300:	f0 e0       	ldi	r31, 0x00	; 0
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	80 83       	st	Z, r24
      TCCR2B = (TCCR2B & 0b11111000) | (1 << CS22);
 306:	a1 eb       	ldi	r26, 0xB1	; 177
 308:	b0 e0       	ldi	r27, 0x00	; 0
 30a:	e1 eb       	ldi	r30, 0xB1	; 177
 30c:	f0 e0       	ldi	r31, 0x00	; 0
 30e:	80 81       	ld	r24, Z
 310:	88 7f       	andi	r24, 0xF8	; 248
 312:	84 60       	ori	r24, 0x04	; 4
 314:	8c 93       	st	X, r24
      OCR2A = 0;
 316:	e3 eb       	ldi	r30, 0xB3	; 179
 318:	f0 e0       	ldi	r31, 0x00	; 0
 31a:	10 82       	st	Z, r1
    case 5:
      TIMSK5 = 0;
      break;
#endif
  }
}
 31c:	0f 90       	pop	r0
 31e:	0f 90       	pop	r0
 320:	0f 90       	pop	r0
 322:	cf 91       	pop	r28
 324:	df 91       	pop	r29
 326:	08 95       	ret

00000328 <__vector_7>:
  }
}
#endif


ISR(TIMER2_COMPA_vect)
 328:	1f 92       	push	r1
 32a:	0f 92       	push	r0
 32c:	0f b6       	in	r0, 0x3f	; 63
 32e:	0f 92       	push	r0
 330:	11 24       	eor	r1, r1
 332:	2f 93       	push	r18
 334:	3f 93       	push	r19
 336:	4f 93       	push	r20
 338:	5f 93       	push	r21
 33a:	6f 93       	push	r22
 33c:	7f 93       	push	r23
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
 346:	ef 93       	push	r30
 348:	ff 93       	push	r31
 34a:	df 93       	push	r29
 34c:	cf 93       	push	r28
 34e:	00 d0       	rcall	.+0      	; 0x350 <__vector_7+0x28>
 350:	cd b7       	in	r28, 0x3d	; 61
 352:	de b7       	in	r29, 0x3e	; 62
{

  if (timer2_toggle_count != 0)
 354:	80 91 00 00 	lds	r24, 0x0000
 358:	90 91 00 00 	lds	r25, 0x0000
 35c:	a0 91 00 00 	lds	r26, 0x0000
 360:	b0 91 00 00 	lds	r27, 0x0000
 364:	1a 82       	std	Y+2, r1	; 0x02
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	a1 05       	cpc	r26, r1
 36a:	b1 05       	cpc	r27, r1
 36c:	01 f0       	breq	.+0      	; 0x36e <__vector_7+0x46>
 36e:	81 e0       	ldi	r24, 0x01	; 1
 370:	8a 83       	std	Y+2, r24	; 0x02
 372:	8a 81       	ldd	r24, Y+2	; 0x02
 374:	88 23       	and	r24, r24
 376:	01 f0       	breq	.+0      	; 0x378 <__vector_7+0x50>
  {
    // toggle the pin
    *timer2_pin_port ^= timer2_pin_mask;
 378:	a0 91 00 00 	lds	r26, 0x0000
 37c:	b0 91 00 00 	lds	r27, 0x0000
 380:	e0 91 00 00 	lds	r30, 0x0000
 384:	f0 91 00 00 	lds	r31, 0x0000
 388:	90 81       	ld	r25, Z
 38a:	80 91 00 00 	lds	r24, 0x0000
 38e:	89 27       	eor	r24, r25
 390:	8c 93       	st	X, r24

    if (timer2_toggle_count > 0)
 392:	80 91 00 00 	lds	r24, 0x0000
 396:	90 91 00 00 	lds	r25, 0x0000
 39a:	a0 91 00 00 	lds	r26, 0x0000
 39e:	b0 91 00 00 	lds	r27, 0x0000
 3a2:	19 82       	std	Y+1, r1	; 0x01
 3a4:	18 16       	cp	r1, r24
 3a6:	19 06       	cpc	r1, r25
 3a8:	1a 06       	cpc	r1, r26
 3aa:	1b 06       	cpc	r1, r27
 3ac:	04 f4       	brge	.+0      	; 0x3ae <__vector_7+0x86>
 3ae:	81 e0       	ldi	r24, 0x01	; 1
 3b0:	89 83       	std	Y+1, r24	; 0x01
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	88 23       	and	r24, r24
 3b6:	01 f0       	breq	.+0      	; 0x3b8 <__vector_7+0x90>
      timer2_toggle_count--;
 3b8:	80 91 00 00 	lds	r24, 0x0000
 3bc:	90 91 00 00 	lds	r25, 0x0000
 3c0:	a0 91 00 00 	lds	r26, 0x0000
 3c4:	b0 91 00 00 	lds	r27, 0x0000
 3c8:	01 97       	sbiw	r24, 0x01	; 1
 3ca:	a1 09       	sbc	r26, r1
 3cc:	b1 09       	sbc	r27, r1
 3ce:	80 93 00 00 	sts	0x0000, r24
 3d2:	90 93 00 00 	sts	0x0000, r25
 3d6:	a0 93 00 00 	sts	0x0000, r26
 3da:	b0 93 00 00 	sts	0x0000, r27
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <__vector_7+0xb8>
  }
  else
  {
    disableTimer(2);
 3e0:	82 e0       	ldi	r24, 0x02	; 2
 3e2:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
    *timer2_pin_port &= ~(timer2_pin_mask);  // keep pin low after stop
 3e6:	a0 91 00 00 	lds	r26, 0x0000
 3ea:	b0 91 00 00 	lds	r27, 0x0000
 3ee:	e0 91 00 00 	lds	r30, 0x0000
 3f2:	f0 91 00 00 	lds	r31, 0x0000
 3f6:	80 81       	ld	r24, Z
 3f8:	98 2f       	mov	r25, r24
 3fa:	80 91 00 00 	lds	r24, 0x0000
 3fe:	80 95       	com	r24
 400:	89 23       	and	r24, r25
 402:	8c 93       	st	X, r24
  }
}
 404:	0f 90       	pop	r0
 406:	0f 90       	pop	r0
 408:	cf 91       	pop	r28
 40a:	df 91       	pop	r29
 40c:	ff 91       	pop	r31
 40e:	ef 91       	pop	r30
 410:	bf 91       	pop	r27
 412:	af 91       	pop	r26
 414:	9f 91       	pop	r25
 416:	8f 91       	pop	r24
 418:	7f 91       	pop	r23
 41a:	6f 91       	pop	r22
 41c:	5f 91       	pop	r21
 41e:	4f 91       	pop	r20
 420:	3f 91       	pop	r19
 422:	2f 91       	pop	r18
 424:	0f 90       	pop	r0
 426:	0f be       	out	0x3f, r0	; 63
 428:	0f 90       	pop	r0
 42a:	1f 90       	pop	r1
 42c:	18 95       	reti

0000042e <_Z6noToneh>:
#endif
  }
}


void noTone(uint8_t _pin)
 42e:	df 93       	push	r29
 430:	cf 93       	push	r28
 432:	cd b7       	in	r28, 0x3d	; 61
 434:	de b7       	in	r29, 0x3e	; 62
 436:	27 97       	sbiw	r28, 0x07	; 7
 438:	0f b6       	in	r0, 0x3f	; 63
 43a:	f8 94       	cli
 43c:	de bf       	out	0x3e, r29	; 62
 43e:	0f be       	out	0x3f, r0	; 63
 440:	cd bf       	out	0x3d, r28	; 61
 442:	8f 83       	std	Y+7, r24	; 0x07
{
  int8_t _timer = -1;
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	8e 83       	std	Y+6, r24	; 0x06
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 448:	1d 82       	std	Y+5, r1	; 0x05
 44a:	1c 82       	std	Y+4, r1	; 0x04
 44c:	00 c0       	rjmp	.+0      	; 0x44e <_Z6noToneh+0x20>
    if (tone_pins[i] == _pin) {
 44e:	8c 81       	ldd	r24, Y+4	; 0x04
 450:	9d 81       	ldd	r25, Y+5	; 0x05
 452:	fc 01       	movw	r30, r24
 454:	e0 50       	subi	r30, 0x00	; 0
 456:	f0 40       	sbci	r31, 0x00	; 0
 458:	90 81       	ld	r25, Z
 45a:	8f 81       	ldd	r24, Y+7	; 0x07
 45c:	98 17       	cp	r25, r24
 45e:	01 f4       	brne	.+0      	; 0x460 <_Z6noToneh+0x32>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
 460:	8c 81       	ldd	r24, Y+4	; 0x04
 462:	9d 81       	ldd	r25, Y+5	; 0x05
 464:	80 50       	subi	r24, 0x00	; 0
 466:	90 40       	sbci	r25, 0x00	; 0
 468:	9b 83       	std	Y+3, r25	; 0x03
 46a:	8a 83       	std	Y+2, r24	; 0x02
 46c:	ea 81       	ldd	r30, Y+2	; 0x02
 46e:	fb 81       	ldd	r31, Y+3	; 0x03
 470:	84 91       	lpm	r24, Z+
 472:	89 83       	std	Y+1, r24	; 0x01
 474:	89 81       	ldd	r24, Y+1	; 0x01
 476:	8e 83       	std	Y+6, r24	; 0x06
      tone_pins[i] = 255;
 478:	8c 81       	ldd	r24, Y+4	; 0x04
 47a:	9d 81       	ldd	r25, Y+5	; 0x05
 47c:	fc 01       	movw	r30, r24
 47e:	e0 50       	subi	r30, 0x00	; 0
 480:	f0 40       	sbci	r31, 0x00	; 0
 482:	8f ef       	ldi	r24, 0xFF	; 255
 484:	80 83       	st	Z, r24

void noTone(uint8_t _pin)
{
  int8_t _timer = -1;
  
  for (int i = 0; i < AVAILABLE_TONE_PINS; i++) {
 486:	8c 81       	ldd	r24, Y+4	; 0x04
 488:	9d 81       	ldd	r25, Y+5	; 0x05
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	9d 83       	std	Y+5, r25	; 0x05
 48e:	8c 83       	std	Y+4, r24	; 0x04
 490:	8c 81       	ldd	r24, Y+4	; 0x04
 492:	9d 81       	ldd	r25, Y+5	; 0x05
 494:	18 16       	cp	r1, r24
 496:	19 06       	cpc	r1, r25
 498:	04 f4       	brge	.+0      	; 0x49a <_Z6noToneh+0x6c>
      _timer = pgm_read_byte(tone_pin_to_timer_PGM + i);
      tone_pins[i] = 255;
    }
  }
  
  disableTimer(_timer);
 49a:	8e 81       	ldd	r24, Y+6	; 0x06
 49c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>

  digitalWrite(_pin, 0);
 4a0:	8f 81       	ldd	r24, Y+7	; 0x07
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
}
 4a8:	27 96       	adiw	r28, 0x07	; 7
 4aa:	0f b6       	in	r0, 0x3f	; 63
 4ac:	f8 94       	cli
 4ae:	de bf       	out	0x3e, r29	; 62
 4b0:	0f be       	out	0x3f, r0	; 63
 4b2:	cd bf       	out	0x3d, r28	; 61
 4b4:	cf 91       	pop	r28
 4b6:	df 91       	pop	r29
 4b8:	08 95       	ret

000004ba <_Z4tonehjm>:



// frequency (in hertz) and duration (in milliseconds).

void tone(uint8_t _pin, unsigned int frequency, unsigned long duration)
 4ba:	df 93       	push	r29
 4bc:	cf 93       	push	r28
 4be:	cd b7       	in	r28, 0x3d	; 61
 4c0:	de b7       	in	r29, 0x3e	; 62
 4c2:	66 97       	sbiw	r28, 0x16	; 22
 4c4:	0f b6       	in	r0, 0x3f	; 63
 4c6:	f8 94       	cli
 4c8:	de bf       	out	0x3e, r29	; 62
 4ca:	0f be       	out	0x3f, r0	; 63
 4cc:	cd bf       	out	0x3d, r28	; 61
 4ce:	8b 87       	std	Y+11, r24	; 0x0b
 4d0:	7d 87       	std	Y+13, r23	; 0x0d
 4d2:	6c 87       	std	Y+12, r22	; 0x0c
 4d4:	2e 87       	std	Y+14, r18	; 0x0e
 4d6:	3f 87       	std	Y+15, r19	; 0x0f
 4d8:	48 8b       	std	Y+16, r20	; 0x10
 4da:	59 8b       	std	Y+17, r21	; 0x11
{
  uint8_t prescalarbits = 0b001;
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	8a 87       	std	Y+10, r24	; 0x0a
  long toggle_count = 0;
 4e0:	1e 82       	std	Y+6, r1	; 0x06
 4e2:	1f 82       	std	Y+7, r1	; 0x07
 4e4:	18 86       	std	Y+8, r1	; 0x08
 4e6:	19 86       	std	Y+9, r1	; 0x09
  uint32_t ocr = 0;
 4e8:	1a 82       	std	Y+2, r1	; 0x02
 4ea:	1b 82       	std	Y+3, r1	; 0x03
 4ec:	1c 82       	std	Y+4, r1	; 0x04
 4ee:	1d 82       	std	Y+5, r1	; 0x05
  int8_t _timer;

  _timer = toneBegin(_pin);
 4f0:	8b 85       	ldd	r24, Y+11	; 0x0b
 4f2:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 4f6:	89 83       	std	Y+1, r24	; 0x01

  if (_timer >= 0)
 4f8:	89 81       	ldd	r24, Y+1	; 0x01
 4fa:	88 23       	and	r24, r24
 4fc:	04 f4       	brge	.+0      	; 0x4fe <_Z4tonehjm+0x44>
 4fe:	00 c0       	rjmp	.+0      	; 0x500 <_Z4tonehjm+0x46>
  {
    // Set the pinMode as OUTPUT
    pinMode(_pin, OUTPUT);
 500:	8b 85       	ldd	r24, Y+11	; 0x0b
 502:	61 e0       	ldi	r22, 0x01	; 1
 504:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
    
    // if we are using an 8 bit timer, scan through prescalars to find the best fit
    if (_timer == 0 || _timer == 2)
 508:	89 81       	ldd	r24, Y+1	; 0x01
 50a:	88 23       	and	r24, r24
 50c:	01 f0       	breq	.+0      	; 0x50e <_Z4tonehjm+0x54>
 50e:	89 81       	ldd	r24, Y+1	; 0x01
 510:	82 30       	cpi	r24, 0x02	; 2
 512:	01 f0       	breq	.+0      	; 0x514 <_Z4tonehjm+0x5a>
 514:	00 c0       	rjmp	.+0      	; 0x516 <_Z4tonehjm+0x5c>
    {
      ocr = F_CPU / frequency / 2 - 1;
 516:	8c 85       	ldd	r24, Y+12	; 0x0c
 518:	9d 85       	ldd	r25, Y+13	; 0x0d
 51a:	9c 01       	movw	r18, r24
 51c:	40 e0       	ldi	r20, 0x00	; 0
 51e:	50 e0       	ldi	r21, 0x00	; 0
 520:	80 e0       	ldi	r24, 0x00	; 0
 522:	92 e1       	ldi	r25, 0x12	; 18
 524:	aa e7       	ldi	r26, 0x7A	; 122
 526:	b0 e0       	ldi	r27, 0x00	; 0
 528:	bc 01       	movw	r22, r24
 52a:	cd 01       	movw	r24, r26
 52c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 530:	da 01       	movw	r26, r20
 532:	c9 01       	movw	r24, r18
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	a1 09       	sbc	r26, r1
 538:	b1 09       	sbc	r27, r1
 53a:	8a 83       	std	Y+2, r24	; 0x02
 53c:	9b 83       	std	Y+3, r25	; 0x03
 53e:	ac 83       	std	Y+4, r26	; 0x04
 540:	bd 83       	std	Y+5, r27	; 0x05
      prescalarbits = 0b001;  // ck/1: same for both timers
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 255)
 546:	8a 81       	ldd	r24, Y+2	; 0x02
 548:	9b 81       	ldd	r25, Y+3	; 0x03
 54a:	ac 81       	ldd	r26, Y+4	; 0x04
 54c:	bd 81       	ldd	r27, Y+5	; 0x05
 54e:	8f 3f       	cpi	r24, 0xFF	; 255
 550:	91 05       	cpc	r25, r1
 552:	a1 05       	cpc	r26, r1
 554:	b1 05       	cpc	r27, r1
 556:	01 f0       	breq	.+0      	; 0x558 <_Z4tonehjm+0x9e>
 558:	00 f4       	brcc	.+0      	; 0x55a <_Z4tonehjm+0xa0>
 55a:	00 c0       	rjmp	.+0      	; 0x55c <_Z4tonehjm+0xa2>
      {
        ocr = F_CPU / frequency / 2 / 8 - 1;
 55c:	8c 85       	ldd	r24, Y+12	; 0x0c
 55e:	9d 85       	ldd	r25, Y+13	; 0x0d
 560:	9c 01       	movw	r18, r24
 562:	40 e0       	ldi	r20, 0x00	; 0
 564:	50 e0       	ldi	r21, 0x00	; 0
 566:	80 e4       	ldi	r24, 0x40	; 64
 568:	92 e4       	ldi	r25, 0x42	; 66
 56a:	af e0       	ldi	r26, 0x0F	; 15
 56c:	b0 e0       	ldi	r27, 0x00	; 0
 56e:	bc 01       	movw	r22, r24
 570:	cd 01       	movw	r24, r26
 572:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 576:	da 01       	movw	r26, r20
 578:	c9 01       	movw	r24, r18
 57a:	01 97       	sbiw	r24, 0x01	; 1
 57c:	a1 09       	sbc	r26, r1
 57e:	b1 09       	sbc	r27, r1
 580:	8a 83       	std	Y+2, r24	; 0x02
 582:	9b 83       	std	Y+3, r25	; 0x03
 584:	ac 83       	std	Y+4, r26	; 0x04
 586:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b010;  // ck/8: same for both timers
 588:	82 e0       	ldi	r24, 0x02	; 2
 58a:	8a 87       	std	Y+10, r24	; 0x0a

        if (_timer == 2 && ocr > 255)
 58c:	89 81       	ldd	r24, Y+1	; 0x01
 58e:	82 30       	cpi	r24, 0x02	; 2
 590:	01 f4       	brne	.+0      	; 0x592 <_Z4tonehjm+0xd8>
 592:	8a 81       	ldd	r24, Y+2	; 0x02
 594:	9b 81       	ldd	r25, Y+3	; 0x03
 596:	ac 81       	ldd	r26, Y+4	; 0x04
 598:	bd 81       	ldd	r27, Y+5	; 0x05
 59a:	8f 3f       	cpi	r24, 0xFF	; 255
 59c:	91 05       	cpc	r25, r1
 59e:	a1 05       	cpc	r26, r1
 5a0:	b1 05       	cpc	r27, r1
 5a2:	01 f0       	breq	.+0      	; 0x5a4 <_Z4tonehjm+0xea>
 5a4:	00 f0       	brcs	.+0      	; 0x5a6 <_Z4tonehjm+0xec>
        {
          ocr = F_CPU / frequency / 2 / 32 - 1;
 5a6:	8c 85       	ldd	r24, Y+12	; 0x0c
 5a8:	9d 85       	ldd	r25, Y+13	; 0x0d
 5aa:	9c 01       	movw	r18, r24
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	50 e0       	ldi	r21, 0x00	; 0
 5b0:	80 e9       	ldi	r24, 0x90	; 144
 5b2:	90 ed       	ldi	r25, 0xD0	; 208
 5b4:	a3 e0       	ldi	r26, 0x03	; 3
 5b6:	b0 e0       	ldi	r27, 0x00	; 0
 5b8:	bc 01       	movw	r22, r24
 5ba:	cd 01       	movw	r24, r26
 5bc:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 5c0:	da 01       	movw	r26, r20
 5c2:	c9 01       	movw	r24, r18
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	a1 09       	sbc	r26, r1
 5c8:	b1 09       	sbc	r27, r1
 5ca:	8a 83       	std	Y+2, r24	; 0x02
 5cc:	9b 83       	std	Y+3, r25	; 0x03
 5ce:	ac 83       	std	Y+4, r26	; 0x04
 5d0:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = 0b011;
 5d2:	83 e0       	ldi	r24, 0x03	; 3
 5d4:	8a 87       	std	Y+10, r24	; 0x0a
        }

        if (ocr > 255)
 5d6:	8a 81       	ldd	r24, Y+2	; 0x02
 5d8:	9b 81       	ldd	r25, Y+3	; 0x03
 5da:	ac 81       	ldd	r26, Y+4	; 0x04
 5dc:	bd 81       	ldd	r27, Y+5	; 0x05
 5de:	8f 3f       	cpi	r24, 0xFF	; 255
 5e0:	91 05       	cpc	r25, r1
 5e2:	a1 05       	cpc	r26, r1
 5e4:	b1 05       	cpc	r27, r1
 5e6:	01 f0       	breq	.+0      	; 0x5e8 <_Z4tonehjm+0x12e>
 5e8:	00 f4       	brcc	.+0      	; 0x5ea <_Z4tonehjm+0x130>
 5ea:	00 c0       	rjmp	.+0      	; 0x5ec <_Z4tonehjm+0x132>
        {
          ocr = F_CPU / frequency / 2 / 64 - 1;
 5ec:	8c 85       	ldd	r24, Y+12	; 0x0c
 5ee:	9d 85       	ldd	r25, Y+13	; 0x0d
 5f0:	9c 01       	movw	r18, r24
 5f2:	40 e0       	ldi	r20, 0x00	; 0
 5f4:	50 e0       	ldi	r21, 0x00	; 0
 5f6:	88 e4       	ldi	r24, 0x48	; 72
 5f8:	98 ee       	ldi	r25, 0xE8	; 232
 5fa:	a1 e0       	ldi	r26, 0x01	; 1
 5fc:	b0 e0       	ldi	r27, 0x00	; 0
 5fe:	bc 01       	movw	r22, r24
 600:	cd 01       	movw	r24, r26
 602:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 606:	da 01       	movw	r26, r20
 608:	c9 01       	movw	r24, r18
 60a:	01 97       	sbiw	r24, 0x01	; 1
 60c:	a1 09       	sbc	r26, r1
 60e:	b1 09       	sbc	r27, r1
 610:	8a 83       	std	Y+2, r24	; 0x02
 612:	9b 83       	std	Y+3, r25	; 0x03
 614:	ac 83       	std	Y+4, r26	; 0x04
 616:	bd 83       	std	Y+5, r27	; 0x05
          prescalarbits = _timer == 0 ? 0b011 : 0b100;
 618:	89 81       	ldd	r24, Y+1	; 0x01
 61a:	88 23       	and	r24, r24
 61c:	01 f4       	brne	.+0      	; 0x61e <_Z4tonehjm+0x164>
 61e:	23 e0       	ldi	r18, 0x03	; 3
 620:	2e 8b       	std	Y+22, r18	; 0x16
 622:	00 c0       	rjmp	.+0      	; 0x624 <_Z4tonehjm+0x16a>
 624:	34 e0       	ldi	r19, 0x04	; 4
 626:	3e 8b       	std	Y+22, r19	; 0x16
 628:	8e 89       	ldd	r24, Y+22	; 0x16
 62a:	8a 87       	std	Y+10, r24	; 0x0a

          if (_timer == 2 && ocr > 255)
 62c:	89 81       	ldd	r24, Y+1	; 0x01
 62e:	82 30       	cpi	r24, 0x02	; 2
 630:	01 f4       	brne	.+0      	; 0x632 <_Z4tonehjm+0x178>
 632:	8a 81       	ldd	r24, Y+2	; 0x02
 634:	9b 81       	ldd	r25, Y+3	; 0x03
 636:	ac 81       	ldd	r26, Y+4	; 0x04
 638:	bd 81       	ldd	r27, Y+5	; 0x05
 63a:	8f 3f       	cpi	r24, 0xFF	; 255
 63c:	91 05       	cpc	r25, r1
 63e:	a1 05       	cpc	r26, r1
 640:	b1 05       	cpc	r27, r1
 642:	01 f0       	breq	.+0      	; 0x644 <_Z4tonehjm+0x18a>
 644:	00 f0       	brcs	.+0      	; 0x646 <_Z4tonehjm+0x18c>
          {
            ocr = F_CPU / frequency / 2 / 128 - 1;
 646:	8c 85       	ldd	r24, Y+12	; 0x0c
 648:	9d 85       	ldd	r25, Y+13	; 0x0d
 64a:	9c 01       	movw	r18, r24
 64c:	40 e0       	ldi	r20, 0x00	; 0
 64e:	50 e0       	ldi	r21, 0x00	; 0
 650:	84 e2       	ldi	r24, 0x24	; 36
 652:	94 ef       	ldi	r25, 0xF4	; 244
 654:	a0 e0       	ldi	r26, 0x00	; 0
 656:	b0 e0       	ldi	r27, 0x00	; 0
 658:	bc 01       	movw	r22, r24
 65a:	cd 01       	movw	r24, r26
 65c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 660:	da 01       	movw	r26, r20
 662:	c9 01       	movw	r24, r18
 664:	01 97       	sbiw	r24, 0x01	; 1
 666:	a1 09       	sbc	r26, r1
 668:	b1 09       	sbc	r27, r1
 66a:	8a 83       	std	Y+2, r24	; 0x02
 66c:	9b 83       	std	Y+3, r25	; 0x03
 66e:	ac 83       	std	Y+4, r26	; 0x04
 670:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = 0b101;
 672:	85 e0       	ldi	r24, 0x05	; 5
 674:	8a 87       	std	Y+10, r24	; 0x0a
          }

          if (ocr > 255)
 676:	8a 81       	ldd	r24, Y+2	; 0x02
 678:	9b 81       	ldd	r25, Y+3	; 0x03
 67a:	ac 81       	ldd	r26, Y+4	; 0x04
 67c:	bd 81       	ldd	r27, Y+5	; 0x05
 67e:	8f 3f       	cpi	r24, 0xFF	; 255
 680:	91 05       	cpc	r25, r1
 682:	a1 05       	cpc	r26, r1
 684:	b1 05       	cpc	r27, r1
 686:	01 f0       	breq	.+0      	; 0x688 <_Z4tonehjm+0x1ce>
 688:	00 f4       	brcc	.+0      	; 0x68a <_Z4tonehjm+0x1d0>
 68a:	00 c0       	rjmp	.+0      	; 0x68c <_Z4tonehjm+0x1d2>
          {
            ocr = F_CPU / frequency / 2 / 256 - 1;
 68c:	8c 85       	ldd	r24, Y+12	; 0x0c
 68e:	9d 85       	ldd	r25, Y+13	; 0x0d
 690:	9c 01       	movw	r18, r24
 692:	40 e0       	ldi	r20, 0x00	; 0
 694:	50 e0       	ldi	r21, 0x00	; 0
 696:	82 e1       	ldi	r24, 0x12	; 18
 698:	9a e7       	ldi	r25, 0x7A	; 122
 69a:	a0 e0       	ldi	r26, 0x00	; 0
 69c:	b0 e0       	ldi	r27, 0x00	; 0
 69e:	bc 01       	movw	r22, r24
 6a0:	cd 01       	movw	r24, r26
 6a2:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 6a6:	da 01       	movw	r26, r20
 6a8:	c9 01       	movw	r24, r18
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	a1 09       	sbc	r26, r1
 6ae:	b1 09       	sbc	r27, r1
 6b0:	8a 83       	std	Y+2, r24	; 0x02
 6b2:	9b 83       	std	Y+3, r25	; 0x03
 6b4:	ac 83       	std	Y+4, r26	; 0x04
 6b6:	bd 83       	std	Y+5, r27	; 0x05
            prescalarbits = _timer == 0 ? 0b100 : 0b110;
 6b8:	89 81       	ldd	r24, Y+1	; 0x01
 6ba:	88 23       	and	r24, r24
 6bc:	01 f4       	brne	.+0      	; 0x6be <_Z4tonehjm+0x204>
 6be:	94 e0       	ldi	r25, 0x04	; 4
 6c0:	9d 8b       	std	Y+21, r25	; 0x15
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <_Z4tonehjm+0x20a>
 6c4:	26 e0       	ldi	r18, 0x06	; 6
 6c6:	2d 8b       	std	Y+21, r18	; 0x15
 6c8:	3d 89       	ldd	r19, Y+21	; 0x15
 6ca:	3a 87       	std	Y+10, r19	; 0x0a
            if (ocr > 255)
 6cc:	8a 81       	ldd	r24, Y+2	; 0x02
 6ce:	9b 81       	ldd	r25, Y+3	; 0x03
 6d0:	ac 81       	ldd	r26, Y+4	; 0x04
 6d2:	bd 81       	ldd	r27, Y+5	; 0x05
 6d4:	8f 3f       	cpi	r24, 0xFF	; 255
 6d6:	91 05       	cpc	r25, r1
 6d8:	a1 05       	cpc	r26, r1
 6da:	b1 05       	cpc	r27, r1
 6dc:	01 f0       	breq	.+0      	; 0x6de <_Z4tonehjm+0x224>
 6de:	00 f0       	brcs	.+0      	; 0x6e0 <_Z4tonehjm+0x226>
            {
              // can't do any better than /1024
              ocr = F_CPU / frequency / 2 / 1024 - 1;
 6e0:	8c 85       	ldd	r24, Y+12	; 0x0c
 6e2:	9d 85       	ldd	r25, Y+13	; 0x0d
 6e4:	9c 01       	movw	r18, r24
 6e6:	40 e0       	ldi	r20, 0x00	; 0
 6e8:	50 e0       	ldi	r21, 0x00	; 0
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	92 e1       	ldi	r25, 0x12	; 18
 6ee:	aa e7       	ldi	r26, 0x7A	; 122
 6f0:	b0 e0       	ldi	r27, 0x00	; 0
 6f2:	bc 01       	movw	r22, r24
 6f4:	cd 01       	movw	r24, r26
 6f6:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 6fa:	da 01       	movw	r26, r20
 6fc:	c9 01       	movw	r24, r18
 6fe:	07 2e       	mov	r0, r23
 700:	7a e0       	ldi	r23, 0x0A	; 10
 702:	b6 95       	lsr	r27
 704:	a7 95       	ror	r26
 706:	97 95       	ror	r25
 708:	87 95       	ror	r24
 70a:	7a 95       	dec	r23
 70c:	01 f4       	brne	.+0      	; 0x70e <_Z4tonehjm+0x254>
 70e:	70 2d       	mov	r23, r0
 710:	01 97       	sbiw	r24, 0x01	; 1
 712:	a1 09       	sbc	r26, r1
 714:	b1 09       	sbc	r27, r1
 716:	8a 83       	std	Y+2, r24	; 0x02
 718:	9b 83       	std	Y+3, r25	; 0x03
 71a:	ac 83       	std	Y+4, r26	; 0x04
 71c:	bd 83       	std	Y+5, r27	; 0x05
              prescalarbits = _timer == 0 ? 0b101 : 0b111;
 71e:	89 81       	ldd	r24, Y+1	; 0x01
 720:	88 23       	and	r24, r24
 722:	01 f4       	brne	.+0      	; 0x724 <_Z4tonehjm+0x26a>
 724:	85 e0       	ldi	r24, 0x05	; 5
 726:	8c 8b       	std	Y+20, r24	; 0x14
 728:	00 c0       	rjmp	.+0      	; 0x72a <_Z4tonehjm+0x270>
 72a:	97 e0       	ldi	r25, 0x07	; 7
 72c:	9c 8b       	std	Y+20, r25	; 0x14
 72e:	2c 89       	ldd	r18, Y+20	; 0x14
 730:	2a 87       	std	Y+10, r18	; 0x0a
          }
        }
      }

#if !defined(__AVR_ATmega8__)
      if (_timer == 0)
 732:	89 81       	ldd	r24, Y+1	; 0x01
 734:	88 23       	and	r24, r24
 736:	01 f4       	brne	.+0      	; 0x738 <_Z4tonehjm+0x27e>
        TCCR0B = prescalarbits;
 738:	e5 e4       	ldi	r30, 0x45	; 69
 73a:	f0 e0       	ldi	r31, 0x00	; 0
 73c:	8a 85       	ldd	r24, Y+10	; 0x0a
 73e:	80 83       	st	Z, r24
 740:	00 c0       	rjmp	.+0      	; 0x742 <_Z4tonehjm+0x288>
      else
#endif
        TCCR2B = prescalarbits;
 742:	e1 eb       	ldi	r30, 0xB1	; 177
 744:	f0 e0       	ldi	r31, 0x00	; 0
 746:	8a 85       	ldd	r24, Y+10	; 0x0a
 748:	80 83       	st	Z, r24
 74a:	00 c0       	rjmp	.+0      	; 0x74c <_Z4tonehjm+0x292>
    }
    else
    {
      // two choices for the 16 bit timers: ck/1 or ck/64
      ocr = F_CPU / frequency / 2 - 1;
 74c:	8c 85       	ldd	r24, Y+12	; 0x0c
 74e:	9d 85       	ldd	r25, Y+13	; 0x0d
 750:	9c 01       	movw	r18, r24
 752:	40 e0       	ldi	r20, 0x00	; 0
 754:	50 e0       	ldi	r21, 0x00	; 0
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	92 e1       	ldi	r25, 0x12	; 18
 75a:	aa e7       	ldi	r26, 0x7A	; 122
 75c:	b0 e0       	ldi	r27, 0x00	; 0
 75e:	bc 01       	movw	r22, r24
 760:	cd 01       	movw	r24, r26
 762:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 766:	da 01       	movw	r26, r20
 768:	c9 01       	movw	r24, r18
 76a:	01 97       	sbiw	r24, 0x01	; 1
 76c:	a1 09       	sbc	r26, r1
 76e:	b1 09       	sbc	r27, r1
 770:	8a 83       	std	Y+2, r24	; 0x02
 772:	9b 83       	std	Y+3, r25	; 0x03
 774:	ac 83       	std	Y+4, r26	; 0x04
 776:	bd 83       	std	Y+5, r27	; 0x05

      prescalarbits = 0b001;
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	8a 87       	std	Y+10, r24	; 0x0a
      if (ocr > 0xffff)
 77c:	8a 81       	ldd	r24, Y+2	; 0x02
 77e:	9b 81       	ldd	r25, Y+3	; 0x03
 780:	ac 81       	ldd	r26, Y+4	; 0x04
 782:	bd 81       	ldd	r27, Y+5	; 0x05
 784:	80 30       	cpi	r24, 0x00	; 0
 786:	30 e0       	ldi	r19, 0x00	; 0
 788:	93 07       	cpc	r25, r19
 78a:	31 e0       	ldi	r19, 0x01	; 1
 78c:	a3 07       	cpc	r26, r19
 78e:	30 e0       	ldi	r19, 0x00	; 0
 790:	b3 07       	cpc	r27, r19
 792:	00 f0       	brcs	.+0      	; 0x794 <_Z4tonehjm+0x2da>
      {
        ocr = F_CPU / frequency / 2 / 64 - 1;
 794:	8c 85       	ldd	r24, Y+12	; 0x0c
 796:	9d 85       	ldd	r25, Y+13	; 0x0d
 798:	9c 01       	movw	r18, r24
 79a:	40 e0       	ldi	r20, 0x00	; 0
 79c:	50 e0       	ldi	r21, 0x00	; 0
 79e:	88 e4       	ldi	r24, 0x48	; 72
 7a0:	98 ee       	ldi	r25, 0xE8	; 232
 7a2:	a1 e0       	ldi	r26, 0x01	; 1
 7a4:	b0 e0       	ldi	r27, 0x00	; 0
 7a6:	bc 01       	movw	r22, r24
 7a8:	cd 01       	movw	r24, r26
 7aa:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 7ae:	da 01       	movw	r26, r20
 7b0:	c9 01       	movw	r24, r18
 7b2:	01 97       	sbiw	r24, 0x01	; 1
 7b4:	a1 09       	sbc	r26, r1
 7b6:	b1 09       	sbc	r27, r1
 7b8:	8a 83       	std	Y+2, r24	; 0x02
 7ba:	9b 83       	std	Y+3, r25	; 0x03
 7bc:	ac 83       	std	Y+4, r26	; 0x04
 7be:	bd 83       	std	Y+5, r27	; 0x05
        prescalarbits = 0b011;
 7c0:	83 e0       	ldi	r24, 0x03	; 3
 7c2:	8a 87       	std	Y+10, r24	; 0x0a
      }

      if (_timer == 1)
 7c4:	89 81       	ldd	r24, Y+1	; 0x01
 7c6:	81 30       	cpi	r24, 0x01	; 1
 7c8:	01 f4       	brne	.+0      	; 0x7ca <_Z4tonehjm+0x310>
        TCCR1B = (TCCR1B & 0b11111000) | prescalarbits;
 7ca:	a1 e8       	ldi	r26, 0x81	; 129
 7cc:	b0 e0       	ldi	r27, 0x00	; 0
 7ce:	e1 e8       	ldi	r30, 0x81	; 129
 7d0:	f0 e0       	ldi	r31, 0x00	; 0
 7d2:	80 81       	ld	r24, Z
 7d4:	98 2f       	mov	r25, r24
 7d6:	98 7f       	andi	r25, 0xF8	; 248
 7d8:	8a 85       	ldd	r24, Y+10	; 0x0a
 7da:	89 2b       	or	r24, r25
 7dc:	8c 93       	st	X, r24

    }
    

    // Calculate the toggle count
    if (duration > 0)
 7de:	8e 85       	ldd	r24, Y+14	; 0x0e
 7e0:	9f 85       	ldd	r25, Y+15	; 0x0f
 7e2:	a8 89       	ldd	r26, Y+16	; 0x10
 7e4:	b9 89       	ldd	r27, Y+17	; 0x11
 7e6:	00 97       	sbiw	r24, 0x00	; 0
 7e8:	a1 05       	cpc	r26, r1
 7ea:	b1 05       	cpc	r27, r1
 7ec:	01 f0       	breq	.+0      	; 0x7ee <_Z4tonehjm+0x334>
    {
      toggle_count = 2 * frequency * duration / 1000;
 7ee:	8c 85       	ldd	r24, Y+12	; 0x0c
 7f0:	9d 85       	ldd	r25, Y+13	; 0x0d
 7f2:	88 0f       	add	r24, r24
 7f4:	99 1f       	adc	r25, r25
 7f6:	cc 01       	movw	r24, r24
 7f8:	a0 e0       	ldi	r26, 0x00	; 0
 7fa:	b0 e0       	ldi	r27, 0x00	; 0
 7fc:	2e 85       	ldd	r18, Y+14	; 0x0e
 7fe:	3f 85       	ldd	r19, Y+15	; 0x0f
 800:	48 89       	ldd	r20, Y+16	; 0x10
 802:	59 89       	ldd	r21, Y+17	; 0x11
 804:	bc 01       	movw	r22, r24
 806:	cd 01       	movw	r24, r26
 808:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 80c:	dc 01       	movw	r26, r24
 80e:	cb 01       	movw	r24, r22
 810:	28 ee       	ldi	r18, 0xE8	; 232
 812:	33 e0       	ldi	r19, 0x03	; 3
 814:	40 e0       	ldi	r20, 0x00	; 0
 816:	50 e0       	ldi	r21, 0x00	; 0
 818:	bc 01       	movw	r22, r24
 81a:	cd 01       	movw	r24, r26
 81c:	0e 94 00 00 	call	0	; 0x0 <_ZL9toneBeginh>
 820:	da 01       	movw	r26, r20
 822:	c9 01       	movw	r24, r18
 824:	8e 83       	std	Y+6, r24	; 0x06
 826:	9f 83       	std	Y+7, r25	; 0x07
 828:	a8 87       	std	Y+8, r26	; 0x08
 82a:	b9 87       	std	Y+9, r27	; 0x09
 82c:	00 c0       	rjmp	.+0      	; 0x82e <_Z4tonehjm+0x374>
    }
    else
    {
      toggle_count = -1;
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	9f ef       	ldi	r25, 0xFF	; 255
 832:	af ef       	ldi	r26, 0xFF	; 255
 834:	bf ef       	ldi	r27, 0xFF	; 255
 836:	8e 83       	std	Y+6, r24	; 0x06
 838:	9f 83       	std	Y+7, r25	; 0x07
 83a:	a8 87       	std	Y+8, r26	; 0x08
 83c:	b9 87       	std	Y+9, r27	; 0x09
    }

    // Set the OCR for the given timer,
    // set the toggle count,
    // then turn on the interrupts
    switch (_timer)
 83e:	89 81       	ldd	r24, Y+1	; 0x01
 840:	28 2f       	mov	r18, r24
 842:	33 27       	eor	r19, r19
 844:	27 fd       	sbrc	r18, 7
 846:	30 95       	com	r19
 848:	3b 8b       	std	Y+19, r19	; 0x13
 84a:	2a 8b       	std	Y+18, r18	; 0x12
 84c:	8a 89       	ldd	r24, Y+18	; 0x12
 84e:	9b 89       	ldd	r25, Y+19	; 0x13
 850:	81 30       	cpi	r24, 0x01	; 1
 852:	91 05       	cpc	r25, r1
 854:	01 f0       	breq	.+0      	; 0x856 <_Z4tonehjm+0x39c>
 856:	2a 89       	ldd	r18, Y+18	; 0x12
 858:	3b 89       	ldd	r19, Y+19	; 0x13
 85a:	22 30       	cpi	r18, 0x02	; 2
 85c:	31 05       	cpc	r19, r1
 85e:	01 f0       	breq	.+0      	; 0x860 <_Z4tonehjm+0x3a6>
 860:	8a 89       	ldd	r24, Y+18	; 0x12
 862:	9b 89       	ldd	r25, Y+19	; 0x13
 864:	00 97       	sbiw	r24, 0x00	; 0
 866:	01 f0       	breq	.+0      	; 0x868 <_Z4tonehjm+0x3ae>
 868:	00 c0       	rjmp	.+0      	; 0x86a <_Z4tonehjm+0x3b0>
    {

#if !defined(__AVR_ATmega8__)
      case 0:
        OCR0A = ocr;
 86a:	e7 e4       	ldi	r30, 0x47	; 71
 86c:	f0 e0       	ldi	r31, 0x00	; 0
 86e:	8a 81       	ldd	r24, Y+2	; 0x02
 870:	80 83       	st	Z, r24
        timer0_toggle_count = toggle_count;
 872:	8e 81       	ldd	r24, Y+6	; 0x06
 874:	9f 81       	ldd	r25, Y+7	; 0x07
 876:	a8 85       	ldd	r26, Y+8	; 0x08
 878:	b9 85       	ldd	r27, Y+9	; 0x09
 87a:	80 93 00 00 	sts	0x0000, r24
 87e:	90 93 00 00 	sts	0x0000, r25
 882:	a0 93 00 00 	sts	0x0000, r26
 886:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK0, OCIE0A, 1);
 88a:	ae e6       	ldi	r26, 0x6E	; 110
 88c:	b0 e0       	ldi	r27, 0x00	; 0
 88e:	ee e6       	ldi	r30, 0x6E	; 110
 890:	f0 e0       	ldi	r31, 0x00	; 0
 892:	80 81       	ld	r24, Z
 894:	82 60       	ori	r24, 0x02	; 2
 896:	8c 93       	st	X, r24
 898:	00 c0       	rjmp	.+0      	; 0x89a <_Z4tonehjm+0x3e0>
        break;
#endif

      case 1:
        OCR1A = ocr;
 89a:	e8 e8       	ldi	r30, 0x88	; 136
 89c:	f0 e0       	ldi	r31, 0x00	; 0
 89e:	8a 81       	ldd	r24, Y+2	; 0x02
 8a0:	9b 81       	ldd	r25, Y+3	; 0x03
 8a2:	91 83       	std	Z+1, r25	; 0x01
 8a4:	80 83       	st	Z, r24
        timer1_toggle_count = toggle_count;
 8a6:	8e 81       	ldd	r24, Y+6	; 0x06
 8a8:	9f 81       	ldd	r25, Y+7	; 0x07
 8aa:	a8 85       	ldd	r26, Y+8	; 0x08
 8ac:	b9 85       	ldd	r27, Y+9	; 0x09
 8ae:	80 93 00 00 	sts	0x0000, r24
 8b2:	90 93 00 00 	sts	0x0000, r25
 8b6:	a0 93 00 00 	sts	0x0000, r26
 8ba:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK1, OCIE1A, 1);
 8be:	af e6       	ldi	r26, 0x6F	; 111
 8c0:	b0 e0       	ldi	r27, 0x00	; 0
 8c2:	ef e6       	ldi	r30, 0x6F	; 111
 8c4:	f0 e0       	ldi	r31, 0x00	; 0
 8c6:	80 81       	ld	r24, Z
 8c8:	82 60       	ori	r24, 0x02	; 2
 8ca:	8c 93       	st	X, r24
 8cc:	00 c0       	rjmp	.+0      	; 0x8ce <_Z4tonehjm+0x414>
        break;
      case 2:
        OCR2A = ocr;
 8ce:	e3 eb       	ldi	r30, 0xB3	; 179
 8d0:	f0 e0       	ldi	r31, 0x00	; 0
 8d2:	8a 81       	ldd	r24, Y+2	; 0x02
 8d4:	80 83       	st	Z, r24
        timer2_toggle_count = toggle_count;
 8d6:	8e 81       	ldd	r24, Y+6	; 0x06
 8d8:	9f 81       	ldd	r25, Y+7	; 0x07
 8da:	a8 85       	ldd	r26, Y+8	; 0x08
 8dc:	b9 85       	ldd	r27, Y+9	; 0x09
 8de:	80 93 00 00 	sts	0x0000, r24
 8e2:	90 93 00 00 	sts	0x0000, r25
 8e6:	a0 93 00 00 	sts	0x0000, r26
 8ea:	b0 93 00 00 	sts	0x0000, r27
        bitWrite(TIMSK2, OCIE2A, 1);
 8ee:	a0 e7       	ldi	r26, 0x70	; 112
 8f0:	b0 e0       	ldi	r27, 0x00	; 0
 8f2:	e0 e7       	ldi	r30, 0x70	; 112
 8f4:	f0 e0       	ldi	r31, 0x00	; 0
 8f6:	80 81       	ld	r24, Z
 8f8:	82 60       	ori	r24, 0x02	; 2
 8fa:	8c 93       	st	X, r24
        break;
#endif

    }
  }
}
 8fc:	66 96       	adiw	r28, 0x16	; 22
 8fe:	0f b6       	in	r0, 0x3f	; 63
 900:	f8 94       	cli
 902:	de bf       	out	0x3e, r29	; 62
 904:	0f be       	out	0x3f, r0	; 63
 906:	cd bf       	out	0x3d, r28	; 61
 908:	cf 91       	pop	r28
 90a:	df 91       	pop	r29
 90c:	08 95       	ret

WInterrupts.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001fa  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00000000  00000000  0000022e  2**0
                  ALLOC
  3 .stab         00000630  00000000  00000000  00000230  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000bbe  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <attachInterrupt>:
#if defined(__AVR_ATmega8__)
#define EICRA MCUCR
#define EIMSK GICR
#endif

void attachInterrupt(uint8_t interruptNum, void (*userFunc)(void), int mode) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	27 97       	sbiw	r28, 0x07	; 7
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 83       	std	Y+1, r24	; 0x01
  16:	7b 83       	std	Y+3, r23	; 0x03
  18:	6a 83       	std	Y+2, r22	; 0x02
  1a:	5d 83       	std	Y+5, r21	; 0x05
  1c:	4c 83       	std	Y+4, r20	; 0x04
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  1e:	89 81       	ldd	r24, Y+1	; 0x01
  20:	82 30       	cpi	r24, 0x02	; 2
  22:	00 f0       	brcs	.+0      	; 0x24 <attachInterrupt+0x24>
  24:	00 c0       	rjmp	.+0      	; 0x26 <attachInterrupt+0x26>
    intFunc[interruptNum] = userFunc;
  26:	89 81       	ldd	r24, Y+1	; 0x01
  28:	88 2f       	mov	r24, r24
  2a:	90 e0       	ldi	r25, 0x00	; 0
  2c:	88 0f       	add	r24, r24
  2e:	99 1f       	adc	r25, r25
  30:	fc 01       	movw	r30, r24
  32:	e0 50       	subi	r30, 0x00	; 0
  34:	f0 40       	sbci	r31, 0x00	; 0
  36:	8a 81       	ldd	r24, Y+2	; 0x02
  38:	9b 81       	ldd	r25, Y+3	; 0x03
  3a:	91 83       	std	Z+1, r25	; 0x01
  3c:	80 83       	st	Z, r24
    // to the configuration bits in the hardware register, so we simply shift
    // the mode into place.
      
    // Enable the interrupt.
      
    switch (interruptNum) {
  3e:	89 81       	ldd	r24, Y+1	; 0x01
  40:	28 2f       	mov	r18, r24
  42:	30 e0       	ldi	r19, 0x00	; 0
  44:	3f 83       	std	Y+7, r19	; 0x07
  46:	2e 83       	std	Y+6, r18	; 0x06
  48:	8e 81       	ldd	r24, Y+6	; 0x06
  4a:	9f 81       	ldd	r25, Y+7	; 0x07
  4c:	00 97       	sbiw	r24, 0x00	; 0
  4e:	01 f0       	breq	.+0      	; 0x50 <attachInterrupt+0x50>
  50:	2e 81       	ldd	r18, Y+6	; 0x06
  52:	3f 81       	ldd	r19, Y+7	; 0x07
  54:	21 30       	cpi	r18, 0x01	; 1
  56:	31 05       	cpc	r19, r1
  58:	01 f0       	breq	.+0      	; 0x5a <attachInterrupt+0x5a>
  5a:	00 c0       	rjmp	.+0      	; 0x5c <attachInterrupt+0x5c>
      EICRB = (EICRB & ~((1 << ISC70) | (1 << ISC71))) | (mode << ISC70);
      EIMSK |= (1 << INT7);
      break;
#else
    case 0:
      EICRA = (EICRA & ~((1 << ISC00) | (1 << ISC01))) | (mode << ISC00);
  5c:	a9 e6       	ldi	r26, 0x69	; 105
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	e9 e6       	ldi	r30, 0x69	; 105
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	98 2f       	mov	r25, r24
  68:	9c 7f       	andi	r25, 0xFC	; 252
  6a:	8c 81       	ldd	r24, Y+4	; 0x04
  6c:	89 2b       	or	r24, r25
  6e:	8c 93       	st	X, r24
      EIMSK |= (1 << INT0);
  70:	ad e3       	ldi	r26, 0x3D	; 61
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ed e3       	ldi	r30, 0x3D	; 61
  76:	f0 e0       	ldi	r31, 0x00	; 0
  78:	80 81       	ld	r24, Z
  7a:	81 60       	ori	r24, 0x01	; 1
  7c:	8c 93       	st	X, r24
  7e:	00 c0       	rjmp	.+0      	; 0x80 <attachInterrupt+0x80>
      break;
    case 1:
      EICRA = (EICRA & ~((1 << ISC10) | (1 << ISC11))) | (mode << ISC10);
  80:	a9 e6       	ldi	r26, 0x69	; 105
  82:	b0 e0       	ldi	r27, 0x00	; 0
  84:	e9 e6       	ldi	r30, 0x69	; 105
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	28 2f       	mov	r18, r24
  8c:	23 7f       	andi	r18, 0xF3	; 243
  8e:	8c 81       	ldd	r24, Y+4	; 0x04
  90:	9d 81       	ldd	r25, Y+5	; 0x05
  92:	88 0f       	add	r24, r24
  94:	99 1f       	adc	r25, r25
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	82 2b       	or	r24, r18
  9c:	8c 93       	st	X, r24
      EIMSK |= (1 << INT1);
  9e:	ad e3       	ldi	r26, 0x3D	; 61
  a0:	b0 e0       	ldi	r27, 0x00	; 0
  a2:	ed e3       	ldi	r30, 0x3D	; 61
  a4:	f0 e0       	ldi	r31, 0x00	; 0
  a6:	80 81       	ld	r24, Z
  a8:	82 60       	ori	r24, 0x02	; 2
  aa:	8c 93       	st	X, r24
      break;
#endif
    }
  }
}
  ac:	27 96       	adiw	r28, 0x07	; 7
  ae:	0f b6       	in	r0, 0x3f	; 63
  b0:	f8 94       	cli
  b2:	de bf       	out	0x3e, r29	; 62
  b4:	0f be       	out	0x3f, r0	; 63
  b6:	cd bf       	out	0x3d, r28	; 61
  b8:	cf 91       	pop	r28
  ba:	df 91       	pop	r29
  bc:	08 95       	ret

000000be <detachInterrupt>:

void detachInterrupt(uint8_t interruptNum) {
  be:	df 93       	push	r29
  c0:	cf 93       	push	r28
  c2:	00 d0       	rcall	.+0      	; 0xc4 <detachInterrupt+0x6>
  c4:	0f 92       	push	r0
  c6:	cd b7       	in	r28, 0x3d	; 61
  c8:	de b7       	in	r29, 0x3e	; 62
  ca:	89 83       	std	Y+1, r24	; 0x01
  if(interruptNum < EXTERNAL_NUM_INTERRUPTS) {
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	82 30       	cpi	r24, 0x02	; 2
  d0:	00 f4       	brcc	.+0      	; 0xd2 <detachInterrupt+0x14>
    // Disable the interrupt.  (We can't assume that interruptNum is equal
    // to the number of the EIMSK bit to clear, as this isn't true on the 
    // ATmega8.  There, INT0 is 6 and INT1 is 7.)
    switch (interruptNum) {
  d2:	89 81       	ldd	r24, Y+1	; 0x01
  d4:	28 2f       	mov	r18, r24
  d6:	30 e0       	ldi	r19, 0x00	; 0
  d8:	3b 83       	std	Y+3, r19	; 0x03
  da:	2a 83       	std	Y+2, r18	; 0x02
  dc:	8a 81       	ldd	r24, Y+2	; 0x02
  de:	9b 81       	ldd	r25, Y+3	; 0x03
  e0:	00 97       	sbiw	r24, 0x00	; 0
  e2:	01 f0       	breq	.+0      	; 0xe4 <detachInterrupt+0x26>
  e4:	2a 81       	ldd	r18, Y+2	; 0x02
  e6:	3b 81       	ldd	r19, Y+3	; 0x03
  e8:	21 30       	cpi	r18, 0x01	; 1
  ea:	31 05       	cpc	r19, r1
  ec:	01 f0       	breq	.+0      	; 0xee <detachInterrupt+0x30>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <detachInterrupt+0x32>
    case 7:
      EIMSK &= ~(1 << INT7);
      break;
#else
    case 0:
      EIMSK &= ~(1 << INT0);
  f0:	ad e3       	ldi	r26, 0x3D	; 61
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	ed e3       	ldi	r30, 0x3D	; 61
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	8e 7f       	andi	r24, 0xFE	; 254
  fc:	8c 93       	st	X, r24
  fe:	00 c0       	rjmp	.+0      	; 0x100 <detachInterrupt+0x42>
      break;
    case 1:
      EIMSK &= ~(1 << INT1);
 100:	ad e3       	ldi	r26, 0x3D	; 61
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	ed e3       	ldi	r30, 0x3D	; 61
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8d 7f       	andi	r24, 0xFD	; 253
 10c:	8c 93       	st	X, r24
      break;
#endif
    }
      
    intFunc[interruptNum] = 0;
 10e:	89 81       	ldd	r24, Y+1	; 0x01
 110:	88 2f       	mov	r24, r24
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	fc 01       	movw	r30, r24
 11a:	e0 50       	subi	r30, 0x00	; 0
 11c:	f0 40       	sbci	r31, 0x00	; 0
 11e:	11 82       	std	Z+1, r1	; 0x01
 120:	10 82       	st	Z, r1
  }
}
 122:	0f 90       	pop	r0
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	cf 91       	pop	r28
 12a:	df 91       	pop	r29
 12c:	08 95       	ret

0000012e <__vector_1>:
    intFunc[EXTERNAL_INT_7]();
}

#else

SIGNAL(INT0_vect) {
 12e:	1f 92       	push	r1
 130:	0f 92       	push	r0
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	0f 92       	push	r0
 136:	11 24       	eor	r1, r1
 138:	2f 93       	push	r18
 13a:	3f 93       	push	r19
 13c:	4f 93       	push	r20
 13e:	5f 93       	push	r21
 140:	6f 93       	push	r22
 142:	7f 93       	push	r23
 144:	8f 93       	push	r24
 146:	9f 93       	push	r25
 148:	af 93       	push	r26
 14a:	bf 93       	push	r27
 14c:	ef 93       	push	r30
 14e:	ff 93       	push	r31
 150:	df 93       	push	r29
 152:	cf 93       	push	r28
 154:	cd b7       	in	r28, 0x3d	; 61
 156:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_0])
 158:	80 91 00 00 	lds	r24, 0x0000
 15c:	90 91 00 00 	lds	r25, 0x0000
 160:	00 97       	sbiw	r24, 0x00	; 0
 162:	01 f0       	breq	.+0      	; 0x164 <__vector_1+0x36>
    intFunc[EXTERNAL_INT_0]();
 164:	e0 91 00 00 	lds	r30, 0x0000
 168:	f0 91 00 00 	lds	r31, 0x0000
 16c:	09 95       	icall
}
 16e:	cf 91       	pop	r28
 170:	df 91       	pop	r29
 172:	ff 91       	pop	r31
 174:	ef 91       	pop	r30
 176:	bf 91       	pop	r27
 178:	af 91       	pop	r26
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	7f 91       	pop	r23
 180:	6f 91       	pop	r22
 182:	5f 91       	pop	r21
 184:	4f 91       	pop	r20
 186:	3f 91       	pop	r19
 188:	2f 91       	pop	r18
 18a:	0f 90       	pop	r0
 18c:	0f be       	out	0x3f, r0	; 63
 18e:	0f 90       	pop	r0
 190:	1f 90       	pop	r1
 192:	18 95       	reti

00000194 <__vector_2>:

SIGNAL(INT1_vect) {
 194:	1f 92       	push	r1
 196:	0f 92       	push	r0
 198:	0f b6       	in	r0, 0x3f	; 63
 19a:	0f 92       	push	r0
 19c:	11 24       	eor	r1, r1
 19e:	2f 93       	push	r18
 1a0:	3f 93       	push	r19
 1a2:	4f 93       	push	r20
 1a4:	5f 93       	push	r21
 1a6:	6f 93       	push	r22
 1a8:	7f 93       	push	r23
 1aa:	8f 93       	push	r24
 1ac:	9f 93       	push	r25
 1ae:	af 93       	push	r26
 1b0:	bf 93       	push	r27
 1b2:	ef 93       	push	r30
 1b4:	ff 93       	push	r31
 1b6:	df 93       	push	r29
 1b8:	cf 93       	push	r28
 1ba:	cd b7       	in	r28, 0x3d	; 61
 1bc:	de b7       	in	r29, 0x3e	; 62
  if(intFunc[EXTERNAL_INT_1])
 1be:	80 91 00 00 	lds	r24, 0x0000
 1c2:	90 91 00 00 	lds	r25, 0x0000
 1c6:	00 97       	sbiw	r24, 0x00	; 0
 1c8:	01 f0       	breq	.+0      	; 0x1ca <__vector_2+0x36>
    intFunc[EXTERNAL_INT_1]();
 1ca:	e0 91 00 00 	lds	r30, 0x0000
 1ce:	f0 91 00 00 	lds	r31, 0x0000
 1d2:	09 95       	icall
}
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	ff 91       	pop	r31
 1da:	ef 91       	pop	r30
 1dc:	bf 91       	pop	r27
 1de:	af 91       	pop	r26
 1e0:	9f 91       	pop	r25
 1e2:	8f 91       	pop	r24
 1e4:	7f 91       	pop	r23
 1e6:	6f 91       	pop	r22
 1e8:	5f 91       	pop	r21
 1ea:	4f 91       	pop	r20
 1ec:	3f 91       	pop	r19
 1ee:	2f 91       	pop	r18
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

WMath.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002aa  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000002de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002de  2**0
                  ALLOC
  3 .stab         000003d8  00000000  00000000  000002e0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      000005c0  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_Z3maplllll>:
  }
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
   0:	af 92       	push	r10
   2:	bf 92       	push	r11
   4:	cf 92       	push	r12
   6:	df 92       	push	r13
   8:	ef 92       	push	r14
   a:	ff 92       	push	r15
   c:	0f 93       	push	r16
   e:	1f 93       	push	r17
  10:	df 93       	push	r29
  12:	cf 93       	push	r28
  14:	cd b7       	in	r28, 0x3d	; 61
  16:	de b7       	in	r29, 0x3e	; 62
  18:	60 97       	sbiw	r28, 0x10	; 16
  1a:	0f b6       	in	r0, 0x3f	; 63
  1c:	f8 94       	cli
  1e:	de bf       	out	0x3e, r29	; 62
  20:	0f be       	out	0x3f, r0	; 63
  22:	cd bf       	out	0x3d, r28	; 61
  24:	69 83       	std	Y+1, r22	; 0x01
  26:	7a 83       	std	Y+2, r23	; 0x02
  28:	8b 83       	std	Y+3, r24	; 0x03
  2a:	9c 83       	std	Y+4, r25	; 0x04
  2c:	2d 83       	std	Y+5, r18	; 0x05
  2e:	3e 83       	std	Y+6, r19	; 0x06
  30:	4f 83       	std	Y+7, r20	; 0x07
  32:	58 87       	std	Y+8, r21	; 0x08
  34:	e9 86       	std	Y+9, r14	; 0x09
  36:	fa 86       	std	Y+10, r15	; 0x0a
  38:	0b 87       	std	Y+11, r16	; 0x0b
  3a:	1c 87       	std	Y+12, r17	; 0x0c
  3c:	ad 86       	std	Y+13, r10	; 0x0d
  3e:	be 86       	std	Y+14, r11	; 0x0e
  40:	cf 86       	std	Y+15, r12	; 0x0f
  42:	d8 8a       	std	Y+16, r13	; 0x10
{
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
  44:	29 81       	ldd	r18, Y+1	; 0x01
  46:	3a 81       	ldd	r19, Y+2	; 0x02
  48:	4b 81       	ldd	r20, Y+3	; 0x03
  4a:	5c 81       	ldd	r21, Y+4	; 0x04
  4c:	8d 81       	ldd	r24, Y+5	; 0x05
  4e:	9e 81       	ldd	r25, Y+6	; 0x06
  50:	af 81       	ldd	r26, Y+7	; 0x07
  52:	b8 85       	ldd	r27, Y+8	; 0x08
  54:	79 01       	movw	r14, r18
  56:	8a 01       	movw	r16, r20
  58:	e8 1a       	sub	r14, r24
  5a:	f9 0a       	sbc	r15, r25
  5c:	0a 0b       	sbc	r16, r26
  5e:	1b 0b       	sbc	r17, r27
  60:	2d 8d       	ldd	r18, Y+29	; 0x1d
  62:	3e 8d       	ldd	r19, Y+30	; 0x1e
  64:	4f 8d       	ldd	r20, Y+31	; 0x1f
  66:	58 a1       	ldd	r21, Y+32	; 0x20
  68:	8d 85       	ldd	r24, Y+13	; 0x0d
  6a:	9e 85       	ldd	r25, Y+14	; 0x0e
  6c:	af 85       	ldd	r26, Y+15	; 0x0f
  6e:	b8 89       	ldd	r27, Y+16	; 0x10
  70:	28 1b       	sub	r18, r24
  72:	39 0b       	sbc	r19, r25
  74:	4a 0b       	sbc	r20, r26
  76:	5b 0b       	sbc	r21, r27
  78:	c8 01       	movw	r24, r16
  7a:	b7 01       	movw	r22, r14
  7c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  80:	7b 01       	movw	r14, r22
  82:	8c 01       	movw	r16, r24
  84:	29 85       	ldd	r18, Y+9	; 0x09
  86:	3a 85       	ldd	r19, Y+10	; 0x0a
  88:	4b 85       	ldd	r20, Y+11	; 0x0b
  8a:	5c 85       	ldd	r21, Y+12	; 0x0c
  8c:	8d 81       	ldd	r24, Y+5	; 0x05
  8e:	9e 81       	ldd	r25, Y+6	; 0x06
  90:	af 81       	ldd	r26, Y+7	; 0x07
  92:	b8 85       	ldd	r27, Y+8	; 0x08
  94:	28 1b       	sub	r18, r24
  96:	39 0b       	sbc	r19, r25
  98:	4a 0b       	sbc	r20, r26
  9a:	5b 0b       	sbc	r21, r27
  9c:	c8 01       	movw	r24, r16
  9e:	b7 01       	movw	r22, r14
  a0:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  a4:	da 01       	movw	r26, r20
  a6:	c9 01       	movw	r24, r18
  a8:	9c 01       	movw	r18, r24
  aa:	ad 01       	movw	r20, r26
  ac:	8d 85       	ldd	r24, Y+13	; 0x0d
  ae:	9e 85       	ldd	r25, Y+14	; 0x0e
  b0:	af 85       	ldd	r26, Y+15	; 0x0f
  b2:	b8 89       	ldd	r27, Y+16	; 0x10
  b4:	82 0f       	add	r24, r18
  b6:	93 1f       	adc	r25, r19
  b8:	a4 1f       	adc	r26, r20
  ba:	b5 1f       	adc	r27, r21
}
  bc:	bc 01       	movw	r22, r24
  be:	cd 01       	movw	r24, r26
  c0:	60 96       	adiw	r28, 0x10	; 16
  c2:	0f b6       	in	r0, 0x3f	; 63
  c4:	f8 94       	cli
  c6:	de bf       	out	0x3e, r29	; 62
  c8:	0f be       	out	0x3f, r0	; 63
  ca:	cd bf       	out	0x3d, r28	; 61
  cc:	cf 91       	pop	r28
  ce:	df 91       	pop	r29
  d0:	1f 91       	pop	r17
  d2:	0f 91       	pop	r16
  d4:	ff 90       	pop	r15
  d6:	ef 90       	pop	r14
  d8:	df 90       	pop	r13
  da:	cf 90       	pop	r12
  dc:	bf 90       	pop	r11
  de:	af 90       	pop	r10
  e0:	08 95       	ret

000000e2 <_Z8makeWordj>:

unsigned int makeWord(unsigned int w) { return w; }
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	00 d0       	rcall	.+0      	; 0xe8 <_Z8makeWordj+0x6>
  e8:	cd b7       	in	r28, 0x3d	; 61
  ea:	de b7       	in	r29, 0x3e	; 62
  ec:	9a 83       	std	Y+2, r25	; 0x02
  ee:	89 83       	std	Y+1, r24	; 0x01
  f0:	89 81       	ldd	r24, Y+1	; 0x01
  f2:	9a 81       	ldd	r25, Y+2	; 0x02
  f4:	0f 90       	pop	r0
  f6:	0f 90       	pop	r0
  f8:	cf 91       	pop	r28
  fa:	df 91       	pop	r29
  fc:	08 95       	ret

000000fe <_Z8makeWordhh>:
  fe:	df 93       	push	r29
 100:	cf 93       	push	r28
 102:	00 d0       	rcall	.+0      	; 0x104 <_Z8makeWordhh+0x6>
 104:	cd b7       	in	r28, 0x3d	; 61
 106:	de b7       	in	r29, 0x3e	; 62
 108:	89 83       	std	Y+1, r24	; 0x01
 10a:	6a 83       	std	Y+2, r22	; 0x02
 10c:	89 81       	ldd	r24, Y+1	; 0x01
 10e:	88 2f       	mov	r24, r24
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	38 2f       	mov	r19, r24
 114:	22 27       	eor	r18, r18
 116:	8a 81       	ldd	r24, Y+2	; 0x02
 118:	88 2f       	mov	r24, r24
 11a:	90 e0       	ldi	r25, 0x00	; 0
 11c:	82 2b       	or	r24, r18
 11e:	93 2b       	or	r25, r19
 120:	0f 90       	pop	r0
 122:	0f 90       	pop	r0
 124:	cf 91       	pop	r28
 126:	df 91       	pop	r29
 128:	08 95       	ret

0000012a <_Z6randoml>:
  if (seed != 0) {
    srandom(seed);
  }
}

long random(long howbig)
 12a:	df 93       	push	r29
 12c:	cf 93       	push	r28
 12e:	cd b7       	in	r28, 0x3d	; 61
 130:	de b7       	in	r29, 0x3e	; 62
 132:	28 97       	sbiw	r28, 0x08	; 8
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	f8 94       	cli
 138:	de bf       	out	0x3e, r29	; 62
 13a:	0f be       	out	0x3f, r0	; 63
 13c:	cd bf       	out	0x3d, r28	; 61
 13e:	69 83       	std	Y+1, r22	; 0x01
 140:	7a 83       	std	Y+2, r23	; 0x02
 142:	8b 83       	std	Y+3, r24	; 0x03
 144:	9c 83       	std	Y+4, r25	; 0x04
{
  if (howbig == 0) {
 146:	89 81       	ldd	r24, Y+1	; 0x01
 148:	9a 81       	ldd	r25, Y+2	; 0x02
 14a:	ab 81       	ldd	r26, Y+3	; 0x03
 14c:	bc 81       	ldd	r27, Y+4	; 0x04
 14e:	00 97       	sbiw	r24, 0x00	; 0
 150:	a1 05       	cpc	r26, r1
 152:	b1 05       	cpc	r27, r1
 154:	01 f4       	brne	.+0      	; 0x156 <_Z6randoml+0x2c>
    return 0;
 156:	1d 82       	std	Y+5, r1	; 0x05
 158:	1e 82       	std	Y+6, r1	; 0x06
 15a:	1f 82       	std	Y+7, r1	; 0x07
 15c:	18 86       	std	Y+8, r1	; 0x08
 15e:	00 c0       	rjmp	.+0      	; 0x160 <_Z6randoml+0x36>
  }
  return random() % howbig;
 160:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 164:	dc 01       	movw	r26, r24
 166:	cb 01       	movw	r24, r22
 168:	29 81       	ldd	r18, Y+1	; 0x01
 16a:	3a 81       	ldd	r19, Y+2	; 0x02
 16c:	4b 81       	ldd	r20, Y+3	; 0x03
 16e:	5c 81       	ldd	r21, Y+4	; 0x04
 170:	bc 01       	movw	r22, r24
 172:	cd 01       	movw	r24, r26
 174:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 178:	dc 01       	movw	r26, r24
 17a:	cb 01       	movw	r24, r22
 17c:	8d 83       	std	Y+5, r24	; 0x05
 17e:	9e 83       	std	Y+6, r25	; 0x06
 180:	af 83       	std	Y+7, r26	; 0x07
 182:	b8 87       	std	Y+8, r27	; 0x08
 184:	8d 81       	ldd	r24, Y+5	; 0x05
 186:	9e 81       	ldd	r25, Y+6	; 0x06
 188:	af 81       	ldd	r26, Y+7	; 0x07
 18a:	b8 85       	ldd	r27, Y+8	; 0x08
}
 18c:	bc 01       	movw	r22, r24
 18e:	cd 01       	movw	r24, r26
 190:	28 96       	adiw	r28, 0x08	; 8
 192:	0f b6       	in	r0, 0x3f	; 63
 194:	f8 94       	cli
 196:	de bf       	out	0x3e, r29	; 62
 198:	0f be       	out	0x3f, r0	; 63
 19a:	cd bf       	out	0x3d, r28	; 61
 19c:	cf 91       	pop	r28
 19e:	df 91       	pop	r29
 1a0:	08 95       	ret

000001a2 <_Z6randomll>:

long random(long howsmall, long howbig)
 1a2:	ef 92       	push	r14
 1a4:	ff 92       	push	r15
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	df 93       	push	r29
 1ac:	cf 93       	push	r28
 1ae:	cd b7       	in	r28, 0x3d	; 61
 1b0:	de b7       	in	r29, 0x3e	; 62
 1b2:	60 97       	sbiw	r28, 0x10	; 16
 1b4:	0f b6       	in	r0, 0x3f	; 63
 1b6:	f8 94       	cli
 1b8:	de bf       	out	0x3e, r29	; 62
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	cd bf       	out	0x3d, r28	; 61
 1be:	6d 83       	std	Y+5, r22	; 0x05
 1c0:	7e 83       	std	Y+6, r23	; 0x06
 1c2:	8f 83       	std	Y+7, r24	; 0x07
 1c4:	98 87       	std	Y+8, r25	; 0x08
 1c6:	29 87       	std	Y+9, r18	; 0x09
 1c8:	3a 87       	std	Y+10, r19	; 0x0a
 1ca:	4b 87       	std	Y+11, r20	; 0x0b
 1cc:	5c 87       	std	Y+12, r21	; 0x0c
{
  if (howsmall >= howbig) {
 1ce:	2d 81       	ldd	r18, Y+5	; 0x05
 1d0:	3e 81       	ldd	r19, Y+6	; 0x06
 1d2:	4f 81       	ldd	r20, Y+7	; 0x07
 1d4:	58 85       	ldd	r21, Y+8	; 0x08
 1d6:	89 85       	ldd	r24, Y+9	; 0x09
 1d8:	9a 85       	ldd	r25, Y+10	; 0x0a
 1da:	ab 85       	ldd	r26, Y+11	; 0x0b
 1dc:	bc 85       	ldd	r27, Y+12	; 0x0c
 1de:	28 17       	cp	r18, r24
 1e0:	39 07       	cpc	r19, r25
 1e2:	4a 07       	cpc	r20, r26
 1e4:	5b 07       	cpc	r21, r27
 1e6:	04 f0       	brlt	.+0      	; 0x1e8 <_Z6randomll+0x46>
    return howsmall;
 1e8:	ed 80       	ldd	r14, Y+5	; 0x05
 1ea:	fe 80       	ldd	r15, Y+6	; 0x06
 1ec:	0f 81       	ldd	r16, Y+7	; 0x07
 1ee:	18 85       	ldd	r17, Y+8	; 0x08
 1f0:	ed 86       	std	Y+13, r14	; 0x0d
 1f2:	fe 86       	std	Y+14, r15	; 0x0e
 1f4:	0f 87       	std	Y+15, r16	; 0x0f
 1f6:	18 8b       	std	Y+16, r17	; 0x10
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z6randomll+0x58>
  }
  long diff = howbig - howsmall;
 1fa:	29 85       	ldd	r18, Y+9	; 0x09
 1fc:	3a 85       	ldd	r19, Y+10	; 0x0a
 1fe:	4b 85       	ldd	r20, Y+11	; 0x0b
 200:	5c 85       	ldd	r21, Y+12	; 0x0c
 202:	8d 81       	ldd	r24, Y+5	; 0x05
 204:	9e 81       	ldd	r25, Y+6	; 0x06
 206:	af 81       	ldd	r26, Y+7	; 0x07
 208:	b8 85       	ldd	r27, Y+8	; 0x08
 20a:	79 01       	movw	r14, r18
 20c:	8a 01       	movw	r16, r20
 20e:	e8 1a       	sub	r14, r24
 210:	f9 0a       	sbc	r15, r25
 212:	0a 0b       	sbc	r16, r26
 214:	1b 0b       	sbc	r17, r27
 216:	d8 01       	movw	r26, r16
 218:	c7 01       	movw	r24, r14
 21a:	89 83       	std	Y+1, r24	; 0x01
 21c:	9a 83       	std	Y+2, r25	; 0x02
 21e:	ab 83       	std	Y+3, r26	; 0x03
 220:	bc 83       	std	Y+4, r27	; 0x04
  return random(diff) + howsmall;
 222:	89 81       	ldd	r24, Y+1	; 0x01
 224:	9a 81       	ldd	r25, Y+2	; 0x02
 226:	ab 81       	ldd	r26, Y+3	; 0x03
 228:	bc 81       	ldd	r27, Y+4	; 0x04
 22a:	bc 01       	movw	r22, r24
 22c:	cd 01       	movw	r24, r26
 22e:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
 232:	9b 01       	movw	r18, r22
 234:	ac 01       	movw	r20, r24
 236:	8d 81       	ldd	r24, Y+5	; 0x05
 238:	9e 81       	ldd	r25, Y+6	; 0x06
 23a:	af 81       	ldd	r26, Y+7	; 0x07
 23c:	b8 85       	ldd	r27, Y+8	; 0x08
 23e:	79 01       	movw	r14, r18
 240:	8a 01       	movw	r16, r20
 242:	e8 0e       	add	r14, r24
 244:	f9 1e       	adc	r15, r25
 246:	0a 1f       	adc	r16, r26
 248:	1b 1f       	adc	r17, r27
 24a:	ed 86       	std	Y+13, r14	; 0x0d
 24c:	fe 86       	std	Y+14, r15	; 0x0e
 24e:	0f 87       	std	Y+15, r16	; 0x0f
 250:	18 8b       	std	Y+16, r17	; 0x10
 252:	8d 85       	ldd	r24, Y+13	; 0x0d
 254:	9e 85       	ldd	r25, Y+14	; 0x0e
 256:	af 85       	ldd	r26, Y+15	; 0x0f
 258:	b8 89       	ldd	r27, Y+16	; 0x10
}
 25a:	bc 01       	movw	r22, r24
 25c:	cd 01       	movw	r24, r26
 25e:	60 96       	adiw	r28, 0x10	; 16
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	1f 91       	pop	r17
 270:	0f 91       	pop	r16
 272:	ff 90       	pop	r15
 274:	ef 90       	pop	r14
 276:	08 95       	ret

00000278 <_Z10randomSeedj>:

extern "C" {
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
 278:	df 93       	push	r29
 27a:	cf 93       	push	r28
 27c:	00 d0       	rcall	.+0      	; 0x27e <_Z10randomSeedj+0x6>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
 282:	9a 83       	std	Y+2, r25	; 0x02
 284:	89 83       	std	Y+1, r24	; 0x01
{
  if (seed != 0) {
 286:	89 81       	ldd	r24, Y+1	; 0x01
 288:	9a 81       	ldd	r25, Y+2	; 0x02
 28a:	00 97       	sbiw	r24, 0x00	; 0
 28c:	01 f0       	breq	.+0      	; 0x28e <_Z10randomSeedj+0x16>
    srandom(seed);
 28e:	89 81       	ldd	r24, Y+1	; 0x01
 290:	9a 81       	ldd	r25, Y+2	; 0x02
 292:	cc 01       	movw	r24, r24
 294:	a0 e0       	ldi	r26, 0x00	; 0
 296:	b0 e0       	ldi	r27, 0x00	; 0
 298:	bc 01       	movw	r22, r24
 29a:	cd 01       	movw	r24, r26
 29c:	0e 94 00 00 	call	0	; 0x0 <_Z3maplllll>
  }
}
 2a0:	0f 90       	pop	r0
 2a2:	0f 90       	pop	r0
 2a4:	cf 91       	pop	r28
 2a6:	df 91       	pop	r29
 2a8:	08 95       	ret

WString.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ad8  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000001  00000000  00000000  00001b0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00000000  00000000  00001b0d  2**0
                  ALLOC
  3 .stab         00001fe0  00000000  00000000  00001b10  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00001915  00000000  00000000  00003af0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <_ZNK6String6lengthEv>:
    int	indexOf( const String &str, unsigned int fromIndex ) const;
    int	lastIndexOf( char ch ) const;
    int	lastIndexOf( char ch, unsigned int fromIndex ) const;
    int	lastIndexOf( const String &str ) const;
    int	lastIndexOf( const String &str, unsigned int fromIndex ) const;
    const unsigned int length( ) const { return _length; }
       0:	df 93       	push	r29
       2:	cf 93       	push	r28
       4:	00 d0       	rcall	.+0      	; 0x6 <_ZNK6String6lengthEv+0x6>
       6:	cd b7       	in	r28, 0x3d	; 61
       8:	de b7       	in	r29, 0x3e	; 62
       a:	9a 83       	std	Y+2, r25	; 0x02
       c:	89 83       	std	Y+1, r24	; 0x01
       e:	e9 81       	ldd	r30, Y+1	; 0x01
      10:	fa 81       	ldd	r31, Y+2	; 0x02
      12:	84 81       	ldd	r24, Z+4	; 0x04
      14:	95 81       	ldd	r25, Z+5	; 0x05
      16:	0f 90       	pop	r0
      18:	0f 90       	pop	r0
      1a:	cf 91       	pop	r28
      1c:	df 91       	pop	r29
      1e:	08 95       	ret

00000020 <_ZN6String9setCharAtEjc>:
char String::charAt( unsigned int loc ) const
{
  return operator[]( loc );
}

void String::setCharAt( unsigned int loc, const char aChar ) 
      20:	df 93       	push	r29
      22:	cf 93       	push	r28
      24:	00 d0       	rcall	.+0      	; 0x26 <_ZN6String9setCharAtEjc+0x6>
      26:	00 d0       	rcall	.+0      	; 0x28 <_ZN6String9setCharAtEjc+0x8>
      28:	0f 92       	push	r0
      2a:	cd b7       	in	r28, 0x3d	; 61
      2c:	de b7       	in	r29, 0x3e	; 62
      2e:	9a 83       	std	Y+2, r25	; 0x02
      30:	89 83       	std	Y+1, r24	; 0x01
      32:	7c 83       	std	Y+4, r23	; 0x04
      34:	6b 83       	std	Y+3, r22	; 0x03
      36:	4d 83       	std	Y+5, r20	; 0x05
{
  if(_buffer == NULL) return;
      38:	e9 81       	ldd	r30, Y+1	; 0x01
      3a:	fa 81       	ldd	r31, Y+2	; 0x02
      3c:	80 81       	ld	r24, Z
      3e:	91 81       	ldd	r25, Z+1	; 0x01
      40:	00 97       	sbiw	r24, 0x00	; 0
      42:	01 f0       	breq	.+0      	; 0x44 <_ZN6String9setCharAtEjc+0x24>
  if(_length > loc) {
      44:	e9 81       	ldd	r30, Y+1	; 0x01
      46:	fa 81       	ldd	r31, Y+2	; 0x02
      48:	24 81       	ldd	r18, Z+4	; 0x04
      4a:	35 81       	ldd	r19, Z+5	; 0x05
      4c:	8b 81       	ldd	r24, Y+3	; 0x03
      4e:	9c 81       	ldd	r25, Y+4	; 0x04
      50:	82 17       	cp	r24, r18
      52:	93 07       	cpc	r25, r19
      54:	00 f4       	brcc	.+0      	; 0x56 <_ZN6String9setCharAtEjc+0x36>
    _buffer[loc] = aChar;
      56:	e9 81       	ldd	r30, Y+1	; 0x01
      58:	fa 81       	ldd	r31, Y+2	; 0x02
      5a:	20 81       	ld	r18, Z
      5c:	31 81       	ldd	r19, Z+1	; 0x01
      5e:	8b 81       	ldd	r24, Y+3	; 0x03
      60:	9c 81       	ldd	r25, Y+4	; 0x04
      62:	f9 01       	movw	r30, r18
      64:	e8 0f       	add	r30, r24
      66:	f9 1f       	adc	r31, r25
      68:	8d 81       	ldd	r24, Y+5	; 0x05
      6a:	80 83       	st	Z, r24
  }
}
      6c:	0f 90       	pop	r0
      6e:	0f 90       	pop	r0
      70:	0f 90       	pop	r0
      72:	0f 90       	pop	r0
      74:	0f 90       	pop	r0
      76:	cf 91       	pop	r28
      78:	df 91       	pop	r29
      7a:	08 95       	ret

0000007c <_ZN6StringixEj>:
int String::operator>=( const String & rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
}

char & String::operator[]( unsigned int index )
      7c:	df 93       	push	r29
      7e:	cf 93       	push	r28
      80:	00 d0       	rcall	.+0      	; 0x82 <_ZN6StringixEj+0x6>
      82:	00 d0       	rcall	.+0      	; 0x84 <_ZN6StringixEj+0x8>
      84:	00 d0       	rcall	.+0      	; 0x86 <_ZN6StringixEj+0xa>
      86:	cd b7       	in	r28, 0x3d	; 61
      88:	de b7       	in	r29, 0x3e	; 62
      8a:	9a 83       	std	Y+2, r25	; 0x02
      8c:	89 83       	std	Y+1, r24	; 0x01
      8e:	7c 83       	std	Y+4, r23	; 0x04
      90:	6b 83       	std	Y+3, r22	; 0x03
{
  static char dummy_writable_char;
  if (index >= _length || !_buffer) {
      92:	e9 81       	ldd	r30, Y+1	; 0x01
      94:	fa 81       	ldd	r31, Y+2	; 0x02
      96:	24 81       	ldd	r18, Z+4	; 0x04
      98:	35 81       	ldd	r19, Z+5	; 0x05
      9a:	8b 81       	ldd	r24, Y+3	; 0x03
      9c:	9c 81       	ldd	r25, Y+4	; 0x04
      9e:	82 17       	cp	r24, r18
      a0:	93 07       	cpc	r25, r19
      a2:	00 f4       	brcc	.+0      	; 0xa4 <_ZN6StringixEj+0x28>
      a4:	e9 81       	ldd	r30, Y+1	; 0x01
      a6:	fa 81       	ldd	r31, Y+2	; 0x02
      a8:	80 81       	ld	r24, Z
      aa:	91 81       	ldd	r25, Z+1	; 0x01
      ac:	00 97       	sbiw	r24, 0x00	; 0
      ae:	01 f4       	brne	.+0      	; 0xb0 <_ZN6StringixEj+0x34>
    dummy_writable_char = 0;
      b0:	10 92 00 00 	sts	0x0000, r1
    return dummy_writable_char;
      b4:	40 e0       	ldi	r20, 0x00	; 0
      b6:	50 e0       	ldi	r21, 0x00	; 0
      b8:	5e 83       	std	Y+6, r21	; 0x06
      ba:	4d 83       	std	Y+5, r20	; 0x05
      bc:	00 c0       	rjmp	.+0      	; 0xbe <_ZN6StringixEj+0x42>
  }
  return _buffer[ index ];
      be:	e9 81       	ldd	r30, Y+1	; 0x01
      c0:	fa 81       	ldd	r31, Y+2	; 0x02
      c2:	20 81       	ld	r18, Z
      c4:	31 81       	ldd	r19, Z+1	; 0x01
      c6:	8b 81       	ldd	r24, Y+3	; 0x03
      c8:	9c 81       	ldd	r25, Y+4	; 0x04
      ca:	a9 01       	movw	r20, r18
      cc:	48 0f       	add	r20, r24
      ce:	59 1f       	adc	r21, r25
      d0:	5e 83       	std	Y+6, r21	; 0x06
      d2:	4d 83       	std	Y+5, r20	; 0x05
      d4:	8d 81       	ldd	r24, Y+5	; 0x05
      d6:	9e 81       	ldd	r25, Y+6	; 0x06
}
      d8:	26 96       	adiw	r28, 0x06	; 6
      da:	0f b6       	in	r0, 0x3f	; 63
      dc:	f8 94       	cli
      de:	de bf       	out	0x3e, r29	; 62
      e0:	0f be       	out	0x3f, r0	; 63
      e2:	cd bf       	out	0x3d, r28	; 61
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
      ea:	df 93       	push	r29
      ec:	cf 93       	push	r28
      ee:	00 d0       	rcall	.+0      	; 0xf0 <_ZNK6StringixEj+0x6>
      f0:	00 d0       	rcall	.+0      	; 0xf2 <_ZNK6StringixEj+0x8>
      f2:	cd b7       	in	r28, 0x3d	; 61
      f4:	de b7       	in	r29, 0x3e	; 62
      f6:	9a 83       	std	Y+2, r25	; 0x02
      f8:	89 83       	std	Y+1, r24	; 0x01
      fa:	7c 83       	std	Y+4, r23	; 0x04
      fc:	6b 83       	std	Y+3, r22	; 0x03
{
  // need to check for valid index, to do later
  return _buffer[ index ];
      fe:	e9 81       	ldd	r30, Y+1	; 0x01
     100:	fa 81       	ldd	r31, Y+2	; 0x02
     102:	20 81       	ld	r18, Z
     104:	31 81       	ldd	r19, Z+1	; 0x01
     106:	8b 81       	ldd	r24, Y+3	; 0x03
     108:	9c 81       	ldd	r25, Y+4	; 0x04
     10a:	f9 01       	movw	r30, r18
     10c:	e8 0f       	add	r30, r24
     10e:	f9 1f       	adc	r31, r25
     110:	80 81       	ld	r24, Z
}
     112:	0f 90       	pop	r0
     114:	0f 90       	pop	r0
     116:	0f 90       	pop	r0
     118:	0f 90       	pop	r0
     11a:	cf 91       	pop	r28
     11c:	df 91       	pop	r29
     11e:	08 95       	ret

00000120 <_ZNK6String6charAtEj>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

char String::charAt( unsigned int loc ) const
     120:	df 93       	push	r29
     122:	cf 93       	push	r28
     124:	00 d0       	rcall	.+0      	; 0x126 <_ZNK6String6charAtEj+0x6>
     126:	00 d0       	rcall	.+0      	; 0x128 <_ZNK6String6charAtEj+0x8>
     128:	cd b7       	in	r28, 0x3d	; 61
     12a:	de b7       	in	r29, 0x3e	; 62
     12c:	9a 83       	std	Y+2, r25	; 0x02
     12e:	89 83       	std	Y+1, r24	; 0x01
     130:	7c 83       	std	Y+4, r23	; 0x04
     132:	6b 83       	std	Y+3, r22	; 0x03
{
  return operator[]( loc );
     134:	89 81       	ldd	r24, Y+1	; 0x01
     136:	9a 81       	ldd	r25, Y+2	; 0x02
     138:	2b 81       	ldd	r18, Y+3	; 0x03
     13a:	3c 81       	ldd	r19, Y+4	; 0x04
     13c:	b9 01       	movw	r22, r18
     13e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     142:	0f 90       	pop	r0
     144:	0f 90       	pop	r0
     146:	0f 90       	pop	r0
     148:	0f 90       	pop	r0
     14a:	cf 91       	pop	r28
     14c:	df 91       	pop	r29
     14e:	08 95       	ret

00000150 <_ZN6String11toCharArrayEPcj>:
  if (len > _length) len = _length;
  strncpy((char *)buf, _buffer, len);
  buf[len] = 0;
}

void String::toCharArray(char *buf, unsigned int bufsize)
     150:	df 93       	push	r29
     152:	cf 93       	push	r28
     154:	cd b7       	in	r28, 0x3d	; 61
     156:	de b7       	in	r29, 0x3e	; 62
     158:	28 97       	sbiw	r28, 0x08	; 8
     15a:	0f b6       	in	r0, 0x3f	; 63
     15c:	f8 94       	cli
     15e:	de bf       	out	0x3e, r29	; 62
     160:	0f be       	out	0x3f, r0	; 63
     162:	cd bf       	out	0x3d, r28	; 61
     164:	9c 83       	std	Y+4, r25	; 0x04
     166:	8b 83       	std	Y+3, r24	; 0x03
     168:	7e 83       	std	Y+6, r23	; 0x06
     16a:	6d 83       	std	Y+5, r22	; 0x05
     16c:	58 87       	std	Y+8, r21	; 0x08
     16e:	4f 83       	std	Y+7, r20	; 0x07
{
  if (!bufsize || !buf) return;
     170:	8f 81       	ldd	r24, Y+7	; 0x07
     172:	98 85       	ldd	r25, Y+8	; 0x08
     174:	00 97       	sbiw	r24, 0x00	; 0
     176:	01 f0       	breq	.+0      	; 0x178 <_ZN6String11toCharArrayEPcj+0x28>
     178:	8d 81       	ldd	r24, Y+5	; 0x05
     17a:	9e 81       	ldd	r25, Y+6	; 0x06
     17c:	00 97       	sbiw	r24, 0x00	; 0
     17e:	01 f0       	breq	.+0      	; 0x180 <_ZN6String11toCharArrayEPcj+0x30>
  unsigned int len = bufsize - 1;
     180:	8f 81       	ldd	r24, Y+7	; 0x07
     182:	98 85       	ldd	r25, Y+8	; 0x08
     184:	01 97       	sbiw	r24, 0x01	; 1
     186:	9a 83       	std	Y+2, r25	; 0x02
     188:	89 83       	std	Y+1, r24	; 0x01
  if (len > _length) len = _length;
     18a:	eb 81       	ldd	r30, Y+3	; 0x03
     18c:	fc 81       	ldd	r31, Y+4	; 0x04
     18e:	24 81       	ldd	r18, Z+4	; 0x04
     190:	35 81       	ldd	r19, Z+5	; 0x05
     192:	89 81       	ldd	r24, Y+1	; 0x01
     194:	9a 81       	ldd	r25, Y+2	; 0x02
     196:	28 17       	cp	r18, r24
     198:	39 07       	cpc	r19, r25
     19a:	00 f4       	brcc	.+0      	; 0x19c <_ZN6String11toCharArrayEPcj+0x4c>
     19c:	eb 81       	ldd	r30, Y+3	; 0x03
     19e:	fc 81       	ldd	r31, Y+4	; 0x04
     1a0:	84 81       	ldd	r24, Z+4	; 0x04
     1a2:	95 81       	ldd	r25, Z+5	; 0x05
     1a4:	9a 83       	std	Y+2, r25	; 0x02
     1a6:	89 83       	std	Y+1, r24	; 0x01
  strncpy(buf, _buffer, len);
     1a8:	eb 81       	ldd	r30, Y+3	; 0x03
     1aa:	fc 81       	ldd	r31, Y+4	; 0x04
     1ac:	40 81       	ld	r20, Z
     1ae:	51 81       	ldd	r21, Z+1	; 0x01
     1b0:	8d 81       	ldd	r24, Y+5	; 0x05
     1b2:	9e 81       	ldd	r25, Y+6	; 0x06
     1b4:	29 81       	ldd	r18, Y+1	; 0x01
     1b6:	3a 81       	ldd	r19, Y+2	; 0x02
     1b8:	ba 01       	movw	r22, r20
     1ba:	a9 01       	movw	r20, r18
     1bc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  buf[len] = 0;
     1c0:	2d 81       	ldd	r18, Y+5	; 0x05
     1c2:	3e 81       	ldd	r19, Y+6	; 0x06
     1c4:	89 81       	ldd	r24, Y+1	; 0x01
     1c6:	9a 81       	ldd	r25, Y+2	; 0x02
     1c8:	f9 01       	movw	r30, r18
     1ca:	e8 0f       	add	r30, r24
     1cc:	f9 1f       	adc	r31, r25
     1ce:	10 82       	st	Z, r1
}
     1d0:	28 96       	adiw	r28, 0x08	; 8
     1d2:	0f b6       	in	r0, 0x3f	; 63
     1d4:	f8 94       	cli
     1d6:	de bf       	out	0x3e, r29	; 62
     1d8:	0f be       	out	0x3f, r0	; 63
     1da:	cd bf       	out	0x3d, r28	; 61
     1dc:	cf 91       	pop	r28
     1de:	df 91       	pop	r29
     1e0:	08 95       	ret

000001e2 <_ZN6String8getBytesEPhj>:
  }

  return temp.substring( i, j + 1);
}

void String::getBytes(unsigned char *buf, unsigned int bufsize)
     1e2:	df 93       	push	r29
     1e4:	cf 93       	push	r28
     1e6:	cd b7       	in	r28, 0x3d	; 61
     1e8:	de b7       	in	r29, 0x3e	; 62
     1ea:	28 97       	sbiw	r28, 0x08	; 8
     1ec:	0f b6       	in	r0, 0x3f	; 63
     1ee:	f8 94       	cli
     1f0:	de bf       	out	0x3e, r29	; 62
     1f2:	0f be       	out	0x3f, r0	; 63
     1f4:	cd bf       	out	0x3d, r28	; 61
     1f6:	9c 83       	std	Y+4, r25	; 0x04
     1f8:	8b 83       	std	Y+3, r24	; 0x03
     1fa:	7e 83       	std	Y+6, r23	; 0x06
     1fc:	6d 83       	std	Y+5, r22	; 0x05
     1fe:	58 87       	std	Y+8, r21	; 0x08
     200:	4f 83       	std	Y+7, r20	; 0x07
{
  if (!bufsize || !buf) return;
     202:	8f 81       	ldd	r24, Y+7	; 0x07
     204:	98 85       	ldd	r25, Y+8	; 0x08
     206:	00 97       	sbiw	r24, 0x00	; 0
     208:	01 f0       	breq	.+0      	; 0x20a <_ZN6String8getBytesEPhj+0x28>
     20a:	8d 81       	ldd	r24, Y+5	; 0x05
     20c:	9e 81       	ldd	r25, Y+6	; 0x06
     20e:	00 97       	sbiw	r24, 0x00	; 0
     210:	01 f0       	breq	.+0      	; 0x212 <_ZN6String8getBytesEPhj+0x30>
  unsigned int len = bufsize - 1;
     212:	8f 81       	ldd	r24, Y+7	; 0x07
     214:	98 85       	ldd	r25, Y+8	; 0x08
     216:	01 97       	sbiw	r24, 0x01	; 1
     218:	9a 83       	std	Y+2, r25	; 0x02
     21a:	89 83       	std	Y+1, r24	; 0x01
  if (len > _length) len = _length;
     21c:	eb 81       	ldd	r30, Y+3	; 0x03
     21e:	fc 81       	ldd	r31, Y+4	; 0x04
     220:	24 81       	ldd	r18, Z+4	; 0x04
     222:	35 81       	ldd	r19, Z+5	; 0x05
     224:	89 81       	ldd	r24, Y+1	; 0x01
     226:	9a 81       	ldd	r25, Y+2	; 0x02
     228:	28 17       	cp	r18, r24
     22a:	39 07       	cpc	r19, r25
     22c:	00 f4       	brcc	.+0      	; 0x22e <_ZN6String8getBytesEPhj+0x4c>
     22e:	eb 81       	ldd	r30, Y+3	; 0x03
     230:	fc 81       	ldd	r31, Y+4	; 0x04
     232:	84 81       	ldd	r24, Z+4	; 0x04
     234:	95 81       	ldd	r25, Z+5	; 0x05
     236:	9a 83       	std	Y+2, r25	; 0x02
     238:	89 83       	std	Y+1, r24	; 0x01
  strncpy((char *)buf, _buffer, len);
     23a:	eb 81       	ldd	r30, Y+3	; 0x03
     23c:	fc 81       	ldd	r31, Y+4	; 0x04
     23e:	40 81       	ld	r20, Z
     240:	51 81       	ldd	r21, Z+1	; 0x01
     242:	8d 81       	ldd	r24, Y+5	; 0x05
     244:	9e 81       	ldd	r25, Y+6	; 0x06
     246:	29 81       	ldd	r18, Y+1	; 0x01
     248:	3a 81       	ldd	r19, Y+2	; 0x02
     24a:	ba 01       	movw	r22, r20
     24c:	a9 01       	movw	r20, r18
     24e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  buf[len] = 0;
     252:	2d 81       	ldd	r18, Y+5	; 0x05
     254:	3e 81       	ldd	r19, Y+6	; 0x06
     256:	89 81       	ldd	r24, Y+1	; 0x01
     258:	9a 81       	ldd	r25, Y+2	; 0x02
     25a:	f9 01       	movw	r30, r18
     25c:	e8 0f       	add	r30, r24
     25e:	f9 1f       	adc	r31, r25
     260:	10 82       	st	Z, r1
}
     262:	28 96       	adiw	r28, 0x08	; 8
     264:	0f b6       	in	r0, 0x3f	; 63
     266:	f8 94       	cli
     268:	de bf       	out	0x3e, r29	; 62
     26a:	0f be       	out	0x3f, r0	; 63
     26c:	cd bf       	out	0x3d, r28	; 61
     26e:	cf 91       	pop	r28
     270:	df 91       	pop	r29
     272:	08 95       	ret

00000274 <_ZN6StringD1Ev>:
    String( const unsigned char );
    String( const int, const int base=10);
    String( const unsigned int, const int base=10 );
    String( const long, const int base=10 );
    String( const unsigned long, const int base=10 );
    ~String() { free(_buffer); _length = _capacity = 0;}     //added _length = _capacity = 0;
     274:	df 93       	push	r29
     276:	cf 93       	push	r28
     278:	00 d0       	rcall	.+0      	; 0x27a <_ZN6StringD1Ev+0x6>
     27a:	cd b7       	in	r28, 0x3d	; 61
     27c:	de b7       	in	r29, 0x3e	; 62
     27e:	9a 83       	std	Y+2, r25	; 0x02
     280:	89 83       	std	Y+1, r24	; 0x01
     282:	e9 81       	ldd	r30, Y+1	; 0x01
     284:	fa 81       	ldd	r31, Y+2	; 0x02
     286:	80 81       	ld	r24, Z
     288:	91 81       	ldd	r25, Z+1	; 0x01
     28a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     28e:	e9 81       	ldd	r30, Y+1	; 0x01
     290:	fa 81       	ldd	r31, Y+2	; 0x02
     292:	13 82       	std	Z+3, r1	; 0x03
     294:	12 82       	std	Z+2, r1	; 0x02
     296:	e9 81       	ldd	r30, Y+1	; 0x01
     298:	fa 81       	ldd	r31, Y+2	; 0x02
     29a:	82 81       	ldd	r24, Z+2	; 0x02
     29c:	93 81       	ldd	r25, Z+3	; 0x03
     29e:	e9 81       	ldd	r30, Y+1	; 0x01
     2a0:	fa 81       	ldd	r31, Y+2	; 0x02
     2a2:	95 83       	std	Z+5, r25	; 0x05
     2a4:	84 83       	std	Z+4, r24	; 0x04
     2a6:	0f 90       	pop	r0
     2a8:	0f 90       	pop	r0
     2aa:	cf 91       	pop	r28
     2ac:	df 91       	pop	r29
     2ae:	08 95       	ret

000002b0 <_ZNK6String10startsWithERKS_j>:
    return 0;

  return startsWith( s2, 0 );
}

boolean String::startsWith( const String &s2, unsigned int offset ) const
     2b0:	df 93       	push	r29
     2b2:	cf 93       	push	r28
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	27 97       	sbiw	r28, 0x07	; 7
     2ba:	0f b6       	in	r0, 0x3f	; 63
     2bc:	f8 94       	cli
     2be:	de bf       	out	0x3e, r29	; 62
     2c0:	0f be       	out	0x3f, r0	; 63
     2c2:	cd bf       	out	0x3d, r28	; 61
     2c4:	9a 83       	std	Y+2, r25	; 0x02
     2c6:	89 83       	std	Y+1, r24	; 0x01
     2c8:	7c 83       	std	Y+4, r23	; 0x04
     2ca:	6b 83       	std	Y+3, r22	; 0x03
     2cc:	5e 83       	std	Y+6, r21	; 0x06
     2ce:	4d 83       	std	Y+5, r20	; 0x05
{
  if ( offset > _length - s2._length )
     2d0:	e9 81       	ldd	r30, Y+1	; 0x01
     2d2:	fa 81       	ldd	r31, Y+2	; 0x02
     2d4:	24 81       	ldd	r18, Z+4	; 0x04
     2d6:	35 81       	ldd	r19, Z+5	; 0x05
     2d8:	eb 81       	ldd	r30, Y+3	; 0x03
     2da:	fc 81       	ldd	r31, Y+4	; 0x04
     2dc:	84 81       	ldd	r24, Z+4	; 0x04
     2de:	95 81       	ldd	r25, Z+5	; 0x05
     2e0:	28 1b       	sub	r18, r24
     2e2:	39 0b       	sbc	r19, r25
     2e4:	8d 81       	ldd	r24, Y+5	; 0x05
     2e6:	9e 81       	ldd	r25, Y+6	; 0x06
     2e8:	28 17       	cp	r18, r24
     2ea:	39 07       	cpc	r19, r25
     2ec:	00 f4       	brcc	.+0      	; 0x2ee <_ZNK6String10startsWithERKS_j+0x3e>
    return 0;
     2ee:	1f 82       	std	Y+7, r1	; 0x07
     2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <_ZNK6String10startsWithERKS_j+0x42>

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
     2f2:	e9 81       	ldd	r30, Y+1	; 0x01
     2f4:	fa 81       	ldd	r31, Y+2	; 0x02
     2f6:	20 81       	ld	r18, Z
     2f8:	31 81       	ldd	r19, Z+1	; 0x01
     2fa:	8d 81       	ldd	r24, Y+5	; 0x05
     2fc:	9e 81       	ldd	r25, Y+6	; 0x06
     2fe:	82 0f       	add	r24, r18
     300:	93 1f       	adc	r25, r19
     302:	eb 81       	ldd	r30, Y+3	; 0x03
     304:	fc 81       	ldd	r31, Y+4	; 0x04
     306:	40 81       	ld	r20, Z
     308:	51 81       	ldd	r21, Z+1	; 0x01
     30a:	eb 81       	ldd	r30, Y+3	; 0x03
     30c:	fc 81       	ldd	r31, Y+4	; 0x04
     30e:	24 81       	ldd	r18, Z+4	; 0x04
     310:	35 81       	ldd	r19, Z+5	; 0x05
     312:	ba 01       	movw	r22, r20
     314:	a9 01       	movw	r20, r18
     316:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     31a:	1f 82       	std	Y+7, r1	; 0x07
     31c:	00 97       	sbiw	r24, 0x00	; 0
     31e:	01 f4       	brne	.+0      	; 0x320 <_ZNK6String10startsWithERKS_j+0x70>
     320:	81 e0       	ldi	r24, 0x01	; 1
     322:	8f 83       	std	Y+7, r24	; 0x07
     324:	8f 81       	ldd	r24, Y+7	; 0x07
}
     326:	27 96       	adiw	r28, 0x07	; 7
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	f8 94       	cli
     32c:	de bf       	out	0x3e, r29	; 62
     32e:	0f be       	out	0x3f, r0	; 63
     330:	cd bf       	out	0x3d, r28	; 61
     332:	cf 91       	pop	r28
     334:	df 91       	pop	r29
     336:	08 95       	ret

00000338 <_ZNK6String10startsWithERKS_>:
    return i;
  }
  return -1;
}

boolean String::startsWith( const String &s2 ) const
     338:	df 93       	push	r29
     33a:	cf 93       	push	r28
     33c:	00 d0       	rcall	.+0      	; 0x33e <_ZNK6String10startsWithERKS_+0x6>
     33e:	00 d0       	rcall	.+0      	; 0x340 <_ZNK6String10startsWithERKS_+0x8>
     340:	0f 92       	push	r0
     342:	cd b7       	in	r28, 0x3d	; 61
     344:	de b7       	in	r29, 0x3e	; 62
     346:	9a 83       	std	Y+2, r25	; 0x02
     348:	89 83       	std	Y+1, r24	; 0x01
     34a:	7c 83       	std	Y+4, r23	; 0x04
     34c:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( _length < s2._length )
     34e:	e9 81       	ldd	r30, Y+1	; 0x01
     350:	fa 81       	ldd	r31, Y+2	; 0x02
     352:	24 81       	ldd	r18, Z+4	; 0x04
     354:	35 81       	ldd	r19, Z+5	; 0x05
     356:	eb 81       	ldd	r30, Y+3	; 0x03
     358:	fc 81       	ldd	r31, Y+4	; 0x04
     35a:	84 81       	ldd	r24, Z+4	; 0x04
     35c:	95 81       	ldd	r25, Z+5	; 0x05
     35e:	28 17       	cp	r18, r24
     360:	39 07       	cpc	r19, r25
     362:	00 f4       	brcc	.+0      	; 0x364 <_ZNK6String10startsWithERKS_+0x2c>
    return 0;
     364:	1d 82       	std	Y+5, r1	; 0x05
     366:	00 c0       	rjmp	.+0      	; 0x368 <_ZNK6String10startsWithERKS_+0x30>

  return startsWith( s2, 0 );
     368:	89 81       	ldd	r24, Y+1	; 0x01
     36a:	9a 81       	ldd	r25, Y+2	; 0x02
     36c:	2b 81       	ldd	r18, Y+3	; 0x03
     36e:	3c 81       	ldd	r19, Y+4	; 0x04
     370:	b9 01       	movw	r22, r18
     372:	40 e0       	ldi	r20, 0x00	; 0
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     37a:	8d 83       	std	Y+5, r24	; 0x05
     37c:	8d 81       	ldd	r24, Y+5	; 0x05
}
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	0f 90       	pop	r0
     386:	0f 90       	pop	r0
     388:	cf 91       	pop	r28
     38a:	df 91       	pop	r29
     38c:	08 95       	ret

0000038e <_ZNK6String11lastIndexOfEcj>:
int String::lastIndexOf( char theChar ) const
{
  return lastIndexOf( theChar, _length - 1 );
}

int String::lastIndexOf( char ch, unsigned int fromIndex ) const
     38e:	df 93       	push	r29
     390:	cf 93       	push	r28
     392:	cd b7       	in	r28, 0x3d	; 61
     394:	de b7       	in	r29, 0x3e	; 62
     396:	2a 97       	sbiw	r28, 0x0a	; 10
     398:	0f b6       	in	r0, 0x3f	; 63
     39a:	f8 94       	cli
     39c:	de bf       	out	0x3e, r29	; 62
     39e:	0f be       	out	0x3f, r0	; 63
     3a0:	cd bf       	out	0x3d, r28	; 61
     3a2:	9d 83       	std	Y+5, r25	; 0x05
     3a4:	8c 83       	std	Y+4, r24	; 0x04
     3a6:	6e 83       	std	Y+6, r22	; 0x06
     3a8:	58 87       	std	Y+8, r21	; 0x08
     3aa:	4f 83       	std	Y+7, r20	; 0x07
{
  if ( fromIndex >= _length )
     3ac:	ec 81       	ldd	r30, Y+4	; 0x04
     3ae:	fd 81       	ldd	r31, Y+5	; 0x05
     3b0:	24 81       	ldd	r18, Z+4	; 0x04
     3b2:	35 81       	ldd	r19, Z+5	; 0x05
     3b4:	8f 81       	ldd	r24, Y+7	; 0x07
     3b6:	98 85       	ldd	r25, Y+8	; 0x08
     3b8:	82 17       	cp	r24, r18
     3ba:	93 07       	cpc	r25, r19
     3bc:	00 f0       	brcs	.+0      	; 0x3be <_ZNK6String11lastIndexOfEcj+0x30>
    return -1;
     3be:	4f ef       	ldi	r20, 0xFF	; 255
     3c0:	5f ef       	ldi	r21, 0xFF	; 255
     3c2:	5a 87       	std	Y+10, r21	; 0x0a
     3c4:	49 87       	std	Y+9, r20	; 0x09
     3c6:	00 c0       	rjmp	.+0      	; 0x3c8 <_ZNK6String11lastIndexOfEcj+0x3a>

  char tempchar = _buffer[fromIndex + 1];
     3c8:	ec 81       	ldd	r30, Y+4	; 0x04
     3ca:	fd 81       	ldd	r31, Y+5	; 0x05
     3cc:	20 81       	ld	r18, Z
     3ce:	31 81       	ldd	r19, Z+1	; 0x01
     3d0:	8f 81       	ldd	r24, Y+7	; 0x07
     3d2:	98 85       	ldd	r25, Y+8	; 0x08
     3d4:	01 96       	adiw	r24, 0x01	; 1
     3d6:	f9 01       	movw	r30, r18
     3d8:	e8 0f       	add	r30, r24
     3da:	f9 1f       	adc	r31, r25
     3dc:	80 81       	ld	r24, Z
     3de:	8b 83       	std	Y+3, r24	; 0x03
  _buffer[fromIndex + 1] = '\0';
     3e0:	ec 81       	ldd	r30, Y+4	; 0x04
     3e2:	fd 81       	ldd	r31, Y+5	; 0x05
     3e4:	20 81       	ld	r18, Z
     3e6:	31 81       	ldd	r19, Z+1	; 0x01
     3e8:	8f 81       	ldd	r24, Y+7	; 0x07
     3ea:	98 85       	ldd	r25, Y+8	; 0x08
     3ec:	01 96       	adiw	r24, 0x01	; 1
     3ee:	f9 01       	movw	r30, r18
     3f0:	e8 0f       	add	r30, r24
     3f2:	f9 1f       	adc	r31, r25
     3f4:	10 82       	st	Z, r1
  char* temp = strrchr( _buffer, ch );
     3f6:	ec 81       	ldd	r30, Y+4	; 0x04
     3f8:	fd 81       	ldd	r31, Y+5	; 0x05
     3fa:	40 81       	ld	r20, Z
     3fc:	51 81       	ldd	r21, Z+1	; 0x01
     3fe:	8e 81       	ldd	r24, Y+6	; 0x06
     400:	28 2f       	mov	r18, r24
     402:	30 e0       	ldi	r19, 0x00	; 0
     404:	ca 01       	movw	r24, r20
     406:	b9 01       	movw	r22, r18
     408:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     40c:	9a 83       	std	Y+2, r25	; 0x02
     40e:	89 83       	std	Y+1, r24	; 0x01
  _buffer[fromIndex + 1] = tempchar;
     410:	ec 81       	ldd	r30, Y+4	; 0x04
     412:	fd 81       	ldd	r31, Y+5	; 0x05
     414:	20 81       	ld	r18, Z
     416:	31 81       	ldd	r19, Z+1	; 0x01
     418:	8f 81       	ldd	r24, Y+7	; 0x07
     41a:	98 85       	ldd	r25, Y+8	; 0x08
     41c:	01 96       	adiw	r24, 0x01	; 1
     41e:	f9 01       	movw	r30, r18
     420:	e8 0f       	add	r30, r24
     422:	f9 1f       	adc	r31, r25
     424:	8b 81       	ldd	r24, Y+3	; 0x03
     426:	80 83       	st	Z, r24

  if ( temp == NULL )
     428:	89 81       	ldd	r24, Y+1	; 0x01
     42a:	9a 81       	ldd	r25, Y+2	; 0x02
     42c:	00 97       	sbiw	r24, 0x00	; 0
     42e:	01 f4       	brne	.+0      	; 0x430 <_ZNK6String11lastIndexOfEcj+0xa2>
    return -1;
     430:	8f ef       	ldi	r24, 0xFF	; 255
     432:	9f ef       	ldi	r25, 0xFF	; 255
     434:	9a 87       	std	Y+10, r25	; 0x0a
     436:	89 87       	std	Y+9, r24	; 0x09
     438:	00 c0       	rjmp	.+0      	; 0x43a <_ZNK6String11lastIndexOfEcj+0xac>

  return temp - _buffer;
     43a:	29 81       	ldd	r18, Y+1	; 0x01
     43c:	3a 81       	ldd	r19, Y+2	; 0x02
     43e:	ec 81       	ldd	r30, Y+4	; 0x04
     440:	fd 81       	ldd	r31, Y+5	; 0x05
     442:	80 81       	ld	r24, Z
     444:	91 81       	ldd	r25, Z+1	; 0x01
     446:	a9 01       	movw	r20, r18
     448:	48 1b       	sub	r20, r24
     44a:	59 0b       	sbc	r21, r25
     44c:	5a 87       	std	Y+10, r21	; 0x0a
     44e:	49 87       	std	Y+9, r20	; 0x09
     450:	89 85       	ldd	r24, Y+9	; 0x09
     452:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     454:	2a 96       	adiw	r28, 0x0a	; 10
     456:	0f b6       	in	r0, 0x3f	; 63
     458:	f8 94       	cli
     45a:	de bf       	out	0x3e, r29	; 62
     45c:	0f be       	out	0x3f, r0	; 63
     45e:	cd bf       	out	0x3d, r28	; 61
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <_ZNK6String11lastIndexOfEc>:
    return -1;

  return theFind - _buffer; // pointer subtraction
}

int String::lastIndexOf( char theChar ) const
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	00 d0       	rcall	.+0      	; 0x46c <_ZNK6String11lastIndexOfEc+0x6>
     46c:	0f 92       	push	r0
     46e:	cd b7       	in	r28, 0x3d	; 61
     470:	de b7       	in	r29, 0x3e	; 62
     472:	9a 83       	std	Y+2, r25	; 0x02
     474:	89 83       	std	Y+1, r24	; 0x01
     476:	6b 83       	std	Y+3, r22	; 0x03
{
  return lastIndexOf( theChar, _length - 1 );
     478:	e9 81       	ldd	r30, Y+1	; 0x01
     47a:	fa 81       	ldd	r31, Y+2	; 0x02
     47c:	84 81       	ldd	r24, Z+4	; 0x04
     47e:	95 81       	ldd	r25, Z+5	; 0x05
     480:	9c 01       	movw	r18, r24
     482:	21 50       	subi	r18, 0x01	; 1
     484:	30 40       	sbci	r19, 0x00	; 0
     486:	89 81       	ldd	r24, Y+1	; 0x01
     488:	9a 81       	ldd	r25, Y+2	; 0x02
     48a:	6b 81       	ldd	r22, Y+3	; 0x03
     48c:	a9 01       	movw	r20, r18
     48e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     492:	0f 90       	pop	r0
     494:	0f 90       	pop	r0
     496:	0f 90       	pop	r0
     498:	cf 91       	pop	r28
     49a:	df 91       	pop	r29
     49c:	08 95       	ret

0000049e <_ZNK6String7indexOfERKS_j>:
int String::indexOf( const String &s2 ) const
{
  return indexOf( s2, 0 );
}

int String::indexOf( const String &s2, unsigned int fromIndex ) const
     49e:	df 93       	push	r29
     4a0:	cf 93       	push	r28
     4a2:	cd b7       	in	r28, 0x3d	; 61
     4a4:	de b7       	in	r29, 0x3e	; 62
     4a6:	2a 97       	sbiw	r28, 0x0a	; 10
     4a8:	0f b6       	in	r0, 0x3f	; 63
     4aa:	f8 94       	cli
     4ac:	de bf       	out	0x3e, r29	; 62
     4ae:	0f be       	out	0x3f, r0	; 63
     4b0:	cd bf       	out	0x3d, r28	; 61
     4b2:	9c 83       	std	Y+4, r25	; 0x04
     4b4:	8b 83       	std	Y+3, r24	; 0x03
     4b6:	7e 83       	std	Y+6, r23	; 0x06
     4b8:	6d 83       	std	Y+5, r22	; 0x05
     4ba:	58 87       	std	Y+8, r21	; 0x08
     4bc:	4f 83       	std	Y+7, r20	; 0x07
{
  if ( fromIndex >= _length )
     4be:	eb 81       	ldd	r30, Y+3	; 0x03
     4c0:	fc 81       	ldd	r31, Y+4	; 0x04
     4c2:	24 81       	ldd	r18, Z+4	; 0x04
     4c4:	35 81       	ldd	r19, Z+5	; 0x05
     4c6:	8f 81       	ldd	r24, Y+7	; 0x07
     4c8:	98 85       	ldd	r25, Y+8	; 0x08
     4ca:	82 17       	cp	r24, r18
     4cc:	93 07       	cpc	r25, r19
     4ce:	00 f0       	brcs	.+0      	; 0x4d0 <_ZNK6String7indexOfERKS_j+0x32>
    return -1;
     4d0:	4f ef       	ldi	r20, 0xFF	; 255
     4d2:	5f ef       	ldi	r21, 0xFF	; 255
     4d4:	5a 87       	std	Y+10, r21	; 0x0a
     4d6:	49 87       	std	Y+9, r20	; 0x09
     4d8:	00 c0       	rjmp	.+0      	; 0x4da <_ZNK6String7indexOfERKS_j+0x3c>

  const char *theFind = strstr( &_buffer[ fromIndex ], s2._buffer );
     4da:	eb 81       	ldd	r30, Y+3	; 0x03
     4dc:	fc 81       	ldd	r31, Y+4	; 0x04
     4de:	20 81       	ld	r18, Z
     4e0:	31 81       	ldd	r19, Z+1	; 0x01
     4e2:	8f 81       	ldd	r24, Y+7	; 0x07
     4e4:	98 85       	ldd	r25, Y+8	; 0x08
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
     4ea:	ed 81       	ldd	r30, Y+5	; 0x05
     4ec:	fe 81       	ldd	r31, Y+6	; 0x06
     4ee:	20 81       	ld	r18, Z
     4f0:	31 81       	ldd	r19, Z+1	; 0x01
     4f2:	b9 01       	movw	r22, r18
     4f4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     4f8:	9a 83       	std	Y+2, r25	; 0x02
     4fa:	89 83       	std	Y+1, r24	; 0x01

  if ( theFind == NULL )
     4fc:	89 81       	ldd	r24, Y+1	; 0x01
     4fe:	9a 81       	ldd	r25, Y+2	; 0x02
     500:	00 97       	sbiw	r24, 0x00	; 0
     502:	01 f4       	brne	.+0      	; 0x504 <_ZNK6String7indexOfERKS_j+0x66>
    return -1;
     504:	8f ef       	ldi	r24, 0xFF	; 255
     506:	9f ef       	ldi	r25, 0xFF	; 255
     508:	9a 87       	std	Y+10, r25	; 0x0a
     50a:	89 87       	std	Y+9, r24	; 0x09
     50c:	00 c0       	rjmp	.+0      	; 0x50e <_ZNK6String7indexOfERKS_j+0x70>

  return theFind - _buffer; // pointer subtraction
     50e:	29 81       	ldd	r18, Y+1	; 0x01
     510:	3a 81       	ldd	r19, Y+2	; 0x02
     512:	eb 81       	ldd	r30, Y+3	; 0x03
     514:	fc 81       	ldd	r31, Y+4	; 0x04
     516:	80 81       	ld	r24, Z
     518:	91 81       	ldd	r25, Z+1	; 0x01
     51a:	a9 01       	movw	r20, r18
     51c:	48 1b       	sub	r20, r24
     51e:	59 0b       	sbc	r21, r25
     520:	5a 87       	std	Y+10, r21	; 0x0a
     522:	49 87       	std	Y+9, r20	; 0x09
     524:	89 85       	ldd	r24, Y+9	; 0x09
     526:	9a 85       	ldd	r25, Y+10	; 0x0a
}
     528:	2a 96       	adiw	r28, 0x0a	; 10
     52a:	0f b6       	in	r0, 0x3f	; 63
     52c:	f8 94       	cli
     52e:	de bf       	out	0x3e, r29	; 62
     530:	0f be       	out	0x3f, r0	; 63
     532:	cd bf       	out	0x3d, r28	; 61
     534:	cf 91       	pop	r28
     536:	df 91       	pop	r29
     538:	08 95       	ret

0000053a <_ZNK6String7indexOfERKS_>:
    return -1;

  return temp - _buffer;
}

int String::indexOf( const String &s2 ) const
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	00 d0       	rcall	.+0      	; 0x540 <_ZNK6String7indexOfERKS_+0x6>
     540:	00 d0       	rcall	.+0      	; 0x542 <_ZNK6String7indexOfERKS_+0x8>
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	9a 83       	std	Y+2, r25	; 0x02
     548:	89 83       	std	Y+1, r24	; 0x01
     54a:	7c 83       	std	Y+4, r23	; 0x04
     54c:	6b 83       	std	Y+3, r22	; 0x03
{
  return indexOf( s2, 0 );
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	9a 81       	ldd	r25, Y+2	; 0x02
     552:	2b 81       	ldd	r18, Y+3	; 0x03
     554:	3c 81       	ldd	r19, Y+4	; 0x04
     556:	b9 01       	movw	r22, r18
     558:	40 e0       	ldi	r20, 0x00	; 0
     55a:	50 e0       	ldi	r21, 0x00	; 0
     55c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     560:	0f 90       	pop	r0
     562:	0f 90       	pop	r0
     564:	0f 90       	pop	r0
     566:	0f 90       	pop	r0
     568:	cf 91       	pop	r28
     56a:	df 91       	pop	r29
     56c:	08 95       	ret

0000056e <_ZNK6String7indexOfEcj>:
int String::indexOf( char temp ) const
{
  return indexOf( temp, 0 );
}

int String::indexOf( char ch, unsigned int fromIndex ) const
     56e:	df 93       	push	r29
     570:	cf 93       	push	r28
     572:	cd b7       	in	r28, 0x3d	; 61
     574:	de b7       	in	r29, 0x3e	; 62
     576:	29 97       	sbiw	r28, 0x09	; 9
     578:	0f b6       	in	r0, 0x3f	; 63
     57a:	f8 94       	cli
     57c:	de bf       	out	0x3e, r29	; 62
     57e:	0f be       	out	0x3f, r0	; 63
     580:	cd bf       	out	0x3d, r28	; 61
     582:	9c 83       	std	Y+4, r25	; 0x04
     584:	8b 83       	std	Y+3, r24	; 0x03
     586:	6d 83       	std	Y+5, r22	; 0x05
     588:	5f 83       	std	Y+7, r21	; 0x07
     58a:	4e 83       	std	Y+6, r20	; 0x06
{
  if ( fromIndex >= _length )
     58c:	eb 81       	ldd	r30, Y+3	; 0x03
     58e:	fc 81       	ldd	r31, Y+4	; 0x04
     590:	24 81       	ldd	r18, Z+4	; 0x04
     592:	35 81       	ldd	r19, Z+5	; 0x05
     594:	8e 81       	ldd	r24, Y+6	; 0x06
     596:	9f 81       	ldd	r25, Y+7	; 0x07
     598:	82 17       	cp	r24, r18
     59a:	93 07       	cpc	r25, r19
     59c:	00 f0       	brcs	.+0      	; 0x59e <_ZNK6String7indexOfEcj+0x30>
    return -1;
     59e:	4f ef       	ldi	r20, 0xFF	; 255
     5a0:	5f ef       	ldi	r21, 0xFF	; 255
     5a2:	59 87       	std	Y+9, r21	; 0x09
     5a4:	48 87       	std	Y+8, r20	; 0x08
     5a6:	00 c0       	rjmp	.+0      	; 0x5a8 <_ZNK6String7indexOfEcj+0x3a>

  const char* temp = strchr( &_buffer[fromIndex], ch );
     5a8:	eb 81       	ldd	r30, Y+3	; 0x03
     5aa:	fc 81       	ldd	r31, Y+4	; 0x04
     5ac:	20 81       	ld	r18, Z
     5ae:	31 81       	ldd	r19, Z+1	; 0x01
     5b0:	8e 81       	ldd	r24, Y+6	; 0x06
     5b2:	9f 81       	ldd	r25, Y+7	; 0x07
     5b4:	a9 01       	movw	r20, r18
     5b6:	48 0f       	add	r20, r24
     5b8:	59 1f       	adc	r21, r25
     5ba:	8d 81       	ldd	r24, Y+5	; 0x05
     5bc:	28 2f       	mov	r18, r24
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	ca 01       	movw	r24, r20
     5c2:	b9 01       	movw	r22, r18
     5c4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     5c8:	9a 83       	std	Y+2, r25	; 0x02
     5ca:	89 83       	std	Y+1, r24	; 0x01
  if ( temp == NULL )
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
     5ce:	9a 81       	ldd	r25, Y+2	; 0x02
     5d0:	00 97       	sbiw	r24, 0x00	; 0
     5d2:	01 f4       	brne	.+0      	; 0x5d4 <_ZNK6String7indexOfEcj+0x66>
    return -1;
     5d4:	8f ef       	ldi	r24, 0xFF	; 255
     5d6:	9f ef       	ldi	r25, 0xFF	; 255
     5d8:	99 87       	std	Y+9, r25	; 0x09
     5da:	88 87       	std	Y+8, r24	; 0x08
     5dc:	00 c0       	rjmp	.+0      	; 0x5de <_ZNK6String7indexOfEcj+0x70>

  return temp - _buffer;
     5de:	29 81       	ldd	r18, Y+1	; 0x01
     5e0:	3a 81       	ldd	r19, Y+2	; 0x02
     5e2:	eb 81       	ldd	r30, Y+3	; 0x03
     5e4:	fc 81       	ldd	r31, Y+4	; 0x04
     5e6:	80 81       	ld	r24, Z
     5e8:	91 81       	ldd	r25, Z+1	; 0x01
     5ea:	a9 01       	movw	r20, r18
     5ec:	48 1b       	sub	r20, r24
     5ee:	59 0b       	sbc	r21, r25
     5f0:	59 87       	std	Y+9, r21	; 0x09
     5f2:	48 87       	std	Y+8, r20	; 0x08
     5f4:	88 85       	ldd	r24, Y+8	; 0x08
     5f6:	99 85       	ldd	r25, Y+9	; 0x09
}
     5f8:	29 96       	adiw	r28, 0x09	; 9
     5fa:	0f b6       	in	r0, 0x3f	; 63
     5fc:	f8 94       	cli
     5fe:	de bf       	out	0x3e, r29	; 62
     600:	0f be       	out	0x3f, r0	; 63
     602:	cd bf       	out	0x3d, r28	; 61
     604:	cf 91       	pop	r28
     606:	df 91       	pop	r29
     608:	08 95       	ret

0000060a <_ZNK6String7indexOfEc>:
  }
  newString += temp;  
  return newString;
}

int String::indexOf( char temp ) const
     60a:	df 93       	push	r29
     60c:	cf 93       	push	r28
     60e:	00 d0       	rcall	.+0      	; 0x610 <_ZNK6String7indexOfEc+0x6>
     610:	0f 92       	push	r0
     612:	cd b7       	in	r28, 0x3d	; 61
     614:	de b7       	in	r29, 0x3e	; 62
     616:	9a 83       	std	Y+2, r25	; 0x02
     618:	89 83       	std	Y+1, r24	; 0x01
     61a:	6b 83       	std	Y+3, r22	; 0x03
{
  return indexOf( temp, 0 );
     61c:	89 81       	ldd	r24, Y+1	; 0x01
     61e:	9a 81       	ldd	r25, Y+2	; 0x02
     620:	6b 81       	ldd	r22, Y+3	; 0x03
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	0f 90       	pop	r0
     630:	cf 91       	pop	r28
     632:	df 91       	pop	r29
     634:	08 95       	ret

00000636 <_ZNK6String6equalsERKS_>:
    return 0;

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
}

boolean String::equals( const String &s2 ) const
     636:	df 93       	push	r29
     638:	cf 93       	push	r28
     63a:	00 d0       	rcall	.+0      	; 0x63c <_ZNK6String6equalsERKS_+0x6>
     63c:	00 d0       	rcall	.+0      	; 0x63e <_ZNK6String6equalsERKS_+0x8>
     63e:	0f 92       	push	r0
     640:	cd b7       	in	r28, 0x3d	; 61
     642:	de b7       	in	r29, 0x3e	; 62
     644:	9a 83       	std	Y+2, r25	; 0x02
     646:	89 83       	std	Y+1, r24	; 0x01
     648:	7c 83       	std	Y+4, r23	; 0x04
     64a:	6b 83       	std	Y+3, r22	; 0x03
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
     64c:	e9 81       	ldd	r30, Y+1	; 0x01
     64e:	fa 81       	ldd	r31, Y+2	; 0x02
     650:	24 81       	ldd	r18, Z+4	; 0x04
     652:	35 81       	ldd	r19, Z+5	; 0x05
     654:	eb 81       	ldd	r30, Y+3	; 0x03
     656:	fc 81       	ldd	r31, Y+4	; 0x04
     658:	84 81       	ldd	r24, Z+4	; 0x04
     65a:	95 81       	ldd	r25, Z+5	; 0x05
     65c:	28 17       	cp	r18, r24
     65e:	39 07       	cpc	r19, r25
     660:	01 f4       	brne	.+0      	; 0x662 <_ZNK6String6equalsERKS_+0x2c>
     662:	e9 81       	ldd	r30, Y+1	; 0x01
     664:	fa 81       	ldd	r31, Y+2	; 0x02
     666:	80 81       	ld	r24, Z
     668:	91 81       	ldd	r25, Z+1	; 0x01
     66a:	eb 81       	ldd	r30, Y+3	; 0x03
     66c:	fc 81       	ldd	r31, Y+4	; 0x04
     66e:	20 81       	ld	r18, Z
     670:	31 81       	ldd	r19, Z+1	; 0x01
     672:	b9 01       	movw	r22, r18
     674:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	01 f4       	brne	.+0      	; 0x67c <_ZNK6String6equalsERKS_+0x46>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	8d 83       	std	Y+5, r24	; 0x05
     680:	00 c0       	rjmp	.+0      	; 0x682 <_ZNK6String6equalsERKS_+0x4c>
     682:	1d 82       	std	Y+5, r1	; 0x05
     684:	8d 81       	ldd	r24, Y+5	; 0x05
}
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	0f 90       	pop	r0
     68e:	0f 90       	pop	r0
     690:	cf 91       	pop	r28
     692:	df 91       	pop	r29
     694:	08 95       	ret

00000696 <_ZNK6String8endsWithERKS_>:
{
  // need to check for valid index, to do later
  return _buffer[ index ];
}

boolean String::endsWith( const String &s2 ) const
     696:	df 93       	push	r29
     698:	cf 93       	push	r28
     69a:	00 d0       	rcall	.+0      	; 0x69c <_ZNK6String8endsWithERKS_+0x6>
     69c:	00 d0       	rcall	.+0      	; 0x69e <_ZNK6String8endsWithERKS_+0x8>
     69e:	0f 92       	push	r0
     6a0:	cd b7       	in	r28, 0x3d	; 61
     6a2:	de b7       	in	r29, 0x3e	; 62
     6a4:	9a 83       	std	Y+2, r25	; 0x02
     6a6:	89 83       	std	Y+1, r24	; 0x01
     6a8:	7c 83       	std	Y+4, r23	; 0x04
     6aa:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( _length < s2._length )
     6ac:	e9 81       	ldd	r30, Y+1	; 0x01
     6ae:	fa 81       	ldd	r31, Y+2	; 0x02
     6b0:	24 81       	ldd	r18, Z+4	; 0x04
     6b2:	35 81       	ldd	r19, Z+5	; 0x05
     6b4:	eb 81       	ldd	r30, Y+3	; 0x03
     6b6:	fc 81       	ldd	r31, Y+4	; 0x04
     6b8:	84 81       	ldd	r24, Z+4	; 0x04
     6ba:	95 81       	ldd	r25, Z+5	; 0x05
     6bc:	28 17       	cp	r18, r24
     6be:	39 07       	cpc	r19, r25
     6c0:	00 f4       	brcc	.+0      	; 0x6c2 <_ZNK6String8endsWithERKS_+0x2c>
    return 0;
     6c2:	1d 82       	std	Y+5, r1	; 0x05
     6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <_ZNK6String8endsWithERKS_+0x30>

  return strcmp( &_buffer[ _length - s2._length], s2._buffer ) == 0;
     6c6:	e9 81       	ldd	r30, Y+1	; 0x01
     6c8:	fa 81       	ldd	r31, Y+2	; 0x02
     6ca:	40 81       	ld	r20, Z
     6cc:	51 81       	ldd	r21, Z+1	; 0x01
     6ce:	e9 81       	ldd	r30, Y+1	; 0x01
     6d0:	fa 81       	ldd	r31, Y+2	; 0x02
     6d2:	24 81       	ldd	r18, Z+4	; 0x04
     6d4:	35 81       	ldd	r19, Z+5	; 0x05
     6d6:	eb 81       	ldd	r30, Y+3	; 0x03
     6d8:	fc 81       	ldd	r31, Y+4	; 0x04
     6da:	84 81       	ldd	r24, Z+4	; 0x04
     6dc:	95 81       	ldd	r25, Z+5	; 0x05
     6de:	b9 01       	movw	r22, r18
     6e0:	68 1b       	sub	r22, r24
     6e2:	79 0b       	sbc	r23, r25
     6e4:	cb 01       	movw	r24, r22
     6e6:	84 0f       	add	r24, r20
     6e8:	95 1f       	adc	r25, r21
     6ea:	eb 81       	ldd	r30, Y+3	; 0x03
     6ec:	fc 81       	ldd	r31, Y+4	; 0x04
     6ee:	20 81       	ld	r18, Z
     6f0:	31 81       	ldd	r19, Z+1	; 0x01
     6f2:	b9 01       	movw	r22, r18
     6f4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     6f8:	1d 82       	std	Y+5, r1	; 0x05
     6fa:	00 97       	sbiw	r24, 0x00	; 0
     6fc:	01 f4       	brne	.+0      	; 0x6fe <_ZNK6String8endsWithERKS_+0x68>
     6fe:	71 e0       	ldi	r23, 0x01	; 1
     700:	7d 83       	std	Y+5, r23	; 0x05
     702:	8d 81       	ldd	r24, Y+5	; 0x05
}
     704:	0f 90       	pop	r0
     706:	0f 90       	pop	r0
     708:	0f 90       	pop	r0
     70a:	0f 90       	pop	r0
     70c:	0f 90       	pop	r0
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	08 95       	ret

00000714 <_ZNK6StringgeERKS_>:
int String::operator<=( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
}

int String::operator>=( const String & rhs ) const
     714:	df 93       	push	r29
     716:	cf 93       	push	r28
     718:	00 d0       	rcall	.+0      	; 0x71a <_ZNK6StringgeERKS_+0x6>
     71a:	00 d0       	rcall	.+0      	; 0x71c <_ZNK6StringgeERKS_+0x8>
     71c:	00 d0       	rcall	.+0      	; 0x71e <_ZNK6StringgeERKS_+0xa>
     71e:	cd b7       	in	r28, 0x3d	; 61
     720:	de b7       	in	r29, 0x3e	; 62
     722:	9a 83       	std	Y+2, r25	; 0x02
     724:	89 83       	std	Y+1, r24	; 0x01
     726:	7c 83       	std	Y+4, r23	; 0x04
     728:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) >= 0;
     72a:	e9 81       	ldd	r30, Y+1	; 0x01
     72c:	fa 81       	ldd	r31, Y+2	; 0x02
     72e:	80 81       	ld	r24, Z
     730:	91 81       	ldd	r25, Z+1	; 0x01
     732:	eb 81       	ldd	r30, Y+3	; 0x03
     734:	fc 81       	ldd	r31, Y+4	; 0x04
     736:	20 81       	ld	r18, Z
     738:	31 81       	ldd	r19, Z+1	; 0x01
     73a:	b9 01       	movw	r22, r18
     73c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     740:	1e 82       	std	Y+6, r1	; 0x06
     742:	1d 82       	std	Y+5, r1	; 0x05
     744:	99 23       	and	r25, r25
     746:	04 f0       	brlt	.+0      	; 0x748 <_ZNK6StringgeERKS_+0x34>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	90 e0       	ldi	r25, 0x00	; 0
     74c:	9e 83       	std	Y+6, r25	; 0x06
     74e:	8d 83       	std	Y+5, r24	; 0x05
     750:	8d 81       	ldd	r24, Y+5	; 0x05
     752:	9e 81       	ldd	r25, Y+6	; 0x06
}
     754:	26 96       	adiw	r28, 0x06	; 6
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	cf 91       	pop	r28
     762:	df 91       	pop	r29
     764:	08 95       	ret

00000766 <_ZNK6StringleERKS_>:
int String::operator>( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) > 0;
}

int String::operator<=( const String &rhs ) const
     766:	df 93       	push	r29
     768:	cf 93       	push	r28
     76a:	00 d0       	rcall	.+0      	; 0x76c <_ZNK6StringleERKS_+0x6>
     76c:	00 d0       	rcall	.+0      	; 0x76e <_ZNK6StringleERKS_+0x8>
     76e:	00 d0       	rcall	.+0      	; 0x770 <_ZNK6StringleERKS_+0xa>
     770:	cd b7       	in	r28, 0x3d	; 61
     772:	de b7       	in	r29, 0x3e	; 62
     774:	9a 83       	std	Y+2, r25	; 0x02
     776:	89 83       	std	Y+1, r24	; 0x01
     778:	7c 83       	std	Y+4, r23	; 0x04
     77a:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) <= 0;
     77c:	e9 81       	ldd	r30, Y+1	; 0x01
     77e:	fa 81       	ldd	r31, Y+2	; 0x02
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	eb 81       	ldd	r30, Y+3	; 0x03
     786:	fc 81       	ldd	r31, Y+4	; 0x04
     788:	20 81       	ld	r18, Z
     78a:	31 81       	ldd	r19, Z+1	; 0x01
     78c:	b9 01       	movw	r22, r18
     78e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     792:	1e 82       	std	Y+6, r1	; 0x06
     794:	1d 82       	std	Y+5, r1	; 0x05
     796:	18 16       	cp	r1, r24
     798:	19 06       	cpc	r1, r25
     79a:	04 f0       	brlt	.+0      	; 0x79c <_ZNK6StringleERKS_+0x36>
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	90 e0       	ldi	r25, 0x00	; 0
     7a0:	9e 83       	std	Y+6, r25	; 0x06
     7a2:	8d 83       	std	Y+5, r24	; 0x05
     7a4:	8d 81       	ldd	r24, Y+5	; 0x05
     7a6:	9e 81       	ldd	r25, Y+6	; 0x06
}
     7a8:	26 96       	adiw	r28, 0x06	; 6
     7aa:	0f b6       	in	r0, 0x3f	; 63
     7ac:	f8 94       	cli
     7ae:	de bf       	out	0x3e, r29	; 62
     7b0:	0f be       	out	0x3f, r0	; 63
     7b2:	cd bf       	out	0x3d, r28	; 61
     7b4:	cf 91       	pop	r28
     7b6:	df 91       	pop	r29
     7b8:	08 95       	ret

000007ba <_ZNK6StringgtERKS_>:
int String::operator<( const String &rhs ) const
{
  return strcmp( _buffer, rhs._buffer ) < 0;
}

int String::operator>( const String &rhs ) const
     7ba:	df 93       	push	r29
     7bc:	cf 93       	push	r28
     7be:	00 d0       	rcall	.+0      	; 0x7c0 <_ZNK6StringgtERKS_+0x6>
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <_ZNK6StringgtERKS_+0x8>
     7c2:	00 d0       	rcall	.+0      	; 0x7c4 <_ZNK6StringgtERKS_+0xa>
     7c4:	cd b7       	in	r28, 0x3d	; 61
     7c6:	de b7       	in	r29, 0x3e	; 62
     7c8:	9a 83       	std	Y+2, r25	; 0x02
     7ca:	89 83       	std	Y+1, r24	; 0x01
     7cc:	7c 83       	std	Y+4, r23	; 0x04
     7ce:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) > 0;
     7d0:	e9 81       	ldd	r30, Y+1	; 0x01
     7d2:	fa 81       	ldd	r31, Y+2	; 0x02
     7d4:	80 81       	ld	r24, Z
     7d6:	91 81       	ldd	r25, Z+1	; 0x01
     7d8:	eb 81       	ldd	r30, Y+3	; 0x03
     7da:	fc 81       	ldd	r31, Y+4	; 0x04
     7dc:	20 81       	ld	r18, Z
     7de:	31 81       	ldd	r19, Z+1	; 0x01
     7e0:	b9 01       	movw	r22, r18
     7e2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     7e6:	1e 82       	std	Y+6, r1	; 0x06
     7e8:	1d 82       	std	Y+5, r1	; 0x05
     7ea:	18 16       	cp	r1, r24
     7ec:	19 06       	cpc	r1, r25
     7ee:	04 f4       	brge	.+0      	; 0x7f0 <_ZNK6StringgtERKS_+0x36>
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9e 83       	std	Y+6, r25	; 0x06
     7f6:	8d 83       	std	Y+5, r24	; 0x05
     7f8:	8d 81       	ldd	r24, Y+5	; 0x05
     7fa:	9e 81       	ldd	r25, Y+6	; 0x06
}
     7fc:	26 96       	adiw	r28, 0x06	; 6
     7fe:	0f b6       	in	r0, 0x3f	; 63
     800:	f8 94       	cli
     802:	de bf       	out	0x3e, r29	; 62
     804:	0f be       	out	0x3f, r0	; 63
     806:	cd bf       	out	0x3d, r28	; 61
     808:	cf 91       	pop	r28
     80a:	df 91       	pop	r29
     80c:	08 95       	ret

0000080e <_ZNK6StringltERKS_>:
int String::operator!=( const String &rhs ) const
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
}

int String::operator<( const String &rhs ) const
     80e:	df 93       	push	r29
     810:	cf 93       	push	r28
     812:	00 d0       	rcall	.+0      	; 0x814 <_ZNK6StringltERKS_+0x6>
     814:	00 d0       	rcall	.+0      	; 0x816 <_ZNK6StringltERKS_+0x8>
     816:	00 d0       	rcall	.+0      	; 0x818 <_ZNK6StringltERKS_+0xa>
     818:	cd b7       	in	r28, 0x3d	; 61
     81a:	de b7       	in	r29, 0x3e	; 62
     81c:	9a 83       	std	Y+2, r25	; 0x02
     81e:	89 83       	std	Y+1, r24	; 0x01
     820:	7c 83       	std	Y+4, r23	; 0x04
     822:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, rhs._buffer ) < 0;
     824:	e9 81       	ldd	r30, Y+1	; 0x01
     826:	fa 81       	ldd	r31, Y+2	; 0x02
     828:	80 81       	ld	r24, Z
     82a:	91 81       	ldd	r25, Z+1	; 0x01
     82c:	eb 81       	ldd	r30, Y+3	; 0x03
     82e:	fc 81       	ldd	r31, Y+4	; 0x04
     830:	20 81       	ld	r18, Z
     832:	31 81       	ldd	r19, Z+1	; 0x01
     834:	b9 01       	movw	r22, r18
     836:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     83a:	1e 82       	std	Y+6, r1	; 0x06
     83c:	1d 82       	std	Y+5, r1	; 0x05
     83e:	99 23       	and	r25, r25
     840:	04 f4       	brge	.+0      	; 0x842 <_ZNK6StringltERKS_+0x34>
     842:	81 e0       	ldi	r24, 0x01	; 1
     844:	90 e0       	ldi	r25, 0x00	; 0
     846:	9e 83       	std	Y+6, r25	; 0x06
     848:	8d 83       	std	Y+5, r24	; 0x05
     84a:	8d 81       	ldd	r24, Y+5	; 0x05
     84c:	9e 81       	ldd	r25, Y+6	; 0x06
}
     84e:	26 96       	adiw	r28, 0x06	; 6
     850:	0f b6       	in	r0, 0x3f	; 63
     852:	f8 94       	cli
     854:	de bf       	out	0x3e, r29	; 62
     856:	0f be       	out	0x3f, r0	; 63
     858:	cd bf       	out	0x3d, r28	; 61
     85a:	cf 91       	pop	r28
     85c:	df 91       	pop	r29
     85e:	08 95       	ret

00000860 <_ZNK6StringneERKS_>:
int String::operator==( const String &rhs ) const
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
}

int String::operator!=( const String &rhs ) const
     860:	0f 93       	push	r16
     862:	1f 93       	push	r17
     864:	df 93       	push	r29
     866:	cf 93       	push	r28
     868:	00 d0       	rcall	.+0      	; 0x86a <_ZNK6StringneERKS_+0xa>
     86a:	00 d0       	rcall	.+0      	; 0x86c <_ZNK6StringneERKS_+0xc>
     86c:	0f 92       	push	r0
     86e:	cd b7       	in	r28, 0x3d	; 61
     870:	de b7       	in	r29, 0x3e	; 62
     872:	9a 83       	std	Y+2, r25	; 0x02
     874:	89 83       	std	Y+1, r24	; 0x01
     876:	7c 83       	std	Y+4, r23	; 0x04
     878:	6b 83       	std	Y+3, r22	; 0x03
{
  return ( _length != rhs.length() || strcmp( _buffer, rhs._buffer ) != 0 );
     87a:	e9 81       	ldd	r30, Y+1	; 0x01
     87c:	fa 81       	ldd	r31, Y+2	; 0x02
     87e:	04 81       	ldd	r16, Z+4	; 0x04
     880:	15 81       	ldd	r17, Z+5	; 0x05
     882:	8b 81       	ldd	r24, Y+3	; 0x03
     884:	9c 81       	ldd	r25, Y+4	; 0x04
     886:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     88a:	08 17       	cp	r16, r24
     88c:	19 07       	cpc	r17, r25
     88e:	01 f4       	brne	.+0      	; 0x890 <_ZNK6StringneERKS_+0x30>
     890:	e9 81       	ldd	r30, Y+1	; 0x01
     892:	fa 81       	ldd	r31, Y+2	; 0x02
     894:	80 81       	ld	r24, Z
     896:	91 81       	ldd	r25, Z+1	; 0x01
     898:	eb 81       	ldd	r30, Y+3	; 0x03
     89a:	fc 81       	ldd	r31, Y+4	; 0x04
     89c:	20 81       	ld	r18, Z
     89e:	31 81       	ldd	r19, Z+1	; 0x01
     8a0:	b9 01       	movw	r22, r18
     8a2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     8a6:	00 97       	sbiw	r24, 0x00	; 0
     8a8:	01 f0       	breq	.+0      	; 0x8aa <_ZNK6StringneERKS_+0x4a>
     8aa:	21 e0       	ldi	r18, 0x01	; 1
     8ac:	2d 83       	std	Y+5, r18	; 0x05
     8ae:	00 c0       	rjmp	.+0      	; 0x8b0 <_ZNK6StringneERKS_+0x50>
     8b0:	1d 82       	std	Y+5, r1	; 0x05
     8b2:	2d 81       	ldd	r18, Y+5	; 0x05
     8b4:	82 2f       	mov	r24, r18
     8b6:	90 e0       	ldi	r25, 0x00	; 0
}
     8b8:	0f 90       	pop	r0
     8ba:	0f 90       	pop	r0
     8bc:	0f 90       	pop	r0
     8be:	0f 90       	pop	r0
     8c0:	0f 90       	pop	r0
     8c2:	cf 91       	pop	r28
     8c4:	df 91       	pop	r29
     8c6:	1f 91       	pop	r17
     8c8:	0f 91       	pop	r16
     8ca:	08 95       	ret

000008cc <_ZNK6StringeqERKS_>:
    strcat( _buffer, other._buffer );
  return *this;
}


int String::operator==( const String &rhs ) const
     8cc:	df 93       	push	r29
     8ce:	cf 93       	push	r28
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <_ZNK6StringeqERKS_+0x6>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <_ZNK6StringeqERKS_+0x8>
     8d4:	0f 92       	push	r0
     8d6:	cd b7       	in	r28, 0x3d	; 61
     8d8:	de b7       	in	r29, 0x3e	; 62
     8da:	9a 83       	std	Y+2, r25	; 0x02
     8dc:	89 83       	std	Y+1, r24	; 0x01
     8de:	7c 83       	std	Y+4, r23	; 0x04
     8e0:	6b 83       	std	Y+3, r22	; 0x03
{
  return ( _length == rhs._length && strcmp( _buffer, rhs._buffer ) == 0 );
     8e2:	e9 81       	ldd	r30, Y+1	; 0x01
     8e4:	fa 81       	ldd	r31, Y+2	; 0x02
     8e6:	24 81       	ldd	r18, Z+4	; 0x04
     8e8:	35 81       	ldd	r19, Z+5	; 0x05
     8ea:	eb 81       	ldd	r30, Y+3	; 0x03
     8ec:	fc 81       	ldd	r31, Y+4	; 0x04
     8ee:	84 81       	ldd	r24, Z+4	; 0x04
     8f0:	95 81       	ldd	r25, Z+5	; 0x05
     8f2:	28 17       	cp	r18, r24
     8f4:	39 07       	cpc	r19, r25
     8f6:	01 f4       	brne	.+0      	; 0x8f8 <_ZNK6StringeqERKS_+0x2c>
     8f8:	e9 81       	ldd	r30, Y+1	; 0x01
     8fa:	fa 81       	ldd	r31, Y+2	; 0x02
     8fc:	80 81       	ld	r24, Z
     8fe:	91 81       	ldd	r25, Z+1	; 0x01
     900:	eb 81       	ldd	r30, Y+3	; 0x03
     902:	fc 81       	ldd	r31, Y+4	; 0x04
     904:	20 81       	ld	r18, Z
     906:	31 81       	ldd	r19, Z+1	; 0x01
     908:	b9 01       	movw	r22, r18
     90a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     90e:	00 97       	sbiw	r24, 0x00	; 0
     910:	01 f4       	brne	.+0      	; 0x912 <_ZNK6StringeqERKS_+0x46>
     912:	21 e0       	ldi	r18, 0x01	; 1
     914:	2d 83       	std	Y+5, r18	; 0x05
     916:	00 c0       	rjmp	.+0      	; 0x918 <_ZNK6StringeqERKS_+0x4c>
     918:	1d 82       	std	Y+5, r1	; 0x05
     91a:	2d 81       	ldd	r18, Y+5	; 0x05
     91c:	82 2f       	mov	r24, r18
     91e:	90 e0       	ldi	r25, 0x00	; 0
}
     920:	0f 90       	pop	r0
     922:	0f 90       	pop	r0
     924:	0f 90       	pop	r0
     926:	0f 90       	pop	r0
     928:	0f 90       	pop	r0
     92a:	cf 91       	pop	r28
     92c:	df 91       	pop	r29
     92e:	08 95       	ret

00000930 <_ZNK6String9compareToERKS_>:
  if(_length > loc) {
    _buffer[loc] = aChar;
  }
}

int String::compareTo( const String &s2 ) const
     930:	df 93       	push	r29
     932:	cf 93       	push	r28
     934:	00 d0       	rcall	.+0      	; 0x936 <_ZNK6String9compareToERKS_+0x6>
     936:	00 d0       	rcall	.+0      	; 0x938 <_ZNK6String9compareToERKS_+0x8>
     938:	cd b7       	in	r28, 0x3d	; 61
     93a:	de b7       	in	r29, 0x3e	; 62
     93c:	9a 83       	std	Y+2, r25	; 0x02
     93e:	89 83       	std	Y+1, r24	; 0x01
     940:	7c 83       	std	Y+4, r23	; 0x04
     942:	6b 83       	std	Y+3, r22	; 0x03
{
  return strcmp( _buffer, s2._buffer );
     944:	e9 81       	ldd	r30, Y+1	; 0x01
     946:	fa 81       	ldd	r31, Y+2	; 0x02
     948:	80 81       	ld	r24, Z
     94a:	91 81       	ldd	r25, Z+1	; 0x01
     94c:	eb 81       	ldd	r30, Y+3	; 0x03
     94e:	fc 81       	ldd	r31, Y+4	; 0x04
     950:	20 81       	ld	r18, Z
     952:	31 81       	ldd	r19, Z+1	; 0x01
     954:	b9 01       	movw	r22, r18
     956:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     95a:	0f 90       	pop	r0
     95c:	0f 90       	pop	r0
     95e:	0f 90       	pop	r0
     960:	0f 90       	pop	r0
     962:	cf 91       	pop	r28
     964:	df 91       	pop	r29
     966:	08 95       	ret

00000968 <_ZN6String9getBufferEj>:
  private:

};

// allocate buffer space
inline void String::getBuffer(unsigned int maxStrLen)
     968:	df 93       	push	r29
     96a:	cf 93       	push	r28
     96c:	00 d0       	rcall	.+0      	; 0x96e <_ZN6String9getBufferEj+0x6>
     96e:	00 d0       	rcall	.+0      	; 0x970 <_ZN6String9getBufferEj+0x8>
     970:	cd b7       	in	r28, 0x3d	; 61
     972:	de b7       	in	r29, 0x3e	; 62
     974:	9a 83       	std	Y+2, r25	; 0x02
     976:	89 83       	std	Y+1, r24	; 0x01
     978:	7c 83       	std	Y+4, r23	; 0x04
     97a:	6b 83       	std	Y+3, r22	; 0x03
{
  _capacity = maxStrLen;
     97c:	e9 81       	ldd	r30, Y+1	; 0x01
     97e:	fa 81       	ldd	r31, Y+2	; 0x02
     980:	8b 81       	ldd	r24, Y+3	; 0x03
     982:	9c 81       	ldd	r25, Y+4	; 0x04
     984:	93 83       	std	Z+3, r25	; 0x03
     986:	82 83       	std	Z+2, r24	; 0x02
  _buffer = (char *) malloc(_capacity + 1);
     988:	e9 81       	ldd	r30, Y+1	; 0x01
     98a:	fa 81       	ldd	r31, Y+2	; 0x02
     98c:	82 81       	ldd	r24, Z+2	; 0x02
     98e:	93 81       	ldd	r25, Z+3	; 0x03
     990:	01 96       	adiw	r24, 0x01	; 1
     992:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     996:	e9 81       	ldd	r30, Y+1	; 0x01
     998:	fa 81       	ldd	r31, Y+2	; 0x02
     99a:	91 83       	std	Z+1, r25	; 0x01
     99c:	80 83       	st	Z, r24
  if (_buffer == NULL) _length = _capacity = 0;
     99e:	e9 81       	ldd	r30, Y+1	; 0x01
     9a0:	fa 81       	ldd	r31, Y+2	; 0x02
     9a2:	80 81       	ld	r24, Z
     9a4:	91 81       	ldd	r25, Z+1	; 0x01
     9a6:	00 97       	sbiw	r24, 0x00	; 0
     9a8:	01 f4       	brne	.+0      	; 0x9aa <_ZN6String9getBufferEj+0x42>
     9aa:	e9 81       	ldd	r30, Y+1	; 0x01
     9ac:	fa 81       	ldd	r31, Y+2	; 0x02
     9ae:	13 82       	std	Z+3, r1	; 0x03
     9b0:	12 82       	std	Z+2, r1	; 0x02
     9b2:	e9 81       	ldd	r30, Y+1	; 0x01
     9b4:	fa 81       	ldd	r31, Y+2	; 0x02
     9b6:	82 81       	ldd	r24, Z+2	; 0x02
     9b8:	93 81       	ldd	r25, Z+3	; 0x03
     9ba:	e9 81       	ldd	r30, Y+1	; 0x01
     9bc:	fa 81       	ldd	r31, Y+2	; 0x02
     9be:	95 83       	std	Z+5, r25	; 0x05
     9c0:	84 83       	std	Z+4, r24	; 0x04
}
     9c2:	0f 90       	pop	r0
     9c4:	0f 90       	pop	r0
     9c6:	0f 90       	pop	r0
     9c8:	0f 90       	pop	r0
     9ca:	cf 91       	pop	r28
     9cc:	df 91       	pop	r29
     9ce:	08 95       	ret

000009d0 <_ZN6StringpLERKS_>:
//  _buffer[ _length++ ] = aChar;
//  _buffer[ _length ] = '\0';
//  return *this;
//}

const String & String::operator+=( const String &other )
     9d0:	df 93       	push	r29
     9d2:	cf 93       	push	r28
     9d4:	00 d0       	rcall	.+0      	; 0x9d6 <_ZN6StringpLERKS_+0x6>
     9d6:	00 d0       	rcall	.+0      	; 0x9d8 <_ZN6StringpLERKS_+0x8>
     9d8:	00 d0       	rcall	.+0      	; 0x9da <_ZN6StringpLERKS_+0xa>
     9da:	cd b7       	in	r28, 0x3d	; 61
     9dc:	de b7       	in	r29, 0x3e	; 62
     9de:	9c 83       	std	Y+4, r25	; 0x04
     9e0:	8b 83       	std	Y+3, r24	; 0x03
     9e2:	7e 83       	std	Y+6, r23	; 0x06
     9e4:	6d 83       	std	Y+5, r22	; 0x05
{
  _length += other._length;
     9e6:	eb 81       	ldd	r30, Y+3	; 0x03
     9e8:	fc 81       	ldd	r31, Y+4	; 0x04
     9ea:	24 81       	ldd	r18, Z+4	; 0x04
     9ec:	35 81       	ldd	r19, Z+5	; 0x05
     9ee:	ed 81       	ldd	r30, Y+5	; 0x05
     9f0:	fe 81       	ldd	r31, Y+6	; 0x06
     9f2:	84 81       	ldd	r24, Z+4	; 0x04
     9f4:	95 81       	ldd	r25, Z+5	; 0x05
     9f6:	82 0f       	add	r24, r18
     9f8:	93 1f       	adc	r25, r19
     9fa:	eb 81       	ldd	r30, Y+3	; 0x03
     9fc:	fc 81       	ldd	r31, Y+4	; 0x04
     9fe:	95 83       	std	Z+5, r25	; 0x05
     a00:	84 83       	std	Z+4, r24	; 0x04
  if ( _length > _capacity )
     a02:	eb 81       	ldd	r30, Y+3	; 0x03
     a04:	fc 81       	ldd	r31, Y+4	; 0x04
     a06:	24 81       	ldd	r18, Z+4	; 0x04
     a08:	35 81       	ldd	r19, Z+5	; 0x05
     a0a:	eb 81       	ldd	r30, Y+3	; 0x03
     a0c:	fc 81       	ldd	r31, Y+4	; 0x04
     a0e:	82 81       	ldd	r24, Z+2	; 0x02
     a10:	93 81       	ldd	r25, Z+3	; 0x03
     a12:	82 17       	cp	r24, r18
     a14:	93 07       	cpc	r25, r19
     a16:	00 f4       	brcc	.+0      	; 0xa18 <_ZN6StringpLERKS_+0x48>
  {
    char *temp = _buffer;
     a18:	eb 81       	ldd	r30, Y+3	; 0x03
     a1a:	fc 81       	ldd	r31, Y+4	; 0x04
     a1c:	80 81       	ld	r24, Z
     a1e:	91 81       	ldd	r25, Z+1	; 0x01
     a20:	9a 83       	std	Y+2, r25	; 0x02
     a22:	89 83       	std	Y+1, r24	; 0x01
    getBuffer( _length );
     a24:	eb 81       	ldd	r30, Y+3	; 0x03
     a26:	fc 81       	ldd	r31, Y+4	; 0x04
     a28:	24 81       	ldd	r18, Z+4	; 0x04
     a2a:	35 81       	ldd	r19, Z+5	; 0x05
     a2c:	8b 81       	ldd	r24, Y+3	; 0x03
     a2e:	9c 81       	ldd	r25, Y+4	; 0x04
     a30:	b9 01       	movw	r22, r18
     a32:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    if ( _buffer != NULL )
     a36:	eb 81       	ldd	r30, Y+3	; 0x03
     a38:	fc 81       	ldd	r31, Y+4	; 0x04
     a3a:	80 81       	ld	r24, Z
     a3c:	91 81       	ldd	r25, Z+1	; 0x01
     a3e:	00 97       	sbiw	r24, 0x00	; 0
     a40:	01 f0       	breq	.+0      	; 0xa42 <_ZN6StringpLERKS_+0x72>
      strcpy( _buffer, temp );
     a42:	eb 81       	ldd	r30, Y+3	; 0x03
     a44:	fc 81       	ldd	r31, Y+4	; 0x04
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	29 81       	ldd	r18, Y+1	; 0x01
     a4c:	3a 81       	ldd	r19, Y+2	; 0x02
     a4e:	b9 01       	movw	r22, r18
     a50:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    free(temp);
     a54:	89 81       	ldd	r24, Y+1	; 0x01
     a56:	9a 81       	ldd	r25, Y+2	; 0x02
     a58:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
  if ( _buffer != NULL )
     a5c:	eb 81       	ldd	r30, Y+3	; 0x03
     a5e:	fc 81       	ldd	r31, Y+4	; 0x04
     a60:	80 81       	ld	r24, Z
     a62:	91 81       	ldd	r25, Z+1	; 0x01
     a64:	00 97       	sbiw	r24, 0x00	; 0
     a66:	01 f0       	breq	.+0      	; 0xa68 <_ZN6StringpLERKS_+0x98>
    strcat( _buffer, other._buffer );
     a68:	eb 81       	ldd	r30, Y+3	; 0x03
     a6a:	fc 81       	ldd	r31, Y+4	; 0x04
     a6c:	80 81       	ld	r24, Z
     a6e:	91 81       	ldd	r25, Z+1	; 0x01
     a70:	ed 81       	ldd	r30, Y+5	; 0x05
     a72:	fe 81       	ldd	r31, Y+6	; 0x06
     a74:	20 81       	ld	r18, Z
     a76:	31 81       	ldd	r19, Z+1	; 0x01
     a78:	b9 01       	movw	r22, r18
     a7a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  return *this;
     a7e:	8b 81       	ldd	r24, Y+3	; 0x03
     a80:	9c 81       	ldd	r25, Y+4	; 0x04
}
     a82:	26 96       	adiw	r28, 0x06	; 6
     a84:	0f b6       	in	r0, 0x3f	; 63
     a86:	f8 94       	cli
     a88:	de bf       	out	0x3e, r29	; 62
     a8a:	0f be       	out	0x3f, r0	; 63
     a8c:	cd bf       	out	0x3d, r28	; 61
     a8e:	cf 91       	pop	r28
     a90:	df 91       	pop	r29
     a92:	08 95       	ret

00000a94 <_ZN6String6concatERKS_>:
int String::compareTo( const String &s2 ) const
{
  return strcmp( _buffer, s2._buffer );
}

const String & String::concat( const String &s2 )
     a94:	df 93       	push	r29
     a96:	cf 93       	push	r28
     a98:	00 d0       	rcall	.+0      	; 0xa9a <_ZN6String6concatERKS_+0x6>
     a9a:	00 d0       	rcall	.+0      	; 0xa9c <_ZN6String6concatERKS_+0x8>
     a9c:	cd b7       	in	r28, 0x3d	; 61
     a9e:	de b7       	in	r29, 0x3e	; 62
     aa0:	9a 83       	std	Y+2, r25	; 0x02
     aa2:	89 83       	std	Y+1, r24	; 0x01
     aa4:	7c 83       	std	Y+4, r23	; 0x04
     aa6:	6b 83       	std	Y+3, r22	; 0x03
{
  return (*this) += s2;
     aa8:	89 81       	ldd	r24, Y+1	; 0x01
     aaa:	9a 81       	ldd	r25, Y+2	; 0x02
     aac:	2b 81       	ldd	r18, Y+3	; 0x03
     aae:	3c 81       	ldd	r19, Y+4	; 0x04
     ab0:	b9 01       	movw	r22, r18
     ab2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     ab6:	0f 90       	pop	r0
     ab8:	0f 90       	pop	r0
     aba:	0f 90       	pop	r0
     abc:	0f 90       	pop	r0
     abe:	cf 91       	pop	r28
     ac0:	df 91       	pop	r29
     ac2:	08 95       	ret

00000ac4 <_ZN6StringaSERKS_>:

const String & String::operator=( const String &rhs )
     ac4:	df 93       	push	r29
     ac6:	cf 93       	push	r28
     ac8:	00 d0       	rcall	.+0      	; 0xaca <_ZN6StringaSERKS_+0x6>
     aca:	00 d0       	rcall	.+0      	; 0xacc <_ZN6StringaSERKS_+0x8>
     acc:	00 d0       	rcall	.+0      	; 0xace <_ZN6StringaSERKS_+0xa>
     ace:	cd b7       	in	r28, 0x3d	; 61
     ad0:	de b7       	in	r29, 0x3e	; 62
     ad2:	9a 83       	std	Y+2, r25	; 0x02
     ad4:	89 83       	std	Y+1, r24	; 0x01
     ad6:	7c 83       	std	Y+4, r23	; 0x04
     ad8:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( this == &rhs )
     ada:	29 81       	ldd	r18, Y+1	; 0x01
     adc:	3a 81       	ldd	r19, Y+2	; 0x02
     ade:	8b 81       	ldd	r24, Y+3	; 0x03
     ae0:	9c 81       	ldd	r25, Y+4	; 0x04
     ae2:	28 17       	cp	r18, r24
     ae4:	39 07       	cpc	r19, r25
     ae6:	01 f4       	brne	.+0      	; 0xae8 <_ZN6StringaSERKS_+0x24>
    return *this;
     ae8:	89 81       	ldd	r24, Y+1	; 0x01
     aea:	9a 81       	ldd	r25, Y+2	; 0x02
     aec:	9e 83       	std	Y+6, r25	; 0x06
     aee:	8d 83       	std	Y+5, r24	; 0x05
     af0:	00 c0       	rjmp	.+0      	; 0xaf2 <_ZN6StringaSERKS_+0x2e>

  if ( rhs._length > _length )
     af2:	eb 81       	ldd	r30, Y+3	; 0x03
     af4:	fc 81       	ldd	r31, Y+4	; 0x04
     af6:	24 81       	ldd	r18, Z+4	; 0x04
     af8:	35 81       	ldd	r19, Z+5	; 0x05
     afa:	e9 81       	ldd	r30, Y+1	; 0x01
     afc:	fa 81       	ldd	r31, Y+2	; 0x02
     afe:	84 81       	ldd	r24, Z+4	; 0x04
     b00:	95 81       	ldd	r25, Z+5	; 0x05
     b02:	82 17       	cp	r24, r18
     b04:	93 07       	cpc	r25, r19
     b06:	00 f4       	brcc	.+0      	; 0xb08 <_ZN6StringaSERKS_+0x44>
  {
    free(_buffer);
     b08:	e9 81       	ldd	r30, Y+1	; 0x01
     b0a:	fa 81       	ldd	r31, Y+2	; 0x02
     b0c:	80 81       	ld	r24, Z
     b0e:	91 81       	ldd	r25, Z+1	; 0x01
     b10:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    getBuffer( rhs._length );
     b14:	eb 81       	ldd	r30, Y+3	; 0x03
     b16:	fc 81       	ldd	r31, Y+4	; 0x04
     b18:	24 81       	ldd	r18, Z+4	; 0x04
     b1a:	35 81       	ldd	r19, Z+5	; 0x05
     b1c:	89 81       	ldd	r24, Y+1	; 0x01
     b1e:	9a 81       	ldd	r25, Y+2	; 0x02
     b20:	b9 01       	movw	r22, r18
     b22:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
  
  if ( _buffer != NULL ) {
     b26:	e9 81       	ldd	r30, Y+1	; 0x01
     b28:	fa 81       	ldd	r31, Y+2	; 0x02
     b2a:	80 81       	ld	r24, Z
     b2c:	91 81       	ldd	r25, Z+1	; 0x01
     b2e:	00 97       	sbiw	r24, 0x00	; 0
     b30:	01 f0       	breq	.+0      	; 0xb32 <_ZN6StringaSERKS_+0x6e>
    _length = rhs._length;
     b32:	eb 81       	ldd	r30, Y+3	; 0x03
     b34:	fc 81       	ldd	r31, Y+4	; 0x04
     b36:	84 81       	ldd	r24, Z+4	; 0x04
     b38:	95 81       	ldd	r25, Z+5	; 0x05
     b3a:	e9 81       	ldd	r30, Y+1	; 0x01
     b3c:	fa 81       	ldd	r31, Y+2	; 0x02
     b3e:	95 83       	std	Z+5, r25	; 0x05
     b40:	84 83       	std	Z+4, r24	; 0x04
    strcpy( _buffer, rhs._buffer );
     b42:	e9 81       	ldd	r30, Y+1	; 0x01
     b44:	fa 81       	ldd	r31, Y+2	; 0x02
     b46:	80 81       	ld	r24, Z
     b48:	91 81       	ldd	r25, Z+1	; 0x01
     b4a:	eb 81       	ldd	r30, Y+3	; 0x03
     b4c:	fc 81       	ldd	r31, Y+4	; 0x04
     b4e:	20 81       	ld	r18, Z
     b50:	31 81       	ldd	r19, Z+1	; 0x01
     b52:	b9 01       	movw	r22, r18
     b54:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  }
  return *this;
     b58:	89 81       	ldd	r24, Y+1	; 0x01
     b5a:	9a 81       	ldd	r25, Y+2	; 0x02
     b5c:	9e 83       	std	Y+6, r25	; 0x06
     b5e:	8d 83       	std	Y+5, r24	; 0x05
     b60:	8d 81       	ldd	r24, Y+5	; 0x05
     b62:	9e 81       	ldd	r25, Y+6	; 0x06
}
     b64:	26 96       	adiw	r28, 0x06	; 6
     b66:	0f b6       	in	r0, 0x3f	; 63
     b68:	f8 94       	cli
     b6a:	de bf       	out	0x3e, r29	; 62
     b6c:	0f be       	out	0x3f, r0	; 63
     b6e:	cd bf       	out	0x3d, r28	; 61
     b70:	cf 91       	pop	r28
     b72:	df 91       	pop	r29
     b74:	08 95       	ret

00000b76 <_ZN6StringC1Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
     b76:	df 93       	push	r29
     b78:	cf 93       	push	r28
     b7a:	00 d0       	rcall	.+0      	; 0xb7c <_ZN6StringC1Eh+0x6>
     b7c:	0f 92       	push	r0
     b7e:	cd b7       	in	r28, 0x3d	; 61
     b80:	de b7       	in	r29, 0x3e	; 62
     b82:	9a 83       	std	Y+2, r25	; 0x02
     b84:	89 83       	std	Y+1, r24	; 0x01
     b86:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     b88:	e9 81       	ldd	r30, Y+1	; 0x01
     b8a:	fa 81       	ldd	r31, Y+2	; 0x02
     b8c:	81 e0       	ldi	r24, 0x01	; 1
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	95 83       	std	Z+5, r25	; 0x05
     b92:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     b94:	89 81       	ldd	r24, Y+1	; 0x01
     b96:	9a 81       	ldd	r25, Y+2	; 0x02
     b98:	61 e0       	ldi	r22, 0x01	; 1
     b9a:	70 e0       	ldi	r23, 0x00	; 0
     b9c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL) {
     ba0:	e9 81       	ldd	r30, Y+1	; 0x01
     ba2:	fa 81       	ldd	r31, Y+2	; 0x02
     ba4:	80 81       	ld	r24, Z
     ba6:	91 81       	ldd	r25, Z+1	; 0x01
     ba8:	00 97       	sbiw	r24, 0x00	; 0
     baa:	01 f0       	breq	.+0      	; 0xbac <_ZN6StringC1Eh+0x36>
    _buffer[0] = value;
     bac:	e9 81       	ldd	r30, Y+1	; 0x01
     bae:	fa 81       	ldd	r31, Y+2	; 0x02
     bb0:	01 90       	ld	r0, Z+
     bb2:	f0 81       	ld	r31, Z
     bb4:	e0 2d       	mov	r30, r0
     bb6:	8b 81       	ldd	r24, Y+3	; 0x03
     bb8:	80 83       	st	Z, r24
    _buffer[1] = 0;
     bba:	e9 81       	ldd	r30, Y+1	; 0x01
     bbc:	fa 81       	ldd	r31, Y+2	; 0x02
     bbe:	80 81       	ld	r24, Z
     bc0:	91 81       	ldd	r25, Z+1	; 0x01
     bc2:	fc 01       	movw	r30, r24
     bc4:	31 96       	adiw	r30, 0x01	; 1
     bc6:	10 82       	st	Z, r1
  }
}
     bc8:	0f 90       	pop	r0
     bca:	0f 90       	pop	r0
     bcc:	0f 90       	pop	r0
     bce:	cf 91       	pop	r28
     bd0:	df 91       	pop	r29
     bd2:	08 95       	ret

00000bd4 <_ZN6StringC2Eh>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const unsigned char value )
     bd4:	df 93       	push	r29
     bd6:	cf 93       	push	r28
     bd8:	00 d0       	rcall	.+0      	; 0xbda <_ZN6StringC2Eh+0x6>
     bda:	0f 92       	push	r0
     bdc:	cd b7       	in	r28, 0x3d	; 61
     bde:	de b7       	in	r29, 0x3e	; 62
     be0:	9a 83       	std	Y+2, r25	; 0x02
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     be6:	e9 81       	ldd	r30, Y+1	; 0x01
     be8:	fa 81       	ldd	r31, Y+2	; 0x02
     bea:	81 e0       	ldi	r24, 0x01	; 1
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	95 83       	std	Z+5, r25	; 0x05
     bf0:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     bf2:	89 81       	ldd	r24, Y+1	; 0x01
     bf4:	9a 81       	ldd	r25, Y+2	; 0x02
     bf6:	61 e0       	ldi	r22, 0x01	; 1
     bf8:	70 e0       	ldi	r23, 0x00	; 0
     bfa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL) {
     bfe:	e9 81       	ldd	r30, Y+1	; 0x01
     c00:	fa 81       	ldd	r31, Y+2	; 0x02
     c02:	80 81       	ld	r24, Z
     c04:	91 81       	ldd	r25, Z+1	; 0x01
     c06:	00 97       	sbiw	r24, 0x00	; 0
     c08:	01 f0       	breq	.+0      	; 0xc0a <_ZN6StringC2Eh+0x36>
    _buffer[0] = value;
     c0a:	e9 81       	ldd	r30, Y+1	; 0x01
     c0c:	fa 81       	ldd	r31, Y+2	; 0x02
     c0e:	01 90       	ld	r0, Z+
     c10:	f0 81       	ld	r31, Z
     c12:	e0 2d       	mov	r30, r0
     c14:	8b 81       	ldd	r24, Y+3	; 0x03
     c16:	80 83       	st	Z, r24
    _buffer[1] = 0;
     c18:	e9 81       	ldd	r30, Y+1	; 0x01
     c1a:	fa 81       	ldd	r31, Y+2	; 0x02
     c1c:	80 81       	ld	r24, Z
     c1e:	91 81       	ldd	r25, Z+1	; 0x01
     c20:	fc 01       	movw	r30, r24
     c22:	31 96       	adiw	r30, 0x01	; 1
     c24:	10 82       	st	Z, r1
  }
}
     c26:	0f 90       	pop	r0
     c28:	0f 90       	pop	r0
     c2a:	0f 90       	pop	r0
     c2c:	cf 91       	pop	r28
     c2e:	df 91       	pop	r29
     c30:	08 95       	ret

00000c32 <_ZN6StringC1Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
     c32:	df 93       	push	r29
     c34:	cf 93       	push	r28
     c36:	00 d0       	rcall	.+0      	; 0xc38 <_ZN6StringC1Ec+0x6>
     c38:	0f 92       	push	r0
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
     c3e:	9a 83       	std	Y+2, r25	; 0x02
     c40:	89 83       	std	Y+1, r24	; 0x01
     c42:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     c44:	e9 81       	ldd	r30, Y+1	; 0x01
     c46:	fa 81       	ldd	r31, Y+2	; 0x02
     c48:	81 e0       	ldi	r24, 0x01	; 1
     c4a:	90 e0       	ldi	r25, 0x00	; 0
     c4c:	95 83       	std	Z+5, r25	; 0x05
     c4e:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     c50:	89 81       	ldd	r24, Y+1	; 0x01
     c52:	9a 81       	ldd	r25, Y+2	; 0x02
     c54:	61 e0       	ldi	r22, 0x01	; 1
     c56:	70 e0       	ldi	r23, 0x00	; 0
     c58:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL ) {
     c5c:	e9 81       	ldd	r30, Y+1	; 0x01
     c5e:	fa 81       	ldd	r31, Y+2	; 0x02
     c60:	80 81       	ld	r24, Z
     c62:	91 81       	ldd	r25, Z+1	; 0x01
     c64:	00 97       	sbiw	r24, 0x00	; 0
     c66:	01 f0       	breq	.+0      	; 0xc68 <_ZN6StringC1Ec+0x36>
    _buffer[0] = value;
     c68:	e9 81       	ldd	r30, Y+1	; 0x01
     c6a:	fa 81       	ldd	r31, Y+2	; 0x02
     c6c:	01 90       	ld	r0, Z+
     c6e:	f0 81       	ld	r31, Z
     c70:	e0 2d       	mov	r30, r0
     c72:	8b 81       	ldd	r24, Y+3	; 0x03
     c74:	80 83       	st	Z, r24
    _buffer[1] = 0;
     c76:	e9 81       	ldd	r30, Y+1	; 0x01
     c78:	fa 81       	ldd	r31, Y+2	; 0x02
     c7a:	80 81       	ld	r24, Z
     c7c:	91 81       	ldd	r25, Z+1	; 0x01
     c7e:	fc 01       	movw	r30, r24
     c80:	31 96       	adiw	r30, 0x01	; 1
     c82:	10 82       	st	Z, r1
  }
}
     c84:	0f 90       	pop	r0
     c86:	0f 90       	pop	r0
     c88:	0f 90       	pop	r0
     c8a:	cf 91       	pop	r28
     c8c:	df 91       	pop	r29
     c8e:	08 95       	ret

00000c90 <_ZN6StringC2Ec>:
  getBuffer( _length = value._length );
  if ( _buffer != NULL )
    strcpy( _buffer, value._buffer );
}

String::String( const char value )
     c90:	df 93       	push	r29
     c92:	cf 93       	push	r28
     c94:	00 d0       	rcall	.+0      	; 0xc96 <_ZN6StringC2Ec+0x6>
     c96:	0f 92       	push	r0
     c98:	cd b7       	in	r28, 0x3d	; 61
     c9a:	de b7       	in	r29, 0x3e	; 62
     c9c:	9a 83       	std	Y+2, r25	; 0x02
     c9e:	89 83       	std	Y+1, r24	; 0x01
     ca0:	6b 83       	std	Y+3, r22	; 0x03
{
  _length = 1;
     ca2:	e9 81       	ldd	r30, Y+1	; 0x01
     ca4:	fa 81       	ldd	r31, Y+2	; 0x02
     ca6:	81 e0       	ldi	r24, 0x01	; 1
     ca8:	90 e0       	ldi	r25, 0x00	; 0
     caa:	95 83       	std	Z+5, r25	; 0x05
     cac:	84 83       	std	Z+4, r24	; 0x04
  getBuffer(1);
     cae:	89 81       	ldd	r24, Y+1	; 0x01
     cb0:	9a 81       	ldd	r25, Y+2	; 0x02
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL ) {
     cba:	e9 81       	ldd	r30, Y+1	; 0x01
     cbc:	fa 81       	ldd	r31, Y+2	; 0x02
     cbe:	80 81       	ld	r24, Z
     cc0:	91 81       	ldd	r25, Z+1	; 0x01
     cc2:	00 97       	sbiw	r24, 0x00	; 0
     cc4:	01 f0       	breq	.+0      	; 0xcc6 <_ZN6StringC2Ec+0x36>
    _buffer[0] = value;
     cc6:	e9 81       	ldd	r30, Y+1	; 0x01
     cc8:	fa 81       	ldd	r31, Y+2	; 0x02
     cca:	01 90       	ld	r0, Z+
     ccc:	f0 81       	ld	r31, Z
     cce:	e0 2d       	mov	r30, r0
     cd0:	8b 81       	ldd	r24, Y+3	; 0x03
     cd2:	80 83       	st	Z, r24
    _buffer[1] = 0;
     cd4:	e9 81       	ldd	r30, Y+1	; 0x01
     cd6:	fa 81       	ldd	r31, Y+2	; 0x02
     cd8:	80 81       	ld	r24, Z
     cda:	91 81       	ldd	r25, Z+1	; 0x01
     cdc:	fc 01       	movw	r30, r24
     cde:	31 96       	adiw	r30, 0x01	; 1
     ce0:	10 82       	st	Z, r1
  }
}
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	0f 90       	pop	r0
     ce8:	cf 91       	pop	r28
     cea:	df 91       	pop	r29
     cec:	08 95       	ret

00000cee <_ZN6StringC1ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
     cee:	df 93       	push	r29
     cf0:	cf 93       	push	r28
     cf2:	00 d0       	rcall	.+0      	; 0xcf4 <_ZN6StringC1ERKS_+0x6>
     cf4:	00 d0       	rcall	.+0      	; 0xcf6 <_ZN6StringC1ERKS_+0x8>
     cf6:	cd b7       	in	r28, 0x3d	; 61
     cf8:	de b7       	in	r29, 0x3e	; 62
     cfa:	9a 83       	std	Y+2, r25	; 0x02
     cfc:	89 83       	std	Y+1, r24	; 0x01
     cfe:	7c 83       	std	Y+4, r23	; 0x04
     d00:	6b 83       	std	Y+3, r22	; 0x03
{
  getBuffer( _length = value._length );
     d02:	eb 81       	ldd	r30, Y+3	; 0x03
     d04:	fc 81       	ldd	r31, Y+4	; 0x04
     d06:	84 81       	ldd	r24, Z+4	; 0x04
     d08:	95 81       	ldd	r25, Z+5	; 0x05
     d0a:	e9 81       	ldd	r30, Y+1	; 0x01
     d0c:	fa 81       	ldd	r31, Y+2	; 0x02
     d0e:	95 83       	std	Z+5, r25	; 0x05
     d10:	84 83       	std	Z+4, r24	; 0x04
     d12:	e9 81       	ldd	r30, Y+1	; 0x01
     d14:	fa 81       	ldd	r31, Y+2	; 0x02
     d16:	24 81       	ldd	r18, Z+4	; 0x04
     d18:	35 81       	ldd	r19, Z+5	; 0x05
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	9a 81       	ldd	r25, Y+2	; 0x02
     d1e:	b9 01       	movw	r22, r18
     d20:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     d24:	e9 81       	ldd	r30, Y+1	; 0x01
     d26:	fa 81       	ldd	r31, Y+2	; 0x02
     d28:	80 81       	ld	r24, Z
     d2a:	91 81       	ldd	r25, Z+1	; 0x01
     d2c:	00 97       	sbiw	r24, 0x00	; 0
     d2e:	01 f0       	breq	.+0      	; 0xd30 <_ZN6StringC1ERKS_+0x42>
    strcpy( _buffer, value._buffer );
     d30:	e9 81       	ldd	r30, Y+1	; 0x01
     d32:	fa 81       	ldd	r31, Y+2	; 0x02
     d34:	80 81       	ld	r24, Z
     d36:	91 81       	ldd	r25, Z+1	; 0x01
     d38:	eb 81       	ldd	r30, Y+3	; 0x03
     d3a:	fc 81       	ldd	r31, Y+4	; 0x04
     d3c:	20 81       	ld	r18, Z
     d3e:	31 81       	ldd	r19, Z+1	; 0x01
     d40:	b9 01       	movw	r22, r18
     d42:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     d46:	0f 90       	pop	r0
     d48:	0f 90       	pop	r0
     d4a:	0f 90       	pop	r0
     d4c:	0f 90       	pop	r0
     d4e:	cf 91       	pop	r28
     d50:	df 91       	pop	r29
     d52:	08 95       	ret

00000d54 <_ZN6StringC2ERKS_>:
  getBuffer( _length = strlen( value ) );
  if ( _buffer != NULL )
    strcpy( _buffer, value );
}

String::String( const String &value )
     d54:	df 93       	push	r29
     d56:	cf 93       	push	r28
     d58:	00 d0       	rcall	.+0      	; 0xd5a <_ZN6StringC2ERKS_+0x6>
     d5a:	00 d0       	rcall	.+0      	; 0xd5c <_ZN6StringC2ERKS_+0x8>
     d5c:	cd b7       	in	r28, 0x3d	; 61
     d5e:	de b7       	in	r29, 0x3e	; 62
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	7c 83       	std	Y+4, r23	; 0x04
     d66:	6b 83       	std	Y+3, r22	; 0x03
{
  getBuffer( _length = value._length );
     d68:	eb 81       	ldd	r30, Y+3	; 0x03
     d6a:	fc 81       	ldd	r31, Y+4	; 0x04
     d6c:	84 81       	ldd	r24, Z+4	; 0x04
     d6e:	95 81       	ldd	r25, Z+5	; 0x05
     d70:	e9 81       	ldd	r30, Y+1	; 0x01
     d72:	fa 81       	ldd	r31, Y+2	; 0x02
     d74:	95 83       	std	Z+5, r25	; 0x05
     d76:	84 83       	std	Z+4, r24	; 0x04
     d78:	e9 81       	ldd	r30, Y+1	; 0x01
     d7a:	fa 81       	ldd	r31, Y+2	; 0x02
     d7c:	24 81       	ldd	r18, Z+4	; 0x04
     d7e:	35 81       	ldd	r19, Z+5	; 0x05
     d80:	89 81       	ldd	r24, Y+1	; 0x01
     d82:	9a 81       	ldd	r25, Y+2	; 0x02
     d84:	b9 01       	movw	r22, r18
     d86:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     d8a:	e9 81       	ldd	r30, Y+1	; 0x01
     d8c:	fa 81       	ldd	r31, Y+2	; 0x02
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	00 97       	sbiw	r24, 0x00	; 0
     d94:	01 f0       	breq	.+0      	; 0xd96 <_ZN6StringC2ERKS_+0x42>
    strcpy( _buffer, value._buffer );
     d96:	e9 81       	ldd	r30, Y+1	; 0x01
     d98:	fa 81       	ldd	r31, Y+2	; 0x02
     d9a:	80 81       	ld	r24, Z
     d9c:	91 81       	ldd	r25, Z+1	; 0x01
     d9e:	eb 81       	ldd	r30, Y+3	; 0x03
     da0:	fc 81       	ldd	r31, Y+4	; 0x04
     da2:	20 81       	ld	r18, Z
     da4:	31 81       	ldd	r19, Z+1	; 0x01
     da6:	b9 01       	movw	r22, r18
     da8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	cf 91       	pop	r28
     db6:	df 91       	pop	r29
     db8:	08 95       	ret

00000dba <_ZN6StringC1Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
     dba:	df 93       	push	r29
     dbc:	cf 93       	push	r28
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	a9 97       	sbiw	r28, 0x29	; 41
     dc4:	0f b6       	in	r0, 0x3f	; 63
     dc6:	f8 94       	cli
     dc8:	de bf       	out	0x3e, r29	; 62
     dca:	0f be       	out	0x3f, r0	; 63
     dcc:	cd bf       	out	0x3d, r28	; 61
     dce:	9b a3       	std	Y+35, r25	; 0x23
     dd0:	8a a3       	std	Y+34, r24	; 0x22
     dd2:	4c a3       	std	Y+36, r20	; 0x24
     dd4:	5d a3       	std	Y+37, r21	; 0x25
     dd6:	6e a3       	std	Y+38, r22	; 0x26
     dd8:	7f a3       	std	Y+39, r23	; 0x27
     dda:	39 a7       	std	Y+41, r19	; 0x29
     ddc:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ultoa(value, buf, 10);
     dde:	8c a1       	ldd	r24, Y+36	; 0x24
     de0:	9d a1       	ldd	r25, Y+37	; 0x25
     de2:	ae a1       	ldd	r26, Y+38	; 0x26
     de4:	bf a1       	ldd	r27, Y+39	; 0x27
     de6:	bc 01       	movw	r22, r24
     de8:	cd 01       	movw	r24, r26
     dea:	9e 01       	movw	r18, r28
     dec:	2f 5f       	subi	r18, 0xFF	; 255
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	a9 01       	movw	r20, r18
     df2:	2a e0       	ldi	r18, 0x0A	; 10
     df4:	30 e0       	ldi	r19, 0x00	; 0
     df6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
     dfa:	ce 01       	movw	r24, r28
     dfc:	01 96       	adiw	r24, 0x01	; 1
     dfe:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     e02:	ea a1       	ldd	r30, Y+34	; 0x22
     e04:	fb a1       	ldd	r31, Y+35	; 0x23
     e06:	95 83       	std	Z+5, r25	; 0x05
     e08:	84 83       	std	Z+4, r24	; 0x04
     e0a:	ea a1       	ldd	r30, Y+34	; 0x22
     e0c:	fb a1       	ldd	r31, Y+35	; 0x23
     e0e:	24 81       	ldd	r18, Z+4	; 0x04
     e10:	35 81       	ldd	r19, Z+5	; 0x05
     e12:	8a a1       	ldd	r24, Y+34	; 0x22
     e14:	9b a1       	ldd	r25, Y+35	; 0x23
     e16:	b9 01       	movw	r22, r18
     e18:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     e1c:	ea a1       	ldd	r30, Y+34	; 0x22
     e1e:	fb a1       	ldd	r31, Y+35	; 0x23
     e20:	80 81       	ld	r24, Z
     e22:	91 81       	ldd	r25, Z+1	; 0x01
     e24:	00 97       	sbiw	r24, 0x00	; 0
     e26:	01 f0       	breq	.+0      	; 0xe28 <_ZN6StringC1Emi+0x6e>
    strcpy( _buffer, buf );
     e28:	ea a1       	ldd	r30, Y+34	; 0x22
     e2a:	fb a1       	ldd	r31, Y+35	; 0x23
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	9e 01       	movw	r18, r28
     e32:	2f 5f       	subi	r18, 0xFF	; 255
     e34:	3f 4f       	sbci	r19, 0xFF	; 255
     e36:	b9 01       	movw	r22, r18
     e38:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     e3c:	a9 96       	adiw	r28, 0x29	; 41
     e3e:	0f b6       	in	r0, 0x3f	; 63
     e40:	f8 94       	cli
     e42:	de bf       	out	0x3e, r29	; 62
     e44:	0f be       	out	0x3f, r0	; 63
     e46:	cd bf       	out	0x3d, r28	; 61
     e48:	cf 91       	pop	r28
     e4a:	df 91       	pop	r29
     e4c:	08 95       	ret

00000e4e <_ZN6StringC2Emi>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned long value, const int base )
     e4e:	df 93       	push	r29
     e50:	cf 93       	push	r28
     e52:	cd b7       	in	r28, 0x3d	; 61
     e54:	de b7       	in	r29, 0x3e	; 62
     e56:	a9 97       	sbiw	r28, 0x29	; 41
     e58:	0f b6       	in	r0, 0x3f	; 63
     e5a:	f8 94       	cli
     e5c:	de bf       	out	0x3e, r29	; 62
     e5e:	0f be       	out	0x3f, r0	; 63
     e60:	cd bf       	out	0x3d, r28	; 61
     e62:	9b a3       	std	Y+35, r25	; 0x23
     e64:	8a a3       	std	Y+34, r24	; 0x22
     e66:	4c a3       	std	Y+36, r20	; 0x24
     e68:	5d a3       	std	Y+37, r21	; 0x25
     e6a:	6e a3       	std	Y+38, r22	; 0x26
     e6c:	7f a3       	std	Y+39, r23	; 0x27
     e6e:	39 a7       	std	Y+41, r19	; 0x29
     e70:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ultoa(value, buf, 10);
     e72:	8c a1       	ldd	r24, Y+36	; 0x24
     e74:	9d a1       	ldd	r25, Y+37	; 0x25
     e76:	ae a1       	ldd	r26, Y+38	; 0x26
     e78:	bf a1       	ldd	r27, Y+39	; 0x27
     e7a:	bc 01       	movw	r22, r24
     e7c:	cd 01       	movw	r24, r26
     e7e:	9e 01       	movw	r18, r28
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	a9 01       	movw	r20, r18
     e86:	2a e0       	ldi	r18, 0x0A	; 10
     e88:	30 e0       	ldi	r19, 0x00	; 0
     e8a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
     e8e:	ce 01       	movw	r24, r28
     e90:	01 96       	adiw	r24, 0x01	; 1
     e92:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     e96:	ea a1       	ldd	r30, Y+34	; 0x22
     e98:	fb a1       	ldd	r31, Y+35	; 0x23
     e9a:	95 83       	std	Z+5, r25	; 0x05
     e9c:	84 83       	std	Z+4, r24	; 0x04
     e9e:	ea a1       	ldd	r30, Y+34	; 0x22
     ea0:	fb a1       	ldd	r31, Y+35	; 0x23
     ea2:	24 81       	ldd	r18, Z+4	; 0x04
     ea4:	35 81       	ldd	r19, Z+5	; 0x05
     ea6:	8a a1       	ldd	r24, Y+34	; 0x22
     ea8:	9b a1       	ldd	r25, Y+35	; 0x23
     eaa:	b9 01       	movw	r22, r18
     eac:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     eb0:	ea a1       	ldd	r30, Y+34	; 0x22
     eb2:	fb a1       	ldd	r31, Y+35	; 0x23
     eb4:	80 81       	ld	r24, Z
     eb6:	91 81       	ldd	r25, Z+1	; 0x01
     eb8:	00 97       	sbiw	r24, 0x00	; 0
     eba:	01 f0       	breq	.+0      	; 0xebc <_ZN6StringC2Emi+0x6e>
    strcpy( _buffer, buf );
     ebc:	ea a1       	ldd	r30, Y+34	; 0x22
     ebe:	fb a1       	ldd	r31, Y+35	; 0x23
     ec0:	80 81       	ld	r24, Z
     ec2:	91 81       	ldd	r25, Z+1	; 0x01
     ec4:	9e 01       	movw	r18, r28
     ec6:	2f 5f       	subi	r18, 0xFF	; 255
     ec8:	3f 4f       	sbci	r19, 0xFF	; 255
     eca:	b9 01       	movw	r22, r18
     ecc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     ed0:	a9 96       	adiw	r28, 0x29	; 41
     ed2:	0f b6       	in	r0, 0x3f	; 63
     ed4:	f8 94       	cli
     ed6:	de bf       	out	0x3e, r29	; 62
     ed8:	0f be       	out	0x3f, r0	; 63
     eda:	cd bf       	out	0x3d, r28	; 61
     edc:	cf 91       	pop	r28
     ede:	df 91       	pop	r29
     ee0:	08 95       	ret

00000ee2 <_ZN6StringC1Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
     ee2:	df 93       	push	r29
     ee4:	cf 93       	push	r28
     ee6:	cd b7       	in	r28, 0x3d	; 61
     ee8:	de b7       	in	r29, 0x3e	; 62
     eea:	a7 97       	sbiw	r28, 0x27	; 39
     eec:	0f b6       	in	r0, 0x3f	; 63
     eee:	f8 94       	cli
     ef0:	de bf       	out	0x3e, r29	; 62
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	cd bf       	out	0x3d, r28	; 61
     ef6:	9b a3       	std	Y+35, r25	; 0x23
     ef8:	8a a3       	std	Y+34, r24	; 0x22
     efa:	7d a3       	std	Y+37, r23	; 0x25
     efc:	6c a3       	std	Y+36, r22	; 0x24
     efe:	5f a3       	std	Y+39, r21	; 0x27
     f00:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
     f02:	8c a1       	ldd	r24, Y+36	; 0x24
     f04:	9d a1       	ldd	r25, Y+37	; 0x25
     f06:	cc 01       	movw	r24, r24
     f08:	a0 e0       	ldi	r26, 0x00	; 0
     f0a:	b0 e0       	ldi	r27, 0x00	; 0
     f0c:	ee a1       	ldd	r30, Y+38	; 0x26
     f0e:	ff a1       	ldd	r31, Y+39	; 0x27
     f10:	bc 01       	movw	r22, r24
     f12:	cd 01       	movw	r24, r26
     f14:	9e 01       	movw	r18, r28
     f16:	2f 5f       	subi	r18, 0xFF	; 255
     f18:	3f 4f       	sbci	r19, 0xFF	; 255
     f1a:	a9 01       	movw	r20, r18
     f1c:	9f 01       	movw	r18, r30
     f1e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
     f22:	ce 01       	movw	r24, r28
     f24:	01 96       	adiw	r24, 0x01	; 1
     f26:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     f2a:	ea a1       	ldd	r30, Y+34	; 0x22
     f2c:	fb a1       	ldd	r31, Y+35	; 0x23
     f2e:	95 83       	std	Z+5, r25	; 0x05
     f30:	84 83       	std	Z+4, r24	; 0x04
     f32:	ea a1       	ldd	r30, Y+34	; 0x22
     f34:	fb a1       	ldd	r31, Y+35	; 0x23
     f36:	24 81       	ldd	r18, Z+4	; 0x04
     f38:	35 81       	ldd	r19, Z+5	; 0x05
     f3a:	8a a1       	ldd	r24, Y+34	; 0x22
     f3c:	9b a1       	ldd	r25, Y+35	; 0x23
     f3e:	b9 01       	movw	r22, r18
     f40:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     f44:	ea a1       	ldd	r30, Y+34	; 0x22
     f46:	fb a1       	ldd	r31, Y+35	; 0x23
     f48:	80 81       	ld	r24, Z
     f4a:	91 81       	ldd	r25, Z+1	; 0x01
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	01 f0       	breq	.+0      	; 0xf50 <_ZN6StringC1Eji+0x6e>
    strcpy( _buffer, buf );
     f50:	ea a1       	ldd	r30, Y+34	; 0x22
     f52:	fb a1       	ldd	r31, Y+35	; 0x23
     f54:	80 81       	ld	r24, Z
     f56:	91 81       	ldd	r25, Z+1	; 0x01
     f58:	9e 01       	movw	r18, r28
     f5a:	2f 5f       	subi	r18, 0xFF	; 255
     f5c:	3f 4f       	sbci	r19, 0xFF	; 255
     f5e:	b9 01       	movw	r22, r18
     f60:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     f64:	a7 96       	adiw	r28, 0x27	; 39
     f66:	0f b6       	in	r0, 0x3f	; 63
     f68:	f8 94       	cli
     f6a:	de bf       	out	0x3e, r29	; 62
     f6c:	0f be       	out	0x3f, r0	; 63
     f6e:	cd bf       	out	0x3d, r28	; 61
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <_ZN6StringC2Eji>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const unsigned int value, const int base )
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
     f7e:	a7 97       	sbiw	r28, 0x27	; 39
     f80:	0f b6       	in	r0, 0x3f	; 63
     f82:	f8 94       	cli
     f84:	de bf       	out	0x3e, r29	; 62
     f86:	0f be       	out	0x3f, r0	; 63
     f88:	cd bf       	out	0x3d, r28	; 61
     f8a:	9b a3       	std	Y+35, r25	; 0x23
     f8c:	8a a3       	std	Y+34, r24	; 0x22
     f8e:	7d a3       	std	Y+37, r23	; 0x25
     f90:	6c a3       	std	Y+36, r22	; 0x24
     f92:	5f a3       	std	Y+39, r21	; 0x27
     f94:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  ultoa((unsigned long)value, buf, base);
     f96:	8c a1       	ldd	r24, Y+36	; 0x24
     f98:	9d a1       	ldd	r25, Y+37	; 0x25
     f9a:	cc 01       	movw	r24, r24
     f9c:	a0 e0       	ldi	r26, 0x00	; 0
     f9e:	b0 e0       	ldi	r27, 0x00	; 0
     fa0:	ee a1       	ldd	r30, Y+38	; 0x26
     fa2:	ff a1       	ldd	r31, Y+39	; 0x27
     fa4:	bc 01       	movw	r22, r24
     fa6:	cd 01       	movw	r24, r26
     fa8:	9e 01       	movw	r18, r28
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	a9 01       	movw	r20, r18
     fb0:	9f 01       	movw	r18, r30
     fb2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
     fb6:	ce 01       	movw	r24, r28
     fb8:	01 96       	adiw	r24, 0x01	; 1
     fba:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
     fbe:	ea a1       	ldd	r30, Y+34	; 0x22
     fc0:	fb a1       	ldd	r31, Y+35	; 0x23
     fc2:	95 83       	std	Z+5, r25	; 0x05
     fc4:	84 83       	std	Z+4, r24	; 0x04
     fc6:	ea a1       	ldd	r30, Y+34	; 0x22
     fc8:	fb a1       	ldd	r31, Y+35	; 0x23
     fca:	24 81       	ldd	r18, Z+4	; 0x04
     fcc:	35 81       	ldd	r19, Z+5	; 0x05
     fce:	8a a1       	ldd	r24, Y+34	; 0x22
     fd0:	9b a1       	ldd	r25, Y+35	; 0x23
     fd2:	b9 01       	movw	r22, r18
     fd4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
     fd8:	ea a1       	ldd	r30, Y+34	; 0x22
     fda:	fb a1       	ldd	r31, Y+35	; 0x23
     fdc:	80 81       	ld	r24, Z
     fde:	91 81       	ldd	r25, Z+1	; 0x01
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	01 f0       	breq	.+0      	; 0xfe4 <_ZN6StringC2Eji+0x6e>
    strcpy( _buffer, buf );
     fe4:	ea a1       	ldd	r30, Y+34	; 0x22
     fe6:	fb a1       	ldd	r31, Y+35	; 0x23
     fe8:	80 81       	ld	r24, Z
     fea:	91 81       	ldd	r25, Z+1	; 0x01
     fec:	9e 01       	movw	r18, r28
     fee:	2f 5f       	subi	r18, 0xFF	; 255
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	b9 01       	movw	r22, r18
     ff4:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
     ff8:	a7 96       	adiw	r28, 0x27	; 39
     ffa:	0f b6       	in	r0, 0x3f	; 63
     ffc:	f8 94       	cli
     ffe:	de bf       	out	0x3e, r29	; 62
    1000:	0f be       	out	0x3f, r0	; 63
    1002:	cd bf       	out	0x3d, r28	; 61
    1004:	cf 91       	pop	r28
    1006:	df 91       	pop	r29
    1008:	08 95       	ret

0000100a <_ZN6StringC1EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    100a:	df 93       	push	r29
    100c:	cf 93       	push	r28
    100e:	00 d0       	rcall	.+0      	; 0x1010 <_ZN6StringC1EPKc+0x6>
    1010:	00 d0       	rcall	.+0      	; 0x1012 <_ZN6StringC1EPKc+0x8>
    1012:	cd b7       	in	r28, 0x3d	; 61
    1014:	de b7       	in	r29, 0x3e	; 62
    1016:	9a 83       	std	Y+2, r25	; 0x02
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	7c 83       	std	Y+4, r23	; 0x04
    101c:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( value == NULL )
    101e:	8b 81       	ldd	r24, Y+3	; 0x03
    1020:	9c 81       	ldd	r25, Y+4	; 0x04
    1022:	00 97       	sbiw	r24, 0x00	; 0
    1024:	01 f4       	brne	.+0      	; 0x1026 <_ZN6StringC1EPKc+0x1c>
    value = "";
    1026:	80 e0       	ldi	r24, 0x00	; 0
    1028:	90 e0       	ldi	r25, 0x00	; 0
    102a:	9c 83       	std	Y+4, r25	; 0x04
    102c:	8b 83       	std	Y+3, r24	; 0x03
  getBuffer( _length = strlen( value ) );
    102e:	8b 81       	ldd	r24, Y+3	; 0x03
    1030:	9c 81       	ldd	r25, Y+4	; 0x04
    1032:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1036:	e9 81       	ldd	r30, Y+1	; 0x01
    1038:	fa 81       	ldd	r31, Y+2	; 0x02
    103a:	95 83       	std	Z+5, r25	; 0x05
    103c:	84 83       	std	Z+4, r24	; 0x04
    103e:	e9 81       	ldd	r30, Y+1	; 0x01
    1040:	fa 81       	ldd	r31, Y+2	; 0x02
    1042:	24 81       	ldd	r18, Z+4	; 0x04
    1044:	35 81       	ldd	r19, Z+5	; 0x05
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	9a 81       	ldd	r25, Y+2	; 0x02
    104a:	b9 01       	movw	r22, r18
    104c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1050:	e9 81       	ldd	r30, Y+1	; 0x01
    1052:	fa 81       	ldd	r31, Y+2	; 0x02
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	00 97       	sbiw	r24, 0x00	; 0
    105a:	01 f0       	breq	.+0      	; 0x105c <_ZN6StringC1EPKc+0x52>
    strcpy( _buffer, value );
    105c:	e9 81       	ldd	r30, Y+1	; 0x01
    105e:	fa 81       	ldd	r31, Y+2	; 0x02
    1060:	80 81       	ld	r24, Z
    1062:	91 81       	ldd	r25, Z+1	; 0x01
    1064:	2b 81       	ldd	r18, Y+3	; 0x03
    1066:	3c 81       	ldd	r19, Y+4	; 0x04
    1068:	b9 01       	movw	r22, r18
    106a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    106e:	0f 90       	pop	r0
    1070:	0f 90       	pop	r0
    1072:	0f 90       	pop	r0
    1074:	0f 90       	pop	r0
    1076:	cf 91       	pop	r28
    1078:	df 91       	pop	r29
    107a:	08 95       	ret

0000107c <_ZNK6String11toUpperCaseEv>:
  for ( unsigned int i = 0; i < _length; i++ )
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}

String String::toUpperCase() const
    107c:	0f 93       	push	r16
    107e:	1f 93       	push	r17
    1080:	df 93       	push	r29
    1082:	cf 93       	push	r28
    1084:	cd b7       	in	r28, 0x3d	; 61
    1086:	de b7       	in	r29, 0x3e	; 62
    1088:	2c 97       	sbiw	r28, 0x0c	; 12
    108a:	0f b6       	in	r0, 0x3f	; 63
    108c:	f8 94       	cli
    108e:	de bf       	out	0x3e, r29	; 62
    1090:	0f be       	out	0x3f, r0	; 63
    1092:	cd bf       	out	0x3d, r28	; 61
    1094:	9c 87       	std	Y+12, r25	; 0x0c
    1096:	8b 87       	std	Y+11, r24	; 0x0b
    1098:	7a 87       	std	Y+10, r23	; 0x0a
    109a:	69 87       	std	Y+9, r22	; 0x09
{
  String temp = _buffer;
    109c:	8b 85       	ldd	r24, Y+11	; 0x0b
    109e:	9c 85       	ldd	r25, Y+12	; 0x0c
    10a0:	e9 85       	ldd	r30, Y+9	; 0x09
    10a2:	fa 85       	ldd	r31, Y+10	; 0x0a
    10a4:	20 81       	ld	r18, Z
    10a6:	31 81       	ldd	r19, Z+1	; 0x01
    10a8:	b9 01       	movw	r22, r18
    10aa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>

  for ( unsigned int i = 0; i < _length; i++ )
    10ae:	1a 82       	std	Y+2, r1	; 0x02
    10b0:	19 82       	std	Y+1, r1	; 0x01
    10b2:	00 c0       	rjmp	.+0      	; 0x10b4 <_ZNK6String11toUpperCaseEv+0x38>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
    10b4:	eb 85       	ldd	r30, Y+11	; 0x0b
    10b6:	fc 85       	ldd	r31, Y+12	; 0x0c
    10b8:	20 81       	ld	r18, Z
    10ba:	31 81       	ldd	r19, Z+1	; 0x01
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	9a 81       	ldd	r25, Y+2	; 0x02
    10c0:	89 01       	movw	r16, r18
    10c2:	08 0f       	add	r16, r24
    10c4:	19 1f       	adc	r17, r25
    10c6:	eb 85       	ldd	r30, Y+11	; 0x0b
    10c8:	fc 85       	ldd	r31, Y+12	; 0x0c
    10ca:	20 81       	ld	r18, Z
    10cc:	31 81       	ldd	r19, Z+1	; 0x01
    10ce:	89 81       	ldd	r24, Y+1	; 0x01
    10d0:	9a 81       	ldd	r25, Y+2	; 0x02
    10d2:	f9 01       	movw	r30, r18
    10d4:	e8 0f       	add	r30, r24
    10d6:	f9 1f       	adc	r31, r25
    10d8:	80 81       	ld	r24, Z
    10da:	88 2f       	mov	r24, r24
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    10e2:	f8 01       	movw	r30, r16
    10e4:	80 83       	st	Z, r24

String String::toUpperCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    10e6:	89 81       	ldd	r24, Y+1	; 0x01
    10e8:	9a 81       	ldd	r25, Y+2	; 0x02
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	9a 83       	std	Y+2, r25	; 0x02
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	e9 85       	ldd	r30, Y+9	; 0x09
    10f2:	fa 85       	ldd	r31, Y+10	; 0x0a
    10f4:	24 81       	ldd	r18, Z+4	; 0x04
    10f6:	35 81       	ldd	r19, Z+5	; 0x05
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	9a 81       	ldd	r25, Y+2	; 0x02
    10fc:	82 17       	cp	r24, r18
    10fe:	93 07       	cpc	r25, r19
    1100:	00 f0       	brcs	.+0      	; 0x1102 <_ZNK6String11toUpperCaseEv+0x86>
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}
    1102:	8b 85       	ldd	r24, Y+11	; 0x0b
    1104:	9c 85       	ldd	r25, Y+12	; 0x0c
    1106:	8b 85       	ldd	r24, Y+11	; 0x0b
    1108:	9c 85       	ldd	r25, Y+12	; 0x0c
    110a:	2c 96       	adiw	r28, 0x0c	; 12
    110c:	0f b6       	in	r0, 0x3f	; 63
    110e:	f8 94       	cli
    1110:	de bf       	out	0x3e, r29	; 62
    1112:	0f be       	out	0x3f, r0	; 63
    1114:	cd bf       	out	0x3d, r28	; 61
    1116:	cf 91       	pop	r28
    1118:	df 91       	pop	r29
    111a:	1f 91       	pop	r17
    111c:	0f 91       	pop	r16
    111e:	08 95       	ret

00001120 <_ZNK6String11toLowerCaseEv>:
  String outPut = ( _buffer + left );  // pointer arithmetic
  _buffer[ right ] = temp;  //restore character
  return outPut;
}

String String::toLowerCase() const
    1120:	0f 93       	push	r16
    1122:	1f 93       	push	r17
    1124:	df 93       	push	r29
    1126:	cf 93       	push	r28
    1128:	cd b7       	in	r28, 0x3d	; 61
    112a:	de b7       	in	r29, 0x3e	; 62
    112c:	2c 97       	sbiw	r28, 0x0c	; 12
    112e:	0f b6       	in	r0, 0x3f	; 63
    1130:	f8 94       	cli
    1132:	de bf       	out	0x3e, r29	; 62
    1134:	0f be       	out	0x3f, r0	; 63
    1136:	cd bf       	out	0x3d, r28	; 61
    1138:	9c 87       	std	Y+12, r25	; 0x0c
    113a:	8b 87       	std	Y+11, r24	; 0x0b
    113c:	7a 87       	std	Y+10, r23	; 0x0a
    113e:	69 87       	std	Y+9, r22	; 0x09
{
  String temp = _buffer;
    1140:	8b 85       	ldd	r24, Y+11	; 0x0b
    1142:	9c 85       	ldd	r25, Y+12	; 0x0c
    1144:	e9 85       	ldd	r30, Y+9	; 0x09
    1146:	fa 85       	ldd	r31, Y+10	; 0x0a
    1148:	20 81       	ld	r18, Z
    114a:	31 81       	ldd	r19, Z+1	; 0x01
    114c:	b9 01       	movw	r22, r18
    114e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>

  for ( unsigned int i = 0; i < _length; i++ )
    1152:	1a 82       	std	Y+2, r1	; 0x02
    1154:	19 82       	std	Y+1, r1	; 0x01
    1156:	00 c0       	rjmp	.+0      	; 0x1158 <_ZNK6String11toLowerCaseEv+0x38>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
    1158:	eb 85       	ldd	r30, Y+11	; 0x0b
    115a:	fc 85       	ldd	r31, Y+12	; 0x0c
    115c:	20 81       	ld	r18, Z
    115e:	31 81       	ldd	r19, Z+1	; 0x01
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	9a 81       	ldd	r25, Y+2	; 0x02
    1164:	89 01       	movw	r16, r18
    1166:	08 0f       	add	r16, r24
    1168:	19 1f       	adc	r17, r25
    116a:	eb 85       	ldd	r30, Y+11	; 0x0b
    116c:	fc 85       	ldd	r31, Y+12	; 0x0c
    116e:	20 81       	ld	r18, Z
    1170:	31 81       	ldd	r19, Z+1	; 0x01
    1172:	89 81       	ldd	r24, Y+1	; 0x01
    1174:	9a 81       	ldd	r25, Y+2	; 0x02
    1176:	f9 01       	movw	r30, r18
    1178:	e8 0f       	add	r30, r24
    117a:	f9 1f       	adc	r31, r25
    117c:	80 81       	ld	r24, Z
    117e:	88 2f       	mov	r24, r24
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1186:	f8 01       	movw	r30, r16
    1188:	80 83       	st	Z, r24

String String::toLowerCase() const
{
  String temp = _buffer;

  for ( unsigned int i = 0; i < _length; i++ )
    118a:	89 81       	ldd	r24, Y+1	; 0x01
    118c:	9a 81       	ldd	r25, Y+2	; 0x02
    118e:	01 96       	adiw	r24, 0x01	; 1
    1190:	9a 83       	std	Y+2, r25	; 0x02
    1192:	89 83       	std	Y+1, r24	; 0x01
    1194:	e9 85       	ldd	r30, Y+9	; 0x09
    1196:	fa 85       	ldd	r31, Y+10	; 0x0a
    1198:	24 81       	ldd	r18, Z+4	; 0x04
    119a:	35 81       	ldd	r19, Z+5	; 0x05
    119c:	89 81       	ldd	r24, Y+1	; 0x01
    119e:	9a 81       	ldd	r25, Y+2	; 0x02
    11a0:	82 17       	cp	r24, r18
    11a2:	93 07       	cpc	r25, r19
    11a4:	00 f0       	brcs	.+0      	; 0x11a6 <_ZNK6String11toLowerCaseEv+0x86>
    temp._buffer[ i ] = (char)tolower( temp._buffer[ i ] );
  return temp;
}
    11a6:	8b 85       	ldd	r24, Y+11	; 0x0b
    11a8:	9c 85       	ldd	r25, Y+12	; 0x0c
    11aa:	8b 85       	ldd	r24, Y+11	; 0x0b
    11ac:	9c 85       	ldd	r25, Y+12	; 0x0c
    11ae:	2c 96       	adiw	r28, 0x0c	; 12
    11b0:	0f b6       	in	r0, 0x3f	; 63
    11b2:	f8 94       	cli
    11b4:	de bf       	out	0x3e, r29	; 62
    11b6:	0f be       	out	0x3f, r0	; 63
    11b8:	cd bf       	out	0x3d, r28	; 61
    11ba:	cf 91       	pop	r28
    11bc:	df 91       	pop	r29
    11be:	1f 91       	pop	r17
    11c0:	0f 91       	pop	r16
    11c2:	08 95       	ret

000011c4 <_ZNK6String16equalsIgnoreCaseERKS_>:
boolean String::equals( const String &s2 ) const
{
  return ( _length == s2._length && strcmp( _buffer,s2._buffer ) == 0 );
}

boolean String::equalsIgnoreCase( const String &s2 ) const
    11c4:	0f 93       	push	r16
    11c6:	1f 93       	push	r17
    11c8:	df 93       	push	r29
    11ca:	cf 93       	push	r28
    11cc:	cd b7       	in	r28, 0x3d	; 61
    11ce:	de b7       	in	r29, 0x3e	; 62
    11d0:	61 97       	sbiw	r28, 0x11	; 17
    11d2:	0f b6       	in	r0, 0x3f	; 63
    11d4:	f8 94       	cli
    11d6:	de bf       	out	0x3e, r29	; 62
    11d8:	0f be       	out	0x3f, r0	; 63
    11da:	cd bf       	out	0x3d, r28	; 61
    11dc:	9e 87       	std	Y+14, r25	; 0x0e
    11de:	8d 87       	std	Y+13, r24	; 0x0d
    11e0:	78 8b       	std	Y+16, r23	; 0x10
    11e2:	6f 87       	std	Y+15, r22	; 0x0f
{
  if ( this == &s2 )
    11e4:	2d 85       	ldd	r18, Y+13	; 0x0d
    11e6:	3e 85       	ldd	r19, Y+14	; 0x0e
    11e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    11ea:	98 89       	ldd	r25, Y+16	; 0x10
    11ec:	28 17       	cp	r18, r24
    11ee:	39 07       	cpc	r19, r25
    11f0:	01 f4       	brne	.+0      	; 0x11f2 <_ZNK6String16equalsIgnoreCaseERKS_+0x2e>
    return true; //1;
    11f2:	81 e0       	ldi	r24, 0x01	; 1
    11f4:	89 8b       	std	Y+17, r24	; 0x11
    11f6:	00 c0       	rjmp	.+0      	; 0x11f8 <_ZNK6String16equalsIgnoreCaseERKS_+0x34>
  else if ( _length != s2._length )
    11f8:	ed 85       	ldd	r30, Y+13	; 0x0d
    11fa:	fe 85       	ldd	r31, Y+14	; 0x0e
    11fc:	24 81       	ldd	r18, Z+4	; 0x04
    11fe:	35 81       	ldd	r19, Z+5	; 0x05
    1200:	ef 85       	ldd	r30, Y+15	; 0x0f
    1202:	f8 89       	ldd	r31, Y+16	; 0x10
    1204:	84 81       	ldd	r24, Z+4	; 0x04
    1206:	95 81       	ldd	r25, Z+5	; 0x05
    1208:	28 17       	cp	r18, r24
    120a:	39 07       	cpc	r19, r25
    120c:	01 f0       	breq	.+0      	; 0x120e <_ZNK6String16equalsIgnoreCaseERKS_+0x4a>
    return false; //0;
    120e:	19 8a       	std	Y+17, r1	; 0x11
    1210:	00 c0       	rjmp	.+0      	; 0x1212 <_ZNK6String16equalsIgnoreCaseERKS_+0x4e>

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
    1212:	ce 01       	movw	r24, r28
    1214:	07 96       	adiw	r24, 0x07	; 7
    1216:	2d 85       	ldd	r18, Y+13	; 0x0d
    1218:	3e 85       	ldd	r19, Y+14	; 0x0e
    121a:	b9 01       	movw	r22, r18
    121c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1220:	0f 81       	ldd	r16, Y+7	; 0x07
    1222:	18 85       	ldd	r17, Y+8	; 0x08
    1224:	2f 85       	ldd	r18, Y+15	; 0x0f
    1226:	38 89       	ldd	r19, Y+16	; 0x10
    1228:	ce 01       	movw	r24, r28
    122a:	01 96       	adiw	r24, 0x01	; 1
    122c:	b9 01       	movw	r22, r18
    122e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1232:	29 81       	ldd	r18, Y+1	; 0x01
    1234:	3a 81       	ldd	r19, Y+2	; 0x02
    1236:	c8 01       	movw	r24, r16
    1238:	b9 01       	movw	r22, r18
    123a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    123e:	19 8a       	std	Y+17, r1	; 0x11
    1240:	00 97       	sbiw	r24, 0x00	; 0
    1242:	01 f4       	brne	.+0      	; 0x1244 <_ZNK6String16equalsIgnoreCaseERKS_+0x80>
    1244:	81 e0       	ldi	r24, 0x01	; 1
    1246:	89 8b       	std	Y+17, r24	; 0x11
    1248:	ce 01       	movw	r24, r28
    124a:	01 96       	adiw	r24, 0x01	; 1
    124c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1250:	ce 01       	movw	r24, r28
    1252:	07 96       	adiw	r24, 0x07	; 7
    1254:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1258:	89 89       	ldd	r24, Y+17	; 0x11
}
    125a:	61 96       	adiw	r28, 0x11	; 17
    125c:	0f b6       	in	r0, 0x3f	; 63
    125e:	f8 94       	cli
    1260:	de bf       	out	0x3e, r29	; 62
    1262:	0f be       	out	0x3f, r0	; 63
    1264:	cd bf       	out	0x3d, r28	; 61
    1266:	cf 91       	pop	r28
    1268:	df 91       	pop	r29
    126a:	1f 91       	pop	r17
    126c:	0f 91       	pop	r16
    126e:	08 95       	ret

00001270 <_ZNK6String9substringEjj>:
String String::substring( unsigned int left ) const
{
  return substring( left, _length );
}

String String::substring( unsigned int left, unsigned int right ) const
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	61 97       	sbiw	r28, 0x11	; 17
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	99 8b       	std	Y+17, r25	; 0x11
    1286:	88 8b       	std	Y+16, r24	; 0x10
    1288:	7b 87       	std	Y+11, r23	; 0x0b
    128a:	6a 87       	std	Y+10, r22	; 0x0a
    128c:	5d 87       	std	Y+13, r21	; 0x0d
    128e:	4c 87       	std	Y+12, r20	; 0x0c
    1290:	3f 87       	std	Y+15, r19	; 0x0f
    1292:	2e 87       	std	Y+14, r18	; 0x0e
{
  if ( left > right )
    1294:	2c 85       	ldd	r18, Y+12	; 0x0c
    1296:	3d 85       	ldd	r19, Y+13	; 0x0d
    1298:	8e 85       	ldd	r24, Y+14	; 0x0e
    129a:	9f 85       	ldd	r25, Y+15	; 0x0f
    129c:	82 17       	cp	r24, r18
    129e:	93 07       	cpc	r25, r19
    12a0:	00 f4       	brcc	.+0      	; 0x12a2 <_ZNK6String9substringEjj+0x32>
  {
    int temp = right;
    12a2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12a4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12a6:	9a 83       	std	Y+2, r25	; 0x02
    12a8:	89 83       	std	Y+1, r24	; 0x01
    right = left;
    12aa:	8c 85       	ldd	r24, Y+12	; 0x0c
    12ac:	9d 85       	ldd	r25, Y+13	; 0x0d
    12ae:	9f 87       	std	Y+15, r25	; 0x0f
    12b0:	8e 87       	std	Y+14, r24	; 0x0e
    left = temp;
    12b2:	89 81       	ldd	r24, Y+1	; 0x01
    12b4:	9a 81       	ldd	r25, Y+2	; 0x02
    12b6:	9d 87       	std	Y+13, r25	; 0x0d
    12b8:	8c 87       	std	Y+12, r24	; 0x0c
  }

  if ( right > _length )
    12ba:	ea 85       	ldd	r30, Y+10	; 0x0a
    12bc:	fb 85       	ldd	r31, Y+11	; 0x0b
    12be:	24 81       	ldd	r18, Z+4	; 0x04
    12c0:	35 81       	ldd	r19, Z+5	; 0x05
    12c2:	8e 85       	ldd	r24, Y+14	; 0x0e
    12c4:	9f 85       	ldd	r25, Y+15	; 0x0f
    12c6:	28 17       	cp	r18, r24
    12c8:	39 07       	cpc	r19, r25
    12ca:	00 f4       	brcc	.+0      	; 0x12cc <_ZNK6String9substringEjj+0x5c>
  {
    right = _length;
    12cc:	ea 85       	ldd	r30, Y+10	; 0x0a
    12ce:	fb 85       	ldd	r31, Y+11	; 0x0b
    12d0:	84 81       	ldd	r24, Z+4	; 0x04
    12d2:	95 81       	ldd	r25, Z+5	; 0x05
    12d4:	9f 87       	std	Y+15, r25	; 0x0f
    12d6:	8e 87       	std	Y+14, r24	; 0x0e
  } 

  char temp = _buffer[ right ];  // save the replaced character
    12d8:	ea 85       	ldd	r30, Y+10	; 0x0a
    12da:	fb 85       	ldd	r31, Y+11	; 0x0b
    12dc:	20 81       	ld	r18, Z
    12de:	31 81       	ldd	r19, Z+1	; 0x01
    12e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    12e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    12e4:	f9 01       	movw	r30, r18
    12e6:	e8 0f       	add	r30, r24
    12e8:	f9 1f       	adc	r31, r25
    12ea:	80 81       	ld	r24, Z
    12ec:	8b 83       	std	Y+3, r24	; 0x03
  _buffer[ right ] = '\0';	
    12ee:	ea 85       	ldd	r30, Y+10	; 0x0a
    12f0:	fb 85       	ldd	r31, Y+11	; 0x0b
    12f2:	20 81       	ld	r18, Z
    12f4:	31 81       	ldd	r19, Z+1	; 0x01
    12f6:	8e 85       	ldd	r24, Y+14	; 0x0e
    12f8:	9f 85       	ldd	r25, Y+15	; 0x0f
    12fa:	f9 01       	movw	r30, r18
    12fc:	e8 0f       	add	r30, r24
    12fe:	f9 1f       	adc	r31, r25
    1300:	10 82       	st	Z, r1
  String outPut = ( _buffer + left );  // pointer arithmetic
    1302:	48 89       	ldd	r20, Y+16	; 0x10
    1304:	59 89       	ldd	r21, Y+17	; 0x11
    1306:	ea 85       	ldd	r30, Y+10	; 0x0a
    1308:	fb 85       	ldd	r31, Y+11	; 0x0b
    130a:	20 81       	ld	r18, Z
    130c:	31 81       	ldd	r19, Z+1	; 0x01
    130e:	8c 85       	ldd	r24, Y+12	; 0x0c
    1310:	9d 85       	ldd	r25, Y+13	; 0x0d
    1312:	28 0f       	add	r18, r24
    1314:	39 1f       	adc	r19, r25
    1316:	ca 01       	movw	r24, r20
    1318:	b9 01       	movw	r22, r18
    131a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  _buffer[ right ] = temp;  //restore character
    131e:	ea 85       	ldd	r30, Y+10	; 0x0a
    1320:	fb 85       	ldd	r31, Y+11	; 0x0b
    1322:	20 81       	ld	r18, Z
    1324:	31 81       	ldd	r19, Z+1	; 0x01
    1326:	8e 85       	ldd	r24, Y+14	; 0x0e
    1328:	9f 85       	ldd	r25, Y+15	; 0x0f
    132a:	f9 01       	movw	r30, r18
    132c:	e8 0f       	add	r30, r24
    132e:	f9 1f       	adc	r31, r25
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	80 83       	st	Z, r24
  return outPut;
}
    1334:	88 89       	ldd	r24, Y+16	; 0x10
    1336:	99 89       	ldd	r25, Y+17	; 0x11
    1338:	88 89       	ldd	r24, Y+16	; 0x10
    133a:	99 89       	ldd	r25, Y+17	; 0x11
    133c:	61 96       	adiw	r28, 0x11	; 17
    133e:	0f b6       	in	r0, 0x3f	; 63
    1340:	f8 94       	cli
    1342:	de bf       	out	0x3e, r29	; 62
    1344:	0f be       	out	0x3f, r0	; 63
    1346:	cd bf       	out	0x3d, r28	; 61
    1348:	cf 91       	pop	r28
    134a:	df 91       	pop	r29
    134c:	08 95       	ret

0000134e <_ZNK6String9substringEj>:
    return 0;

  return strncmp( &_buffer[offset], s2._buffer, s2._length ) == 0;
}

String String::substring( unsigned int left ) const
    134e:	0f 93       	push	r16
    1350:	1f 93       	push	r17
    1352:	df 93       	push	r29
    1354:	cf 93       	push	r28
    1356:	00 d0       	rcall	.+0      	; 0x1358 <_ZNK6String9substringEj+0xa>
    1358:	00 d0       	rcall	.+0      	; 0x135a <_ZNK6String9substringEj+0xc>
    135a:	cd b7       	in	r28, 0x3d	; 61
    135c:	de b7       	in	r29, 0x3e	; 62
    135e:	8c 01       	movw	r16, r24
    1360:	7a 83       	std	Y+2, r23	; 0x02
    1362:	69 83       	std	Y+1, r22	; 0x01
    1364:	5c 83       	std	Y+4, r21	; 0x04
    1366:	4b 83       	std	Y+3, r20	; 0x03
{
  return substring( left, _length );
    1368:	c8 01       	movw	r24, r16
    136a:	e9 81       	ldd	r30, Y+1	; 0x01
    136c:	fa 81       	ldd	r31, Y+2	; 0x02
    136e:	04 80       	ldd	r0, Z+4	; 0x04
    1370:	f5 81       	ldd	r31, Z+5	; 0x05
    1372:	e0 2d       	mov	r30, r0
    1374:	29 81       	ldd	r18, Y+1	; 0x01
    1376:	3a 81       	ldd	r19, Y+2	; 0x02
    1378:	4b 81       	ldd	r20, Y+3	; 0x03
    137a:	5c 81       	ldd	r21, Y+4	; 0x04
    137c:	b9 01       	movw	r22, r18
    137e:	9f 01       	movw	r18, r30
    1380:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1384:	c8 01       	movw	r24, r16
    1386:	c8 01       	movw	r24, r16
    1388:	0f 90       	pop	r0
    138a:	0f 90       	pop	r0
    138c:	0f 90       	pop	r0
    138e:	0f 90       	pop	r0
    1390:	cf 91       	pop	r28
    1392:	df 91       	pop	r29
    1394:	1f 91       	pop	r17
    1396:	0f 91       	pop	r16
    1398:	08 95       	ret

0000139a <_ZNK6String11lastIndexOfERKS_j>:
int String::lastIndexOf( const String &s2 ) const
{
  return lastIndexOf( s2, _length - s2._length );
}

int String::lastIndexOf( const String &s2, unsigned int fromIndex ) const
    139a:	df 93       	push	r29
    139c:	cf 93       	push	r28
    139e:	cd b7       	in	r28, 0x3d	; 61
    13a0:	de b7       	in	r29, 0x3e	; 62
    13a2:	64 97       	sbiw	r28, 0x14	; 20
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	9b 87       	std	Y+11, r25	; 0x0b
    13b0:	8a 87       	std	Y+10, r24	; 0x0a
    13b2:	7d 87       	std	Y+13, r23	; 0x0d
    13b4:	6c 87       	std	Y+12, r22	; 0x0c
    13b6:	5f 87       	std	Y+15, r21	; 0x0f
    13b8:	4e 87       	std	Y+14, r20	; 0x0e
{
  // check for empty strings
  if ( s2._length == 0 || s2._length - 1 > fromIndex || fromIndex >= _length )
    13ba:	ec 85       	ldd	r30, Y+12	; 0x0c
    13bc:	fd 85       	ldd	r31, Y+13	; 0x0d
    13be:	84 81       	ldd	r24, Z+4	; 0x04
    13c0:	95 81       	ldd	r25, Z+5	; 0x05
    13c2:	00 97       	sbiw	r24, 0x00	; 0
    13c4:	01 f0       	breq	.+0      	; 0x13c6 <_ZNK6String11lastIndexOfERKS_j+0x2c>
    13c6:	ec 85       	ldd	r30, Y+12	; 0x0c
    13c8:	fd 85       	ldd	r31, Y+13	; 0x0d
    13ca:	84 81       	ldd	r24, Z+4	; 0x04
    13cc:	95 81       	ldd	r25, Z+5	; 0x05
    13ce:	9c 01       	movw	r18, r24
    13d0:	21 50       	subi	r18, 0x01	; 1
    13d2:	30 40       	sbci	r19, 0x00	; 0
    13d4:	8e 85       	ldd	r24, Y+14	; 0x0e
    13d6:	9f 85       	ldd	r25, Y+15	; 0x0f
    13d8:	82 17       	cp	r24, r18
    13da:	93 07       	cpc	r25, r19
    13dc:	00 f0       	brcs	.+0      	; 0x13de <_ZNK6String11lastIndexOfERKS_j+0x44>
    13de:	ea 85       	ldd	r30, Y+10	; 0x0a
    13e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    13e2:	24 81       	ldd	r18, Z+4	; 0x04
    13e4:	35 81       	ldd	r19, Z+5	; 0x05
    13e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    13e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    13ea:	82 17       	cp	r24, r18
    13ec:	93 07       	cpc	r25, r19
    13ee:	00 f0       	brcs	.+0      	; 0x13f0 <_ZNK6String11lastIndexOfERKS_j+0x56>
    return -1;
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	9f ef       	ldi	r25, 0xFF	; 255
    13f4:	9c 8b       	std	Y+20, r25	; 0x14
    13f6:	8b 8b       	std	Y+19, r24	; 0x13
    13f8:	00 c0       	rjmp	.+0      	; 0x13fa <_ZNK6String11lastIndexOfERKS_j+0x60>

  // matching first character
  char temp = s2[ 0 ];
    13fa:	8c 85       	ldd	r24, Y+12	; 0x0c
    13fc:	9d 85       	ldd	r25, Y+13	; 0x0d
    13fe:	60 e0       	ldi	r22, 0x00	; 0
    1400:	70 e0       	ldi	r23, 0x00	; 0
    1402:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1406:	8b 83       	std	Y+3, r24	; 0x03

  for ( int i = fromIndex; i >= 0; i-- )
    1408:	8e 85       	ldd	r24, Y+14	; 0x0e
    140a:	9f 85       	ldd	r25, Y+15	; 0x0f
    140c:	9a 83       	std	Y+2, r25	; 0x02
    140e:	89 83       	std	Y+1, r24	; 0x01
    1410:	00 c0       	rjmp	.+0      	; 0x1412 <_ZNK6String11lastIndexOfERKS_j+0x78>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    1412:	18 8a       	std	Y+16, r1	; 0x10
    1414:	ea 85       	ldd	r30, Y+10	; 0x0a
    1416:	fb 85       	ldd	r31, Y+11	; 0x0b
    1418:	20 81       	ld	r18, Z
    141a:	31 81       	ldd	r19, Z+1	; 0x01
    141c:	89 81       	ldd	r24, Y+1	; 0x01
    141e:	9a 81       	ldd	r25, Y+2	; 0x02
    1420:	f9 01       	movw	r30, r18
    1422:	e8 0f       	add	r30, r24
    1424:	f9 1f       	adc	r31, r25
    1426:	90 81       	ld	r25, Z
    1428:	8b 81       	ldd	r24, Y+3	; 0x03
    142a:	98 17       	cp	r25, r24
    142c:	01 f4       	brne	.+0      	; 0x142e <_ZNK6String11lastIndexOfERKS_j+0x94>
    142e:	49 81       	ldd	r20, Y+1	; 0x01
    1430:	5a 81       	ldd	r21, Y+2	; 0x02
    1432:	ec 85       	ldd	r30, Y+12	; 0x0c
    1434:	fd 85       	ldd	r31, Y+13	; 0x0d
    1436:	24 81       	ldd	r18, Z+4	; 0x04
    1438:	35 81       	ldd	r19, Z+5	; 0x05
    143a:	89 81       	ldd	r24, Y+1	; 0x01
    143c:	9a 81       	ldd	r25, Y+2	; 0x02
    143e:	f9 01       	movw	r30, r18
    1440:	e8 0f       	add	r30, r24
    1442:	f9 1f       	adc	r31, r25
    1444:	ce 01       	movw	r24, r28
    1446:	04 96       	adiw	r24, 0x04	; 4
    1448:	2a 85       	ldd	r18, Y+10	; 0x0a
    144a:	3b 85       	ldd	r19, Y+11	; 0x0b
    144c:	b9 01       	movw	r22, r18
    144e:	9f 01       	movw	r18, r30
    1450:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1454:	91 e0       	ldi	r25, 0x01	; 1
    1456:	98 8b       	std	Y+16, r25	; 0x10
    1458:	ce 01       	movw	r24, r28
    145a:	04 96       	adiw	r24, 0x04	; 4
    145c:	2c 85       	ldd	r18, Y+12	; 0x0c
    145e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1460:	b9 01       	movw	r22, r18
    1462:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1466:	88 23       	and	r24, r24
    1468:	01 f0       	breq	.+0      	; 0x146a <_ZNK6String11lastIndexOfERKS_j+0xd0>
    146a:	81 e0       	ldi	r24, 0x01	; 1
    146c:	89 8b       	std	Y+17, r24	; 0x11
    146e:	00 c0       	rjmp	.+0      	; 0x1470 <_ZNK6String11lastIndexOfERKS_j+0xd6>
    1470:	19 8a       	std	Y+17, r1	; 0x11
    1472:	99 89       	ldd	r25, Y+17	; 0x11
    1474:	9a 8b       	std	Y+18, r25	; 0x12
    1476:	88 89       	ldd	r24, Y+16	; 0x10
    1478:	88 23       	and	r24, r24
    147a:	01 f0       	breq	.+0      	; 0x147c <_ZNK6String11lastIndexOfERKS_j+0xe2>
    147c:	ce 01       	movw	r24, r28
    147e:	04 96       	adiw	r24, 0x04	; 4
    1480:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1484:	9a 89       	ldd	r25, Y+18	; 0x12
    1486:	99 23       	and	r25, r25
    1488:	01 f0       	breq	.+0      	; 0x148a <_ZNK6String11lastIndexOfERKS_j+0xf0>
    return i;
    148a:	89 81       	ldd	r24, Y+1	; 0x01
    148c:	9a 81       	ldd	r25, Y+2	; 0x02
    148e:	9c 8b       	std	Y+20, r25	; 0x14
    1490:	8b 8b       	std	Y+19, r24	; 0x13
    1492:	00 c0       	rjmp	.+0      	; 0x1494 <_ZNK6String11lastIndexOfERKS_j+0xfa>
    return -1;

  // matching first character
  char temp = s2[ 0 ];

  for ( int i = fromIndex; i >= 0; i-- )
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	9a 81       	ldd	r25, Y+2	; 0x02
    1498:	01 97       	sbiw	r24, 0x01	; 1
    149a:	9a 83       	std	Y+2, r25	; 0x02
    149c:	89 83       	std	Y+1, r24	; 0x01
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	9a 81       	ldd	r25, Y+2	; 0x02
    14a2:	99 23       	and	r25, r25
    14a4:	04 f0       	brlt	.+0      	; 0x14a6 <_ZNK6String11lastIndexOfERKS_j+0x10c>
    14a6:	00 c0       	rjmp	.+0      	; 0x14a8 <_ZNK6String11lastIndexOfERKS_j+0x10e>
  {
    if ( _buffer[ i ] == temp && (*this).substring( i, i + s2._length ).equals( s2 ) )
    return i;
  }
  return -1;
    14a8:	8f ef       	ldi	r24, 0xFF	; 255
    14aa:	9f ef       	ldi	r25, 0xFF	; 255
    14ac:	9c 8b       	std	Y+20, r25	; 0x14
    14ae:	8b 8b       	std	Y+19, r24	; 0x13
    14b0:	8b 89       	ldd	r24, Y+19	; 0x13
    14b2:	9c 89       	ldd	r25, Y+20	; 0x14
}
    14b4:	64 96       	adiw	r28, 0x14	; 20
    14b6:	0f b6       	in	r0, 0x3f	; 63
    14b8:	f8 94       	cli
    14ba:	de bf       	out	0x3e, r29	; 62
    14bc:	0f be       	out	0x3f, r0	; 63
    14be:	cd bf       	out	0x3d, r28	; 61
    14c0:	cf 91       	pop	r28
    14c2:	df 91       	pop	r29
    14c4:	08 95       	ret

000014c6 <_ZNK6String11lastIndexOfERKS_>:
    return -1;

  return temp - _buffer;
}

int String::lastIndexOf( const String &s2 ) const
    14c6:	df 93       	push	r29
    14c8:	cf 93       	push	r28
    14ca:	00 d0       	rcall	.+0      	; 0x14cc <_ZNK6String11lastIndexOfERKS_+0x6>
    14cc:	00 d0       	rcall	.+0      	; 0x14ce <_ZNK6String11lastIndexOfERKS_+0x8>
    14ce:	cd b7       	in	r28, 0x3d	; 61
    14d0:	de b7       	in	r29, 0x3e	; 62
    14d2:	9a 83       	std	Y+2, r25	; 0x02
    14d4:	89 83       	std	Y+1, r24	; 0x01
    14d6:	7c 83       	std	Y+4, r23	; 0x04
    14d8:	6b 83       	std	Y+3, r22	; 0x03
{
  return lastIndexOf( s2, _length - s2._length );
    14da:	e9 81       	ldd	r30, Y+1	; 0x01
    14dc:	fa 81       	ldd	r31, Y+2	; 0x02
    14de:	24 81       	ldd	r18, Z+4	; 0x04
    14e0:	35 81       	ldd	r19, Z+5	; 0x05
    14e2:	eb 81       	ldd	r30, Y+3	; 0x03
    14e4:	fc 81       	ldd	r31, Y+4	; 0x04
    14e6:	84 81       	ldd	r24, Z+4	; 0x04
    14e8:	95 81       	ldd	r25, Z+5	; 0x05
    14ea:	a9 01       	movw	r20, r18
    14ec:	48 1b       	sub	r20, r24
    14ee:	59 0b       	sbc	r21, r25
    14f0:	89 81       	ldd	r24, Y+1	; 0x01
    14f2:	9a 81       	ldd	r25, Y+2	; 0x02
    14f4:	2b 81       	ldd	r18, Y+3	; 0x03
    14f6:	3c 81       	ldd	r19, Y+4	; 0x04
    14f8:	b9 01       	movw	r22, r18
    14fa:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    14fe:	0f 90       	pop	r0
    1500:	0f 90       	pop	r0
    1502:	0f 90       	pop	r0
    1504:	0f 90       	pop	r0
    1506:	cf 91       	pop	r28
    1508:	df 91       	pop	r29
    150a:	08 95       	ret

0000150c <_ZNK6String4trimEv>:
  for ( unsigned int i = 0; i < _length; i++ )
    temp._buffer[ i ] = (char)toupper( temp._buffer[ i ] );
  return temp;
}

String String::trim() const
    150c:	df 93       	push	r29
    150e:	cf 93       	push	r28
    1510:	cd b7       	in	r28, 0x3d	; 61
    1512:	de b7       	in	r29, 0x3e	; 62
    1514:	2e 97       	sbiw	r28, 0x0e	; 14
    1516:	0f b6       	in	r0, 0x3f	; 63
    1518:	f8 94       	cli
    151a:	de bf       	out	0x3e, r29	; 62
    151c:	0f be       	out	0x3f, r0	; 63
    151e:	cd bf       	out	0x3d, r28	; 61
    1520:	9e 87       	std	Y+14, r25	; 0x0e
    1522:	8d 87       	std	Y+13, r24	; 0x0d
    1524:	7c 87       	std	Y+12, r23	; 0x0c
    1526:	6b 87       	std	Y+11, r22	; 0x0b
{
  if ( _buffer == NULL ) return *this;
    1528:	eb 85       	ldd	r30, Y+11	; 0x0b
    152a:	fc 85       	ldd	r31, Y+12	; 0x0c
    152c:	80 81       	ld	r24, Z
    152e:	91 81       	ldd	r25, Z+1	; 0x01
    1530:	00 97       	sbiw	r24, 0x00	; 0
    1532:	01 f4       	brne	.+0      	; 0x1534 <_ZNK6String4trimEv+0x28>
    1534:	8d 85       	ldd	r24, Y+13	; 0x0d
    1536:	9e 85       	ldd	r25, Y+14	; 0x0e
    1538:	2b 85       	ldd	r18, Y+11	; 0x0b
    153a:	3c 85       	ldd	r19, Y+12	; 0x0c
    153c:	b9 01       	movw	r22, r18
    153e:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1542:	00 c0       	rjmp	.+0      	; 0x1544 <_ZNK6String4trimEv+0x38>
  String temp = _buffer;
    1544:	eb 85       	ldd	r30, Y+11	; 0x0b
    1546:	fc 85       	ldd	r31, Y+12	; 0x0c
    1548:	20 81       	ld	r18, Z
    154a:	31 81       	ldd	r19, Z+1	; 0x01
    154c:	ce 01       	movw	r24, r28
    154e:	05 96       	adiw	r24, 0x05	; 5
    1550:	b9 01       	movw	r22, r18
    1552:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    1556:	1c 82       	std	Y+4, r1	; 0x04
    1558:	1b 82       	std	Y+3, r1	; 0x03
    155a:	00 c0       	rjmp	.+0      	; 0x155c <_ZNK6String4trimEv+0x50>
  {
    if ( !isspace(_buffer[i]) )
    155c:	eb 85       	ldd	r30, Y+11	; 0x0b
    155e:	fc 85       	ldd	r31, Y+12	; 0x0c
    1560:	20 81       	ld	r18, Z
    1562:	31 81       	ldd	r19, Z+1	; 0x01
    1564:	8b 81       	ldd	r24, Y+3	; 0x03
    1566:	9c 81       	ldd	r25, Y+4	; 0x04
    1568:	f9 01       	movw	r30, r18
    156a:	e8 0f       	add	r30, r24
    156c:	f9 1f       	adc	r31, r25
    156e:	80 81       	ld	r24, Z
    1570:	88 2f       	mov	r24, r24
    1572:	90 e0       	ldi	r25, 0x00	; 0
    1574:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1578:	00 97       	sbiw	r24, 0x00	; 0
    157a:	01 f0       	breq	.+0      	; 0x157c <_ZNK6String4trimEv+0x70>
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer;
  unsigned int i,j;

  for ( i = 0; i < _length; i++ )
    157c:	8b 81       	ldd	r24, Y+3	; 0x03
    157e:	9c 81       	ldd	r25, Y+4	; 0x04
    1580:	01 96       	adiw	r24, 0x01	; 1
    1582:	9c 83       	std	Y+4, r25	; 0x04
    1584:	8b 83       	std	Y+3, r24	; 0x03
    1586:	eb 85       	ldd	r30, Y+11	; 0x0b
    1588:	fc 85       	ldd	r31, Y+12	; 0x0c
    158a:	24 81       	ldd	r18, Z+4	; 0x04
    158c:	35 81       	ldd	r19, Z+5	; 0x05
    158e:	8b 81       	ldd	r24, Y+3	; 0x03
    1590:	9c 81       	ldd	r25, Y+4	; 0x04
    1592:	82 17       	cp	r24, r18
    1594:	93 07       	cpc	r25, r19
    1596:	00 f0       	brcs	.+0      	; 0x1598 <_ZNK6String4trimEv+0x8c>
  {
    if ( !isspace(_buffer[i]) )
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    1598:	89 85       	ldd	r24, Y+9	; 0x09
    159a:	9a 85       	ldd	r25, Y+10	; 0x0a
    159c:	01 97       	sbiw	r24, 0x01	; 1
    159e:	9a 83       	std	Y+2, r25	; 0x02
    15a0:	89 83       	std	Y+1, r24	; 0x01
    15a2:	00 c0       	rjmp	.+0      	; 0x15a4 <_ZNK6String4trimEv+0x98>
  {
    if ( !isspace(_buffer[j]) )
    15a4:	eb 85       	ldd	r30, Y+11	; 0x0b
    15a6:	fc 85       	ldd	r31, Y+12	; 0x0c
    15a8:	20 81       	ld	r18, Z
    15aa:	31 81       	ldd	r19, Z+1	; 0x01
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	9a 81       	ldd	r25, Y+2	; 0x02
    15b0:	f9 01       	movw	r30, r18
    15b2:	e8 0f       	add	r30, r24
    15b4:	f9 1f       	adc	r31, r25
    15b6:	80 81       	ld	r24, Z
    15b8:	88 2f       	mov	r24, r24
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    15c0:	00 97       	sbiw	r24, 0x00	; 0
    15c2:	01 f0       	breq	.+0      	; 0x15c4 <_ZNK6String4trimEv+0xb8>
  {
    if ( !isspace(_buffer[i]) )
      break;
  }

  for ( j = temp._length - 1; j > i; j-- )
    15c4:	89 81       	ldd	r24, Y+1	; 0x01
    15c6:	9a 81       	ldd	r25, Y+2	; 0x02
    15c8:	01 97       	sbiw	r24, 0x01	; 1
    15ca:	9a 83       	std	Y+2, r25	; 0x02
    15cc:	89 83       	std	Y+1, r24	; 0x01
    15ce:	29 81       	ldd	r18, Y+1	; 0x01
    15d0:	3a 81       	ldd	r19, Y+2	; 0x02
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	82 17       	cp	r24, r18
    15d8:	93 07       	cpc	r25, r19
    15da:	00 f0       	brcs	.+0      	; 0x15dc <_ZNK6String4trimEv+0xd0>
  {
    if ( !isspace(_buffer[j]) )
      break;
  }

  return temp.substring( i, j + 1);
    15dc:	6d 85       	ldd	r22, Y+13	; 0x0d
    15de:	7e 85       	ldd	r23, Y+14	; 0x0e
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	fc 01       	movw	r30, r24
    15e6:	31 96       	adiw	r30, 0x01	; 1
    15e8:	9e 01       	movw	r18, r28
    15ea:	2b 5f       	subi	r18, 0xFB	; 251
    15ec:	3f 4f       	sbci	r19, 0xFF	; 255
    15ee:	4b 81       	ldd	r20, Y+3	; 0x03
    15f0:	5c 81       	ldd	r21, Y+4	; 0x04
    15f2:	cb 01       	movw	r24, r22
    15f4:	b9 01       	movw	r22, r18
    15f6:	9f 01       	movw	r18, r30
    15f8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    15fc:	ce 01       	movw	r24, r28
    15fe:	05 96       	adiw	r24, 0x05	; 5
    1600:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1604:	8d 85       	ldd	r24, Y+13	; 0x0d
    1606:	9e 85       	ldd	r25, Y+14	; 0x0e
    1608:	8d 85       	ldd	r24, Y+13	; 0x0d
    160a:	9e 85       	ldd	r25, Y+14	; 0x0e
    160c:	2e 96       	adiw	r28, 0x0e	; 14
    160e:	0f b6       	in	r0, 0x3f	; 63
    1610:	f8 94       	cli
    1612:	de bf       	out	0x3e, r29	; 62
    1614:	0f be       	out	0x3f, r0	; 63
    1616:	cd bf       	out	0x3d, r28	; 61
    1618:	cf 91       	pop	r28
    161a:	df 91       	pop	r29
    161c:	08 95       	ret

0000161e <_ZN6String7replaceERKS_S1_>:
    *temp = replaceChar;

  return theReturn;
}

String String::replace( const String& match, const String& replace )
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
    1626:	a3 97       	sbiw	r28, 0x23	; 35
    1628:	0f b6       	in	r0, 0x3f	; 63
    162a:	f8 94       	cli
    162c:	de bf       	out	0x3e, r29	; 62
    162e:	0f be       	out	0x3f, r0	; 63
    1630:	cd bf       	out	0x3d, r28	; 61
    1632:	9b a3       	std	Y+35, r25	; 0x23
    1634:	8a a3       	std	Y+34, r24	; 0x22
    1636:	7c 8f       	std	Y+28, r23	; 0x1c
    1638:	6b 8f       	std	Y+27, r22	; 0x1b
    163a:	5e 8f       	std	Y+30, r21	; 0x1e
    163c:	4d 8f       	std	Y+29, r20	; 0x1d
    163e:	38 a3       	std	Y+32, r19	; 0x20
    1640:	2f 8f       	std	Y+31, r18	; 0x1f
{
  if ( _buffer == NULL ) return *this;
    1642:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1644:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1646:	80 81       	ld	r24, Z
    1648:	91 81       	ldd	r25, Z+1	; 0x01
    164a:	00 97       	sbiw	r24, 0x00	; 0
    164c:	01 f4       	brne	.+0      	; 0x164e <_ZN6String7replaceERKS_S1_+0x30>
    164e:	8a a1       	ldd	r24, Y+34	; 0x22
    1650:	9b a1       	ldd	r25, Y+35	; 0x23
    1652:	2b 8d       	ldd	r18, Y+27	; 0x1b
    1654:	3c 8d       	ldd	r19, Y+28	; 0x1c
    1656:	b9 01       	movw	r22, r18
    1658:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    165c:	00 c0       	rjmp	.+0      	; 0x165e <_ZN6String7replaceERKS_S1_+0x40>
  String temp = _buffer, newString;
    165e:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1660:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1662:	20 81       	ld	r18, Z
    1664:	31 81       	ldd	r19, Z+1	; 0x01
    1666:	ce 01       	movw	r24, r28
    1668:	0f 96       	adiw	r24, 0x0f	; 15
    166a:	b9 01       	movw	r22, r18
    166c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1670:	ce 01       	movw	r24, r28
    1672:	45 96       	adiw	r24, 0x15	; 21
    1674:	20 e0       	ldi	r18, 0x00	; 0
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	b9 01       	movw	r22, r18
    167a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    167e:	00 c0       	rjmp	.+0      	; 0x1680 <_ZN6String7replaceERKS_S1_+0x62>

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
  {
    newString += temp.substring( 0, loc );
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	ce 01       	movw	r24, r28
    1686:	09 96       	adiw	r24, 0x09	; 9
    1688:	9e 01       	movw	r18, r28
    168a:	21 5f       	subi	r18, 0xF1	; 241
    168c:	3f 4f       	sbci	r19, 0xFF	; 255
    168e:	b9 01       	movw	r22, r18
    1690:	40 e0       	ldi	r20, 0x00	; 0
    1692:	50 e0       	ldi	r21, 0x00	; 0
    1694:	9f 01       	movw	r18, r30
    1696:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    169a:	ce 01       	movw	r24, r28
    169c:	45 96       	adiw	r24, 0x15	; 21
    169e:	9e 01       	movw	r18, r28
    16a0:	27 5f       	subi	r18, 0xF7	; 247
    16a2:	3f 4f       	sbci	r19, 0xFF	; 255
    16a4:	b9 01       	movw	r22, r18
    16a6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16aa:	ce 01       	movw	r24, r28
    16ac:	09 96       	adiw	r24, 0x09	; 9
    16ae:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    newString += replace;
    16b2:	ce 01       	movw	r24, r28
    16b4:	45 96       	adiw	r24, 0x15	; 21
    16b6:	2f 8d       	ldd	r18, Y+31	; 0x1f
    16b8:	38 a1       	ldd	r19, Y+32	; 0x20
    16ba:	b9 01       	movw	r22, r18
    16bc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    temp = temp.substring( loc + match._length );
    16c0:	ed 8d       	ldd	r30, Y+29	; 0x1d
    16c2:	fe 8d       	ldd	r31, Y+30	; 0x1e
    16c4:	24 81       	ldd	r18, Z+4	; 0x04
    16c6:	35 81       	ldd	r19, Z+5	; 0x05
    16c8:	89 81       	ldd	r24, Y+1	; 0x01
    16ca:	9a 81       	ldd	r25, Y+2	; 0x02
    16cc:	a9 01       	movw	r20, r18
    16ce:	48 0f       	add	r20, r24
    16d0:	59 1f       	adc	r21, r25
    16d2:	ce 01       	movw	r24, r28
    16d4:	03 96       	adiw	r24, 0x03	; 3
    16d6:	9e 01       	movw	r18, r28
    16d8:	21 5f       	subi	r18, 0xF1	; 241
    16da:	3f 4f       	sbci	r19, 0xFF	; 255
    16dc:	b9 01       	movw	r22, r18
    16de:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16e2:	ce 01       	movw	r24, r28
    16e4:	0f 96       	adiw	r24, 0x0f	; 15
    16e6:	9e 01       	movw	r18, r28
    16e8:	2d 5f       	subi	r18, 0xFD	; 253
    16ea:	3f 4f       	sbci	r19, 0xFF	; 255
    16ec:	b9 01       	movw	r22, r18
    16ee:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    16f2:	ce 01       	movw	r24, r28
    16f4:	03 96       	adiw	r24, 0x03	; 3
    16f6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
{
  if ( _buffer == NULL ) return *this;
  String temp = _buffer, newString;

  int loc;
  while ( (loc = temp.indexOf( match )) != -1 )
    16fa:	ce 01       	movw	r24, r28
    16fc:	0f 96       	adiw	r24, 0x0f	; 15
    16fe:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1700:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1708:	9a 83       	std	Y+2, r25	; 0x02
    170a:	89 83       	std	Y+1, r24	; 0x01
    170c:	19 a2       	std	Y+33, r1	; 0x21
    170e:	89 81       	ldd	r24, Y+1	; 0x01
    1710:	9a 81       	ldd	r25, Y+2	; 0x02
    1712:	2f ef       	ldi	r18, 0xFF	; 255
    1714:	8f 3f       	cpi	r24, 0xFF	; 255
    1716:	92 07       	cpc	r25, r18
    1718:	01 f0       	breq	.+0      	; 0x171a <_ZN6String7replaceERKS_S1_+0xfc>
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	89 a3       	std	Y+33, r24	; 0x21
    171e:	29 a1       	ldd	r18, Y+33	; 0x21
    1720:	22 23       	and	r18, r18
    1722:	01 f0       	breq	.+0      	; 0x1724 <_ZN6String7replaceERKS_S1_+0x106>
    1724:	00 c0       	rjmp	.+0      	; 0x1726 <_ZN6String7replaceERKS_S1_+0x108>
  {
    newString += temp.substring( 0, loc );
    newString += replace;
    temp = temp.substring( loc + match._length );
  }
  newString += temp;  
    1726:	ce 01       	movw	r24, r28
    1728:	45 96       	adiw	r24, 0x15	; 21
    172a:	9e 01       	movw	r18, r28
    172c:	21 5f       	subi	r18, 0xF1	; 241
    172e:	3f 4f       	sbci	r19, 0xFF	; 255
    1730:	b9 01       	movw	r22, r18
    1732:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  return newString;
    1736:	8a a1       	ldd	r24, Y+34	; 0x22
    1738:	9b a1       	ldd	r25, Y+35	; 0x23
    173a:	9e 01       	movw	r18, r28
    173c:	2b 5e       	subi	r18, 0xEB	; 235
    173e:	3f 4f       	sbci	r19, 0xFF	; 255
    1740:	b9 01       	movw	r22, r18
    1742:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1746:	ce 01       	movw	r24, r28
    1748:	45 96       	adiw	r24, 0x15	; 21
    174a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    174e:	ce 01       	movw	r24, r28
    1750:	0f 96       	adiw	r24, 0x0f	; 15
    1752:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1756:	8a a1       	ldd	r24, Y+34	; 0x22
    1758:	9b a1       	ldd	r25, Y+35	; 0x23
    175a:	8a a1       	ldd	r24, Y+34	; 0x22
    175c:	9b a1       	ldd	r25, Y+35	; 0x23
    175e:	a3 96       	adiw	r28, 0x23	; 35
    1760:	0f b6       	in	r0, 0x3f	; 63
    1762:	f8 94       	cli
    1764:	de bf       	out	0x3e, r29	; 62
    1766:	0f be       	out	0x3f, r0	; 63
    1768:	cd bf       	out	0x3d, r28	; 61
    176a:	cf 91       	pop	r28
    176c:	df 91       	pop	r29
    176e:	08 95       	ret

00001770 <_ZN6String7replaceEcc>:
    return false; //0;

  return strcmp(toLowerCase()._buffer, s2.toLowerCase()._buffer) == 0;
}

String String::replace( char findChar, char replaceChar )
    1770:	df 93       	push	r29
    1772:	cf 93       	push	r28
    1774:	cd b7       	in	r28, 0x3d	; 61
    1776:	de b7       	in	r29, 0x3e	; 62
    1778:	2f 97       	sbiw	r28, 0x0f	; 15
    177a:	0f b6       	in	r0, 0x3f	; 63
    177c:	f8 94       	cli
    177e:	de bf       	out	0x3e, r29	; 62
    1780:	0f be       	out	0x3f, r0	; 63
    1782:	cd bf       	out	0x3d, r28	; 61
    1784:	9f 87       	std	Y+15, r25	; 0x0f
    1786:	8e 87       	std	Y+14, r24	; 0x0e
    1788:	7a 87       	std	Y+10, r23	; 0x0a
    178a:	69 87       	std	Y+9, r22	; 0x09
    178c:	4b 87       	std	Y+11, r20	; 0x0b
    178e:	2c 87       	std	Y+12, r18	; 0x0c
{
  if ( _buffer == NULL ) return *this;
    1790:	e9 85       	ldd	r30, Y+9	; 0x09
    1792:	fa 85       	ldd	r31, Y+10	; 0x0a
    1794:	80 81       	ld	r24, Z
    1796:	91 81       	ldd	r25, Z+1	; 0x01
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	01 f4       	brne	.+0      	; 0x179c <_ZN6String7replaceEcc+0x2c>
    179c:	8e 85       	ldd	r24, Y+14	; 0x0e
    179e:	9f 85       	ldd	r25, Y+15	; 0x0f
    17a0:	29 85       	ldd	r18, Y+9	; 0x09
    17a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    17a4:	b9 01       	movw	r22, r18
    17a6:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    17aa:	00 c0       	rjmp	.+0      	; 0x17ac <_ZN6String7replaceEcc+0x3c>
  String theReturn = _buffer;
    17ac:	e9 85       	ldd	r30, Y+9	; 0x09
    17ae:	fa 85       	ldd	r31, Y+10	; 0x0a
    17b0:	20 81       	ld	r18, Z
    17b2:	31 81       	ldd	r19, Z+1	; 0x01
    17b4:	ce 01       	movw	r24, r28
    17b6:	03 96       	adiw	r24, 0x03	; 3
    17b8:	b9 01       	movw	r22, r18
    17ba:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  char* temp = theReturn._buffer;
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	9c 81       	ldd	r25, Y+4	; 0x04
    17c2:	9a 83       	std	Y+2, r25	; 0x02
    17c4:	89 83       	std	Y+1, r24	; 0x01
    17c6:	00 c0       	rjmp	.+0      	; 0x17c8 <_ZN6String7replaceEcc+0x58>
  while( (temp = strchr( temp, findChar )) != 0 )
    *temp = replaceChar;
    17c8:	e9 81       	ldd	r30, Y+1	; 0x01
    17ca:	fa 81       	ldd	r31, Y+2	; 0x02
    17cc:	8c 85       	ldd	r24, Y+12	; 0x0c
    17ce:	80 83       	st	Z, r24
String String::replace( char findChar, char replaceChar )
{
  if ( _buffer == NULL ) return *this;
  String theReturn = _buffer;
  char* temp = theReturn._buffer;
  while( (temp = strchr( temp, findChar )) != 0 )
    17d0:	8b 85       	ldd	r24, Y+11	; 0x0b
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	89 81       	ldd	r24, Y+1	; 0x01
    17d8:	9a 81       	ldd	r25, Y+2	; 0x02
    17da:	b9 01       	movw	r22, r18
    17dc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	1d 86       	std	Y+13, r1	; 0x0d
    17e6:	89 81       	ldd	r24, Y+1	; 0x01
    17e8:	9a 81       	ldd	r25, Y+2	; 0x02
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	01 f0       	breq	.+0      	; 0x17ee <_ZN6String7replaceEcc+0x7e>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	8d 87       	std	Y+13, r24	; 0x0d
    17f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f4:	88 23       	and	r24, r24
    17f6:	01 f4       	brne	.+0      	; 0x17f8 <_ZN6String7replaceEcc+0x88>
    *temp = replaceChar;

  return theReturn;
    17f8:	8e 85       	ldd	r24, Y+14	; 0x0e
    17fa:	9f 85       	ldd	r25, Y+15	; 0x0f
    17fc:	9e 01       	movw	r18, r28
    17fe:	2d 5f       	subi	r18, 0xFD	; 253
    1800:	3f 4f       	sbci	r19, 0xFF	; 255
    1802:	b9 01       	movw	r22, r18
    1804:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1808:	ce 01       	movw	r24, r28
    180a:	03 96       	adiw	r24, 0x03	; 3
    180c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1810:	8e 85       	ldd	r24, Y+14	; 0x0e
    1812:	9f 85       	ldd	r25, Y+15	; 0x0f
    1814:	8e 85       	ldd	r24, Y+14	; 0x0e
    1816:	9f 85       	ldd	r25, Y+15	; 0x0f
    1818:	2f 96       	adiw	r28, 0x0f	; 15
    181a:	0f b6       	in	r0, 0x3f	; 63
    181c:	f8 94       	cli
    181e:	de bf       	out	0x3e, r29	; 62
    1820:	0f be       	out	0x3f, r0	; 63
    1822:	cd bf       	out	0x3d, r28	; 61
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <_ZN6StringC2EPKc>:
#include <stdlib.h>
#include "WProgram.h"
#include "WString.h"


String::String( const char *value )
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <_ZN6StringC2EPKc+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <_ZN6StringC2EPKc+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	89 83       	std	Y+1, r24	; 0x01
    183a:	7c 83       	std	Y+4, r23	; 0x04
    183c:	6b 83       	std	Y+3, r22	; 0x03
{
  if ( value == NULL )
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	9c 81       	ldd	r25, Y+4	; 0x04
    1842:	00 97       	sbiw	r24, 0x00	; 0
    1844:	01 f4       	brne	.+0      	; 0x1846 <_ZN6StringC2EPKc+0x1c>
    value = "";
    1846:	80 e0       	ldi	r24, 0x00	; 0
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	9c 83       	std	Y+4, r25	; 0x04
    184c:	8b 83       	std	Y+3, r24	; 0x03
  getBuffer( _length = strlen( value ) );
    184e:	8b 81       	ldd	r24, Y+3	; 0x03
    1850:	9c 81       	ldd	r25, Y+4	; 0x04
    1852:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1856:	e9 81       	ldd	r30, Y+1	; 0x01
    1858:	fa 81       	ldd	r31, Y+2	; 0x02
    185a:	95 83       	std	Z+5, r25	; 0x05
    185c:	84 83       	std	Z+4, r24	; 0x04
    185e:	e9 81       	ldd	r30, Y+1	; 0x01
    1860:	fa 81       	ldd	r31, Y+2	; 0x02
    1862:	24 81       	ldd	r18, Z+4	; 0x04
    1864:	35 81       	ldd	r19, Z+5	; 0x05
    1866:	89 81       	ldd	r24, Y+1	; 0x01
    1868:	9a 81       	ldd	r25, Y+2	; 0x02
    186a:	b9 01       	movw	r22, r18
    186c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1870:	e9 81       	ldd	r30, Y+1	; 0x01
    1872:	fa 81       	ldd	r31, Y+2	; 0x02
    1874:	80 81       	ld	r24, Z
    1876:	91 81       	ldd	r25, Z+1	; 0x01
    1878:	00 97       	sbiw	r24, 0x00	; 0
    187a:	01 f0       	breq	.+0      	; 0x187c <_ZN6StringC2EPKc+0x52>
    strcpy( _buffer, value );
    187c:	e9 81       	ldd	r30, Y+1	; 0x01
    187e:	fa 81       	ldd	r31, Y+2	; 0x02
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	2b 81       	ldd	r18, Y+3	; 0x03
    1886:	3c 81       	ldd	r19, Y+4	; 0x04
    1888:	b9 01       	movw	r22, r18
    188a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    188e:	0f 90       	pop	r0
    1890:	0f 90       	pop	r0
    1892:	0f 90       	pop	r0
    1894:	0f 90       	pop	r0
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	08 95       	ret

0000189c <_ZN6StringC1Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    189c:	df 93       	push	r29
    189e:	cf 93       	push	r28
    18a0:	cd b7       	in	r28, 0x3d	; 61
    18a2:	de b7       	in	r29, 0x3e	; 62
    18a4:	a9 97       	sbiw	r28, 0x29	; 41
    18a6:	0f b6       	in	r0, 0x3f	; 63
    18a8:	f8 94       	cli
    18aa:	de bf       	out	0x3e, r29	; 62
    18ac:	0f be       	out	0x3f, r0	; 63
    18ae:	cd bf       	out	0x3d, r28	; 61
    18b0:	9b a3       	std	Y+35, r25	; 0x23
    18b2:	8a a3       	std	Y+34, r24	; 0x22
    18b4:	4c a3       	std	Y+36, r20	; 0x24
    18b6:	5d a3       	std	Y+37, r21	; 0x25
    18b8:	6e a3       	std	Y+38, r22	; 0x26
    18ba:	7f a3       	std	Y+39, r23	; 0x27
    18bc:	39 a7       	std	Y+41, r19	; 0x29
    18be:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ltoa(value, buf, base);
    18c0:	8c a1       	ldd	r24, Y+36	; 0x24
    18c2:	9d a1       	ldd	r25, Y+37	; 0x25
    18c4:	ae a1       	ldd	r26, Y+38	; 0x26
    18c6:	bf a1       	ldd	r27, Y+39	; 0x27
    18c8:	e8 a5       	ldd	r30, Y+40	; 0x28
    18ca:	f9 a5       	ldd	r31, Y+41	; 0x29
    18cc:	bc 01       	movw	r22, r24
    18ce:	cd 01       	movw	r24, r26
    18d0:	9e 01       	movw	r18, r28
    18d2:	2f 5f       	subi	r18, 0xFF	; 255
    18d4:	3f 4f       	sbci	r19, 0xFF	; 255
    18d6:	a9 01       	movw	r20, r18
    18d8:	9f 01       	movw	r18, r30
    18da:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    18de:	ce 01       	movw	r24, r28
    18e0:	01 96       	adiw	r24, 0x01	; 1
    18e2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    18e6:	ea a1       	ldd	r30, Y+34	; 0x22
    18e8:	fb a1       	ldd	r31, Y+35	; 0x23
    18ea:	95 83       	std	Z+5, r25	; 0x05
    18ec:	84 83       	std	Z+4, r24	; 0x04
    18ee:	ea a1       	ldd	r30, Y+34	; 0x22
    18f0:	fb a1       	ldd	r31, Y+35	; 0x23
    18f2:	24 81       	ldd	r18, Z+4	; 0x04
    18f4:	35 81       	ldd	r19, Z+5	; 0x05
    18f6:	8a a1       	ldd	r24, Y+34	; 0x22
    18f8:	9b a1       	ldd	r25, Y+35	; 0x23
    18fa:	b9 01       	movw	r22, r18
    18fc:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1900:	ea a1       	ldd	r30, Y+34	; 0x22
    1902:	fb a1       	ldd	r31, Y+35	; 0x23
    1904:	80 81       	ld	r24, Z
    1906:	91 81       	ldd	r25, Z+1	; 0x01
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	01 f0       	breq	.+0      	; 0x190c <_ZN6StringC1Eli+0x70>
    strcpy( _buffer, buf );
    190c:	ea a1       	ldd	r30, Y+34	; 0x22
    190e:	fb a1       	ldd	r31, Y+35	; 0x23
    1910:	80 81       	ld	r24, Z
    1912:	91 81       	ldd	r25, Z+1	; 0x01
    1914:	9e 01       	movw	r18, r28
    1916:	2f 5f       	subi	r18, 0xFF	; 255
    1918:	3f 4f       	sbci	r19, 0xFF	; 255
    191a:	b9 01       	movw	r22, r18
    191c:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1920:	a9 96       	adiw	r28, 0x29	; 41
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	cf 91       	pop	r28
    192e:	df 91       	pop	r29
    1930:	08 95       	ret

00001932 <_ZN6StringC2Eli>:
  getBuffer( _length = strlen(buf) );
  if ( _buffer != NULL )
    strcpy( _buffer, buf );
}

String::String( const long value, const int base )
    1932:	df 93       	push	r29
    1934:	cf 93       	push	r28
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	a9 97       	sbiw	r28, 0x29	; 41
    193c:	0f b6       	in	r0, 0x3f	; 63
    193e:	f8 94       	cli
    1940:	de bf       	out	0x3e, r29	; 62
    1942:	0f be       	out	0x3f, r0	; 63
    1944:	cd bf       	out	0x3d, r28	; 61
    1946:	9b a3       	std	Y+35, r25	; 0x23
    1948:	8a a3       	std	Y+34, r24	; 0x22
    194a:	4c a3       	std	Y+36, r20	; 0x24
    194c:	5d a3       	std	Y+37, r21	; 0x25
    194e:	6e a3       	std	Y+38, r22	; 0x26
    1950:	7f a3       	std	Y+39, r23	; 0x27
    1952:	39 a7       	std	Y+41, r19	; 0x29
    1954:	28 a7       	std	Y+40, r18	; 0x28
{
  char buf[33];   
  ltoa(value, buf, base);
    1956:	8c a1       	ldd	r24, Y+36	; 0x24
    1958:	9d a1       	ldd	r25, Y+37	; 0x25
    195a:	ae a1       	ldd	r26, Y+38	; 0x26
    195c:	bf a1       	ldd	r27, Y+39	; 0x27
    195e:	e8 a5       	ldd	r30, Y+40	; 0x28
    1960:	f9 a5       	ldd	r31, Y+41	; 0x29
    1962:	bc 01       	movw	r22, r24
    1964:	cd 01       	movw	r24, r26
    1966:	9e 01       	movw	r18, r28
    1968:	2f 5f       	subi	r18, 0xFF	; 255
    196a:	3f 4f       	sbci	r19, 0xFF	; 255
    196c:	a9 01       	movw	r20, r18
    196e:	9f 01       	movw	r18, r30
    1970:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    1974:	ce 01       	movw	r24, r28
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    197c:	ea a1       	ldd	r30, Y+34	; 0x22
    197e:	fb a1       	ldd	r31, Y+35	; 0x23
    1980:	95 83       	std	Z+5, r25	; 0x05
    1982:	84 83       	std	Z+4, r24	; 0x04
    1984:	ea a1       	ldd	r30, Y+34	; 0x22
    1986:	fb a1       	ldd	r31, Y+35	; 0x23
    1988:	24 81       	ldd	r18, Z+4	; 0x04
    198a:	35 81       	ldd	r19, Z+5	; 0x05
    198c:	8a a1       	ldd	r24, Y+34	; 0x22
    198e:	9b a1       	ldd	r25, Y+35	; 0x23
    1990:	b9 01       	movw	r22, r18
    1992:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1996:	ea a1       	ldd	r30, Y+34	; 0x22
    1998:	fb a1       	ldd	r31, Y+35	; 0x23
    199a:	80 81       	ld	r24, Z
    199c:	91 81       	ldd	r25, Z+1	; 0x01
    199e:	00 97       	sbiw	r24, 0x00	; 0
    19a0:	01 f0       	breq	.+0      	; 0x19a2 <_ZN6StringC2Eli+0x70>
    strcpy( _buffer, buf );
    19a2:	ea a1       	ldd	r30, Y+34	; 0x22
    19a4:	fb a1       	ldd	r31, Y+35	; 0x23
    19a6:	80 81       	ld	r24, Z
    19a8:	91 81       	ldd	r25, Z+1	; 0x01
    19aa:	9e 01       	movw	r18, r28
    19ac:	2f 5f       	subi	r18, 0xFF	; 255
    19ae:	3f 4f       	sbci	r19, 0xFF	; 255
    19b0:	b9 01       	movw	r22, r18
    19b2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    19b6:	a9 96       	adiw	r28, 0x29	; 41
    19b8:	0f b6       	in	r0, 0x3f	; 63
    19ba:	f8 94       	cli
    19bc:	de bf       	out	0x3e, r29	; 62
    19be:	0f be       	out	0x3f, r0	; 63
    19c0:	cd bf       	out	0x3d, r28	; 61
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <_ZN6StringC1Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
    19d0:	a7 97       	sbiw	r28, 0x27	; 39
    19d2:	0f b6       	in	r0, 0x3f	; 63
    19d4:	f8 94       	cli
    19d6:	de bf       	out	0x3e, r29	; 62
    19d8:	0f be       	out	0x3f, r0	; 63
    19da:	cd bf       	out	0x3d, r28	; 61
    19dc:	9b a3       	std	Y+35, r25	; 0x23
    19de:	8a a3       	std	Y+34, r24	; 0x22
    19e0:	7d a3       	std	Y+37, r23	; 0x25
    19e2:	6c a3       	std	Y+36, r22	; 0x24
    19e4:	5f a3       	std	Y+39, r21	; 0x27
    19e6:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    19e8:	8c a1       	ldd	r24, Y+36	; 0x24
    19ea:	9d a1       	ldd	r25, Y+37	; 0x25
    19ec:	4e a1       	ldd	r20, Y+38	; 0x26
    19ee:	5f a1       	ldd	r21, Y+39	; 0x27
    19f0:	9e 01       	movw	r18, r28
    19f2:	2f 5f       	subi	r18, 0xFF	; 255
    19f4:	3f 4f       	sbci	r19, 0xFF	; 255
    19f6:	b9 01       	movw	r22, r18
    19f8:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    19fc:	ce 01       	movw	r24, r28
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1a04:	ea a1       	ldd	r30, Y+34	; 0x22
    1a06:	fb a1       	ldd	r31, Y+35	; 0x23
    1a08:	95 83       	std	Z+5, r25	; 0x05
    1a0a:	84 83       	std	Z+4, r24	; 0x04
    1a0c:	ea a1       	ldd	r30, Y+34	; 0x22
    1a0e:	fb a1       	ldd	r31, Y+35	; 0x23
    1a10:	24 81       	ldd	r18, Z+4	; 0x04
    1a12:	35 81       	ldd	r19, Z+5	; 0x05
    1a14:	8a a1       	ldd	r24, Y+34	; 0x22
    1a16:	9b a1       	ldd	r25, Y+35	; 0x23
    1a18:	b9 01       	movw	r22, r18
    1a1a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1a1e:	ea a1       	ldd	r30, Y+34	; 0x22
    1a20:	fb a1       	ldd	r31, Y+35	; 0x23
    1a22:	80 81       	ld	r24, Z
    1a24:	91 81       	ldd	r25, Z+1	; 0x01
    1a26:	00 97       	sbiw	r24, 0x00	; 0
    1a28:	01 f0       	breq	.+0      	; 0x1a2a <_ZN6StringC1Eii+0x62>
    strcpy( _buffer, buf );
    1a2a:	ea a1       	ldd	r30, Y+34	; 0x22
    1a2c:	fb a1       	ldd	r31, Y+35	; 0x23
    1a2e:	80 81       	ld	r24, Z
    1a30:	91 81       	ldd	r25, Z+1	; 0x01
    1a32:	9e 01       	movw	r18, r28
    1a34:	2f 5f       	subi	r18, 0xFF	; 255
    1a36:	3f 4f       	sbci	r19, 0xFF	; 255
    1a38:	b9 01       	movw	r22, r18
    1a3a:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1a3e:	a7 96       	adiw	r28, 0x27	; 39
    1a40:	0f b6       	in	r0, 0x3f	; 63
    1a42:	f8 94       	cli
    1a44:	de bf       	out	0x3e, r29	; 62
    1a46:	0f be       	out	0x3f, r0	; 63
    1a48:	cd bf       	out	0x3d, r28	; 61
    1a4a:	cf 91       	pop	r28
    1a4c:	df 91       	pop	r29
    1a4e:	08 95       	ret

00001a50 <_ZN6StringC2Eii>:
    _buffer[0] = value;
    _buffer[1] = 0;
  }
}

String::String( const int value, const int base )
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
    1a58:	a7 97       	sbiw	r28, 0x27	; 39
    1a5a:	0f b6       	in	r0, 0x3f	; 63
    1a5c:	f8 94       	cli
    1a5e:	de bf       	out	0x3e, r29	; 62
    1a60:	0f be       	out	0x3f, r0	; 63
    1a62:	cd bf       	out	0x3d, r28	; 61
    1a64:	9b a3       	std	Y+35, r25	; 0x23
    1a66:	8a a3       	std	Y+34, r24	; 0x22
    1a68:	7d a3       	std	Y+37, r23	; 0x25
    1a6a:	6c a3       	std	Y+36, r22	; 0x24
    1a6c:	5f a3       	std	Y+39, r21	; 0x27
    1a6e:	4e a3       	std	Y+38, r20	; 0x26
{
  char buf[33];   
  itoa((signed long)value, buf, base);
    1a70:	8c a1       	ldd	r24, Y+36	; 0x24
    1a72:	9d a1       	ldd	r25, Y+37	; 0x25
    1a74:	4e a1       	ldd	r20, Y+38	; 0x26
    1a76:	5f a1       	ldd	r21, Y+39	; 0x27
    1a78:	9e 01       	movw	r18, r28
    1a7a:	2f 5f       	subi	r18, 0xFF	; 255
    1a7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a7e:	b9 01       	movw	r22, r18
    1a80:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  getBuffer( _length = strlen(buf) );
    1a84:	ce 01       	movw	r24, r28
    1a86:	01 96       	adiw	r24, 0x01	; 1
    1a88:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
    1a8c:	ea a1       	ldd	r30, Y+34	; 0x22
    1a8e:	fb a1       	ldd	r31, Y+35	; 0x23
    1a90:	95 83       	std	Z+5, r25	; 0x05
    1a92:	84 83       	std	Z+4, r24	; 0x04
    1a94:	ea a1       	ldd	r30, Y+34	; 0x22
    1a96:	fb a1       	ldd	r31, Y+35	; 0x23
    1a98:	24 81       	ldd	r18, Z+4	; 0x04
    1a9a:	35 81       	ldd	r19, Z+5	; 0x05
    1a9c:	8a a1       	ldd	r24, Y+34	; 0x22
    1a9e:	9b a1       	ldd	r25, Y+35	; 0x23
    1aa0:	b9 01       	movw	r22, r18
    1aa2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
  if ( _buffer != NULL )
    1aa6:	ea a1       	ldd	r30, Y+34	; 0x22
    1aa8:	fb a1       	ldd	r31, Y+35	; 0x23
    1aaa:	80 81       	ld	r24, Z
    1aac:	91 81       	ldd	r25, Z+1	; 0x01
    1aae:	00 97       	sbiw	r24, 0x00	; 0
    1ab0:	01 f0       	breq	.+0      	; 0x1ab2 <_ZN6StringC2Eii+0x62>
    strcpy( _buffer, buf );
    1ab2:	ea a1       	ldd	r30, Y+34	; 0x22
    1ab4:	fb a1       	ldd	r31, Y+35	; 0x23
    1ab6:	80 81       	ld	r24, Z
    1ab8:	91 81       	ldd	r25, Z+1	; 0x01
    1aba:	9e 01       	movw	r18, r28
    1abc:	2f 5f       	subi	r18, 0xFF	; 255
    1abe:	3f 4f       	sbci	r19, 0xFF	; 255
    1ac0:	b9 01       	movw	r22, r18
    1ac2:	0e 94 00 00 	call	0	; 0x0 <_ZNK6String6lengthEv>
}
    1ac6:	a7 96       	adiw	r28, 0x27	; 39
    1ac8:	0f b6       	in	r0, 0x3f	; 63
    1aca:	f8 94       	cli
    1acc:	de bf       	out	0x3e, r29	; 62
    1ace:	0f be       	out	0x3f, r0	; 63
    1ad0:	cd bf       	out	0x3d, r28	; 61
    1ad2:	cf 91       	pop	r28
    1ad4:	df 91       	pop	r29
    1ad6:	08 95       	ret

main.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000016  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000004a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000004a  2**0
                  ALLOC
  3 .stab         00000468  00000000  00000000  0000004c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a0d  00000000  00000000  000004b4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <main>:
#include <WProgram.h>

int main(void)
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
{
	init();
   8:	0e 94 00 00 	call	0	; 0x0 <main>

	setup();
   c:	0e 94 00 00 	call	0	; 0x0 <main>
    
	for (;;)
		loop();
  10:	0e 94 00 00 	call	0	; 0x0 <main>
  14:	00 c0       	rjmp	.+0      	; 0x16 <__zero_reg__+0x15>

missing.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000000a  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  0000003e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  0000003e  2**0
                  ALLOC
  3 .stab         000000fc  00000000  00000000  00000040  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000257  00000000  00000000  0000013c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__cxa_pure_virtual>:
void __cxa_pure_virtual()
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	00 c0       	rjmp	.+0      	; 0xa <__zero_reg__+0x9>

pins_arduino.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000000  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000038  2**0
                  ALLOC
  3 .stab         00000534  00000000  00000000  00000038  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c4d  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .progmem.data 0000005a  00000000  00000000  000011b9  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA

wiring.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a0  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  000003d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  00000000  00000000  000003d4  2**0
                  ALLOC
  3 .stab         00000828  00000000  00000000  000003d4  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000ac8  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vector_16>:
volatile unsigned long timer0_overflow_count = 0;
volatile unsigned long timer0_millis = 0;
static unsigned char timer0_fract = 0;

SIGNAL(TIMER0_OVF_vect)
{
   0:	1f 92       	push	r1
   2:	0f 92       	push	r0
   4:	0f b6       	in	r0, 0x3f	; 63
   6:	0f 92       	push	r0
   8:	11 24       	eor	r1, r1
   a:	8f 93       	push	r24
   c:	9f 93       	push	r25
   e:	af 93       	push	r26
  10:	bf 93       	push	r27
  12:	df 93       	push	r29
  14:	cf 93       	push	r28
  16:	00 d0       	rcall	.+0      	; 0x18 <__vector_16+0x18>
  18:	00 d0       	rcall	.+0      	; 0x1a <__vector_16+0x1a>
  1a:	0f 92       	push	r0
  1c:	cd b7       	in	r28, 0x3d	; 61
  1e:	de b7       	in	r29, 0x3e	; 62
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
  20:	80 91 00 00 	lds	r24, 0x0000
  24:	90 91 00 00 	lds	r25, 0x0000
  28:	a0 91 00 00 	lds	r26, 0x0000
  2c:	b0 91 00 00 	lds	r27, 0x0000
  30:	8a 83       	std	Y+2, r24	; 0x02
  32:	9b 83       	std	Y+3, r25	; 0x03
  34:	ac 83       	std	Y+4, r26	; 0x04
  36:	bd 83       	std	Y+5, r27	; 0x05
	unsigned char f = timer0_fract;
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	89 83       	std	Y+1, r24	; 0x01

	m += MILLIS_INC;
  3e:	8a 81       	ldd	r24, Y+2	; 0x02
  40:	9b 81       	ldd	r25, Y+3	; 0x03
  42:	ac 81       	ldd	r26, Y+4	; 0x04
  44:	bd 81       	ldd	r27, Y+5	; 0x05
  46:	01 96       	adiw	r24, 0x01	; 1
  48:	a1 1d       	adc	r26, r1
  4a:	b1 1d       	adc	r27, r1
  4c:	8a 83       	std	Y+2, r24	; 0x02
  4e:	9b 83       	std	Y+3, r25	; 0x03
  50:	ac 83       	std	Y+4, r26	; 0x04
  52:	bd 83       	std	Y+5, r27	; 0x05
	f += FRACT_INC;
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	8d 5f       	subi	r24, 0xFD	; 253
  58:	89 83       	std	Y+1, r24	; 0x01
	if (f >= FRACT_MAX) {
  5a:	89 81       	ldd	r24, Y+1	; 0x01
  5c:	8d 37       	cpi	r24, 0x7D	; 125
  5e:	00 f0       	brcs	.+0      	; 0x60 <__vector_16+0x60>
		f -= FRACT_MAX;
  60:	89 81       	ldd	r24, Y+1	; 0x01
  62:	8d 57       	subi	r24, 0x7D	; 125
  64:	89 83       	std	Y+1, r24	; 0x01
		m += 1;
  66:	8a 81       	ldd	r24, Y+2	; 0x02
  68:	9b 81       	ldd	r25, Y+3	; 0x03
  6a:	ac 81       	ldd	r26, Y+4	; 0x04
  6c:	bd 81       	ldd	r27, Y+5	; 0x05
  6e:	01 96       	adiw	r24, 0x01	; 1
  70:	a1 1d       	adc	r26, r1
  72:	b1 1d       	adc	r27, r1
  74:	8a 83       	std	Y+2, r24	; 0x02
  76:	9b 83       	std	Y+3, r25	; 0x03
  78:	ac 83       	std	Y+4, r26	; 0x04
  7a:	bd 83       	std	Y+5, r27	; 0x05
	}

	timer0_fract = f;
  7c:	89 81       	ldd	r24, Y+1	; 0x01
  7e:	80 93 00 00 	sts	0x0000, r24
	timer0_millis = m;
  82:	8a 81       	ldd	r24, Y+2	; 0x02
  84:	9b 81       	ldd	r25, Y+3	; 0x03
  86:	ac 81       	ldd	r26, Y+4	; 0x04
  88:	bd 81       	ldd	r27, Y+5	; 0x05
  8a:	80 93 00 00 	sts	0x0000, r24
  8e:	90 93 00 00 	sts	0x0000, r25
  92:	a0 93 00 00 	sts	0x0000, r26
  96:	b0 93 00 00 	sts	0x0000, r27
	timer0_overflow_count++;
  9a:	80 91 00 00 	lds	r24, 0x0000
  9e:	90 91 00 00 	lds	r25, 0x0000
  a2:	a0 91 00 00 	lds	r26, 0x0000
  a6:	b0 91 00 00 	lds	r27, 0x0000
  aa:	01 96       	adiw	r24, 0x01	; 1
  ac:	a1 1d       	adc	r26, r1
  ae:	b1 1d       	adc	r27, r1
  b0:	80 93 00 00 	sts	0x0000, r24
  b4:	90 93 00 00 	sts	0x0000, r25
  b8:	a0 93 00 00 	sts	0x0000, r26
  bc:	b0 93 00 00 	sts	0x0000, r27
}
  c0:	0f 90       	pop	r0
  c2:	0f 90       	pop	r0
  c4:	0f 90       	pop	r0
  c6:	0f 90       	pop	r0
  c8:	0f 90       	pop	r0
  ca:	cf 91       	pop	r28
  cc:	df 91       	pop	r29
  ce:	bf 91       	pop	r27
  d0:	af 91       	pop	r26
  d2:	9f 91       	pop	r25
  d4:	8f 91       	pop	r24
  d6:	0f 90       	pop	r0
  d8:	0f be       	out	0x3f, r0	; 63
  da:	0f 90       	pop	r0
  dc:	1f 90       	pop	r1
  de:	18 95       	reti

000000e0 <millis>:

unsigned long millis()
{
  e0:	df 93       	push	r29
  e2:	cf 93       	push	r28
  e4:	00 d0       	rcall	.+0      	; 0xe6 <millis+0x6>
  e6:	00 d0       	rcall	.+0      	; 0xe8 <millis+0x8>
  e8:	0f 92       	push	r0
  ea:	cd b7       	in	r28, 0x3d	; 61
  ec:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG;
  ee:	ef e5       	ldi	r30, 0x5F	; 95
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	89 83       	std	Y+1, r24	; 0x01

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
  f6:	f8 94       	cli
	m = timer0_millis;
  f8:	80 91 00 00 	lds	r24, 0x0000
  fc:	90 91 00 00 	lds	r25, 0x0000
 100:	a0 91 00 00 	lds	r26, 0x0000
 104:	b0 91 00 00 	lds	r27, 0x0000
 108:	8a 83       	std	Y+2, r24	; 0x02
 10a:	9b 83       	std	Y+3, r25	; 0x03
 10c:	ac 83       	std	Y+4, r26	; 0x04
 10e:	bd 83       	std	Y+5, r27	; 0x05
	SREG = oldSREG;
 110:	ef e5       	ldi	r30, 0x5F	; 95
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	89 81       	ldd	r24, Y+1	; 0x01
 116:	80 83       	st	Z, r24

	return m;
 118:	8a 81       	ldd	r24, Y+2	; 0x02
 11a:	9b 81       	ldd	r25, Y+3	; 0x03
 11c:	ac 81       	ldd	r26, Y+4	; 0x04
 11e:	bd 81       	ldd	r27, Y+5	; 0x05
}
 120:	bc 01       	movw	r22, r24
 122:	cd 01       	movw	r24, r26
 124:	0f 90       	pop	r0
 126:	0f 90       	pop	r0
 128:	0f 90       	pop	r0
 12a:	0f 90       	pop	r0
 12c:	0f 90       	pop	r0
 12e:	cf 91       	pop	r28
 130:	df 91       	pop	r29
 132:	08 95       	ret

00000134 <micros>:

unsigned long micros() {
 134:	df 93       	push	r29
 136:	cf 93       	push	r28
 138:	00 d0       	rcall	.+0      	; 0x13a <micros+0x6>
 13a:	00 d0       	rcall	.+0      	; 0x13c <micros+0x8>
 13c:	00 d0       	rcall	.+0      	; 0x13e <micros+0xa>
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
	unsigned long m;
	uint8_t oldSREG = SREG, t;
 142:	ef e5       	ldi	r30, 0x5F	; 95
 144:	f0 e0       	ldi	r31, 0x00	; 0
 146:	80 81       	ld	r24, Z
 148:	8a 83       	std	Y+2, r24	; 0x02
	
	cli();
 14a:	f8 94       	cli
	m = timer0_overflow_count;
 14c:	80 91 00 00 	lds	r24, 0x0000
 150:	90 91 00 00 	lds	r25, 0x0000
 154:	a0 91 00 00 	lds	r26, 0x0000
 158:	b0 91 00 00 	lds	r27, 0x0000
 15c:	8b 83       	std	Y+3, r24	; 0x03
 15e:	9c 83       	std	Y+4, r25	; 0x04
 160:	ad 83       	std	Y+5, r26	; 0x05
 162:	be 83       	std	Y+6, r27	; 0x06
	t = TCNT0;
 164:	e6 e4       	ldi	r30, 0x46	; 70
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	89 83       	std	Y+1, r24	; 0x01
  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
 16c:	e5 e3       	ldi	r30, 0x35	; 53
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 2f       	mov	r24, r24
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	81 70       	andi	r24, 0x01	; 1
 178:	90 70       	andi	r25, 0x00	; 0
 17a:	88 23       	and	r24, r24
 17c:	01 f0       	breq	.+0      	; 0x17e <micros+0x4a>
 17e:	89 81       	ldd	r24, Y+1	; 0x01
 180:	8f 3f       	cpi	r24, 0xFF	; 255
 182:	01 f0       	breq	.+0      	; 0x184 <micros+0x50>
		m++;
 184:	8b 81       	ldd	r24, Y+3	; 0x03
 186:	9c 81       	ldd	r25, Y+4	; 0x04
 188:	ad 81       	ldd	r26, Y+5	; 0x05
 18a:	be 81       	ldd	r27, Y+6	; 0x06
 18c:	01 96       	adiw	r24, 0x01	; 1
 18e:	a1 1d       	adc	r26, r1
 190:	b1 1d       	adc	r27, r1
 192:	8b 83       	std	Y+3, r24	; 0x03
 194:	9c 83       	std	Y+4, r25	; 0x04
 196:	ad 83       	std	Y+5, r26	; 0x05
 198:	be 83       	std	Y+6, r27	; 0x06
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
 19a:	ef e5       	ldi	r30, 0x5F	; 95
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	8a 81       	ldd	r24, Y+2	; 0x02
 1a0:	80 83       	st	Z, r24
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
 1a2:	8b 81       	ldd	r24, Y+3	; 0x03
 1a4:	9c 81       	ldd	r25, Y+4	; 0x04
 1a6:	ad 81       	ldd	r26, Y+5	; 0x05
 1a8:	be 81       	ldd	r27, Y+6	; 0x06
 1aa:	22 27       	eor	r18, r18
 1ac:	38 2f       	mov	r19, r24
 1ae:	49 2f       	mov	r20, r25
 1b0:	5a 2f       	mov	r21, r26
 1b2:	89 81       	ldd	r24, Y+1	; 0x01
 1b4:	88 2f       	mov	r24, r24
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	a0 e0       	ldi	r26, 0x00	; 0
 1ba:	b0 e0       	ldi	r27, 0x00	; 0
 1bc:	82 0f       	add	r24, r18
 1be:	93 1f       	adc	r25, r19
 1c0:	a4 1f       	adc	r26, r20
 1c2:	b5 1f       	adc	r27, r21
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	aa 1f       	adc	r26, r26
 1ca:	bb 1f       	adc	r27, r27
 1cc:	88 0f       	add	r24, r24
 1ce:	99 1f       	adc	r25, r25
 1d0:	aa 1f       	adc	r26, r26
 1d2:	bb 1f       	adc	r27, r27
}
 1d4:	bc 01       	movw	r22, r24
 1d6:	cd 01       	movw	r24, r26
 1d8:	26 96       	adiw	r28, 0x06	; 6
 1da:	0f b6       	in	r0, 0x3f	; 63
 1dc:	f8 94       	cli
 1de:	de bf       	out	0x3e, r29	; 62
 1e0:	0f be       	out	0x3f, r0	; 63
 1e2:	cd bf       	out	0x3d, r28	; 61
 1e4:	cf 91       	pop	r28
 1e6:	df 91       	pop	r29
 1e8:	08 95       	ret

000001ea <delay>:

void delay(unsigned long ms)
{
 1ea:	df 93       	push	r29
 1ec:	cf 93       	push	r28
 1ee:	00 d0       	rcall	.+0      	; 0x1f0 <delay+0x6>
 1f0:	00 d0       	rcall	.+0      	; 0x1f2 <delay+0x8>
 1f2:	00 d0       	rcall	.+0      	; 0x1f4 <delay+0xa>
 1f4:	cd b7       	in	r28, 0x3d	; 61
 1f6:	de b7       	in	r29, 0x3e	; 62
 1f8:	6b 83       	std	Y+3, r22	; 0x03
 1fa:	7c 83       	std	Y+4, r23	; 0x04
 1fc:	8d 83       	std	Y+5, r24	; 0x05
 1fe:	9e 83       	std	Y+6, r25	; 0x06
	uint16_t start = (uint16_t)micros();
 200:	0e 94 00 00 	call	0	; 0x0 <__vector_16>
 204:	dc 01       	movw	r26, r24
 206:	cb 01       	movw	r24, r22
 208:	9a 83       	std	Y+2, r25	; 0x02
 20a:	89 83       	std	Y+1, r24	; 0x01
 20c:	00 c0       	rjmp	.+0      	; 0x20e <delay+0x24>

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
 20e:	0e 94 00 00 	call	0	; 0x0 <__vector_16>
 212:	dc 01       	movw	r26, r24
 214:	cb 01       	movw	r24, r22
 216:	9c 01       	movw	r18, r24
 218:	89 81       	ldd	r24, Y+1	; 0x01
 21a:	9a 81       	ldd	r25, Y+2	; 0x02
 21c:	a9 01       	movw	r20, r18
 21e:	48 1b       	sub	r20, r24
 220:	59 0b       	sbc	r21, r25
 222:	ca 01       	movw	r24, r20
 224:	53 e0       	ldi	r21, 0x03	; 3
 226:	88 3e       	cpi	r24, 0xE8	; 232
 228:	95 07       	cpc	r25, r21
 22a:	00 f0       	brcs	.+0      	; 0x22c <delay+0x42>
			ms--;
 22c:	8b 81       	ldd	r24, Y+3	; 0x03
 22e:	9c 81       	ldd	r25, Y+4	; 0x04
 230:	ad 81       	ldd	r26, Y+5	; 0x05
 232:	be 81       	ldd	r27, Y+6	; 0x06
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	a1 09       	sbc	r26, r1
 238:	b1 09       	sbc	r27, r1
 23a:	8b 83       	std	Y+3, r24	; 0x03
 23c:	9c 83       	std	Y+4, r25	; 0x04
 23e:	ad 83       	std	Y+5, r26	; 0x05
 240:	be 83       	std	Y+6, r27	; 0x06
			start += 1000;
 242:	89 81       	ldd	r24, Y+1	; 0x01
 244:	9a 81       	ldd	r25, Y+2	; 0x02
 246:	88 51       	subi	r24, 0x18	; 24
 248:	9c 4f       	sbci	r25, 0xFC	; 252
 24a:	9a 83       	std	Y+2, r25	; 0x02
 24c:	89 83       	std	Y+1, r24	; 0x01

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
 24e:	8b 81       	ldd	r24, Y+3	; 0x03
 250:	9c 81       	ldd	r25, Y+4	; 0x04
 252:	ad 81       	ldd	r26, Y+5	; 0x05
 254:	be 81       	ldd	r27, Y+6	; 0x06
 256:	00 97       	sbiw	r24, 0x00	; 0
 258:	a1 05       	cpc	r26, r1
 25a:	b1 05       	cpc	r27, r1
 25c:	01 f4       	brne	.+0      	; 0x25e <delay+0x74>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
 25e:	26 96       	adiw	r28, 0x06	; 6
 260:	0f b6       	in	r0, 0x3f	; 63
 262:	f8 94       	cli
 264:	de bf       	out	0x3e, r29	; 62
 266:	0f be       	out	0x3f, r0	; 63
 268:	cd bf       	out	0x3d, r28	; 61
 26a:	cf 91       	pop	r28
 26c:	df 91       	pop	r29
 26e:	08 95       	ret

00000270 <delayMicroseconds>:

/* Delay for the given number of microseconds.  Assumes a 8 or 16 MHz clock. */
void delayMicroseconds(unsigned int us)
{
 270:	df 93       	push	r29
 272:	cf 93       	push	r28
 274:	00 d0       	rcall	.+0      	; 0x276 <delayMicroseconds+0x6>
 276:	cd b7       	in	r28, 0x3d	; 61
 278:	de b7       	in	r29, 0x3e	; 62
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
#if F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call yields a delay of approximately 1 1/8 us.
	if (--us == 0)
 27e:	89 81       	ldd	r24, Y+1	; 0x01
 280:	9a 81       	ldd	r25, Y+2	; 0x02
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	9a 83       	std	Y+2, r25	; 0x02
 286:	89 83       	std	Y+1, r24	; 0x01
 288:	89 81       	ldd	r24, Y+1	; 0x01
 28a:	9a 81       	ldd	r25, Y+2	; 0x02
 28c:	00 97       	sbiw	r24, 0x00	; 0
 28e:	01 f0       	breq	.+0      	; 0x290 <delayMicroseconds+0x20>
		return;

	// the following loop takes a quarter of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2;
 290:	89 81       	ldd	r24, Y+1	; 0x01
 292:	9a 81       	ldd	r25, Y+2	; 0x02
 294:	88 0f       	add	r24, r24
 296:	99 1f       	adc	r25, r25
 298:	88 0f       	add	r24, r24
 29a:	99 1f       	adc	r25, r25
 29c:	9a 83       	std	Y+2, r25	; 0x02
 29e:	89 83       	std	Y+1, r24	; 0x01

	// account for the time taken in the preceeding commands.
	us -= 2;
 2a0:	89 81       	ldd	r24, Y+1	; 0x01
 2a2:	9a 81       	ldd	r25, Y+2	; 0x02
 2a4:	02 97       	sbiw	r24, 0x02	; 2
 2a6:	9a 83       	std	Y+2, r25	; 0x02
 2a8:	89 83       	std	Y+1, r24	; 0x01
	// we can't subtract any more than this or we'd overflow w/ small delays.
	us--;
#endif

	// busy wait
	__asm__ __volatile__ (
 2aa:	89 81       	ldd	r24, Y+1	; 0x01
 2ac:	9a 81       	ldd	r25, Y+2	; 0x02
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	01 f4       	brne	.+0      	; 0x2b2 <delayMicroseconds+0x42>
 2b2:	9a 83       	std	Y+2, r25	; 0x02
 2b4:	89 83       	std	Y+1, r24	; 0x01
		"1: sbiw %0,1" "\n\t" // 2 cycles
		"brne 1b" : "=w" (us) : "0" (us) // 2 cycles
	);
}
 2b6:	0f 90       	pop	r0
 2b8:	0f 90       	pop	r0
 2ba:	cf 91       	pop	r28
 2bc:	df 91       	pop	r29
 2be:	08 95       	ret

000002c0 <init>:

void init()
{
 2c0:	df 93       	push	r29
 2c2:	cf 93       	push	r28
 2c4:	cd b7       	in	r28, 0x3d	; 61
 2c6:	de b7       	in	r29, 0x3e	; 62
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
 2c8:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if !defined(__AVR_ATmega8__)
	sbi(TCCR0A, WGM01);
 2ca:	a4 e4       	ldi	r26, 0x44	; 68
 2cc:	b0 e0       	ldi	r27, 0x00	; 0
 2ce:	e4 e4       	ldi	r30, 0x44	; 68
 2d0:	f0 e0       	ldi	r31, 0x00	; 0
 2d2:	80 81       	ld	r24, Z
 2d4:	82 60       	ori	r24, 0x02	; 2
 2d6:	8c 93       	st	X, r24
	sbi(TCCR0A, WGM00);
 2d8:	a4 e4       	ldi	r26, 0x44	; 68
 2da:	b0 e0       	ldi	r27, 0x00	; 0
 2dc:	e4 e4       	ldi	r30, 0x44	; 68
 2de:	f0 e0       	ldi	r31, 0x00	; 0
 2e0:	80 81       	ld	r24, Z
 2e2:	81 60       	ori	r24, 0x01	; 1
 2e4:	8c 93       	st	X, r24
	// set timer 0 prescale factor to 64
#if defined(__AVR_ATmega8__)
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#else
	sbi(TCCR0B, CS01);
 2e6:	a5 e4       	ldi	r26, 0x45	; 69
 2e8:	b0 e0       	ldi	r27, 0x00	; 0
 2ea:	e5 e4       	ldi	r30, 0x45	; 69
 2ec:	f0 e0       	ldi	r31, 0x00	; 0
 2ee:	80 81       	ld	r24, Z
 2f0:	82 60       	ori	r24, 0x02	; 2
 2f2:	8c 93       	st	X, r24
	sbi(TCCR0B, CS00);
 2f4:	a5 e4       	ldi	r26, 0x45	; 69
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	e5 e4       	ldi	r30, 0x45	; 69
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	81 60       	ori	r24, 0x01	; 1
 300:	8c 93       	st	X, r24
#endif
	// enable timer 0 overflow interrupt
#if defined(__AVR_ATmega8__)
	sbi(TIMSK, TOIE0);
#else
	sbi(TIMSK0, TOIE0);
 302:	ae e6       	ldi	r26, 0x6E	; 110
 304:	b0 e0       	ldi	r27, 0x00	; 0
 306:	ee e6       	ldi	r30, 0x6E	; 110
 308:	f0 e0       	ldi	r31, 0x00	; 0
 30a:	80 81       	ld	r24, Z
 30c:	81 60       	ori	r24, 0x01	; 1
 30e:	8c 93       	st	X, r24
	// timers 1 and 2 are used for phase-correct hardware pwm
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle
        
        TCCR1B = 0;
 310:	e1 e8       	ldi	r30, 0x81	; 129
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
 316:	a1 e8       	ldi	r26, 0x81	; 129
 318:	b0 e0       	ldi	r27, 0x00	; 0
 31a:	e1 e8       	ldi	r30, 0x81	; 129
 31c:	f0 e0       	ldi	r31, 0x00	; 0
 31e:	80 81       	ld	r24, Z
 320:	82 60       	ori	r24, 0x02	; 2
 322:	8c 93       	st	X, r24
	sbi(TCCR1B, CS10);
 324:	a1 e8       	ldi	r26, 0x81	; 129
 326:	b0 e0       	ldi	r27, 0x00	; 0
 328:	e1 e8       	ldi	r30, 0x81	; 129
 32a:	f0 e0       	ldi	r31, 0x00	; 0
 32c:	80 81       	ld	r24, Z
 32e:	81 60       	ori	r24, 0x01	; 1
 330:	8c 93       	st	X, r24
	// put timer 1 in 8-bit phase correct pwm mode
	sbi(TCCR1A, WGM10);
 332:	a0 e8       	ldi	r26, 0x80	; 128
 334:	b0 e0       	ldi	r27, 0x00	; 0
 336:	e0 e8       	ldi	r30, 0x80	; 128
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 81       	ld	r24, Z
 33c:	81 60       	ori	r24, 0x01	; 1
 33e:	8c 93       	st	X, r24

	// set timer 2 prescale factor to 64
#if defined(__AVR_ATmega8__)
	sbi(TCCR2, CS22);
#else
	sbi(TCCR2B, CS22);
 340:	a1 eb       	ldi	r26, 0xB1	; 177
 342:	b0 e0       	ldi	r27, 0x00	; 0
 344:	e1 eb       	ldi	r30, 0xB1	; 177
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	84 60       	ori	r24, 0x04	; 4
 34c:	8c 93       	st	X, r24
#endif
	// configure timer 2 for phase correct pwm (8-bit)
#if defined(__AVR_ATmega8__)
	sbi(TCCR2, WGM20);
#else
	sbi(TCCR2A, WGM20);
 34e:	a0 eb       	ldi	r26, 0xB0	; 176
 350:	b0 e0       	ldi	r27, 0x00	; 0
 352:	e0 eb       	ldi	r30, 0xB0	; 176
 354:	f0 e0       	ldi	r31, 0x00	; 0
 356:	80 81       	ld	r24, Z
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	8c 93       	st	X, r24

	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
 35c:	aa e7       	ldi	r26, 0x7A	; 122
 35e:	b0 e0       	ldi	r27, 0x00	; 0
 360:	ea e7       	ldi	r30, 0x7A	; 122
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	84 60       	ori	r24, 0x04	; 4
 368:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS1);
 36a:	aa e7       	ldi	r26, 0x7A	; 122
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	ea e7       	ldi	r30, 0x7A	; 122
 370:	f0 e0       	ldi	r31, 0x00	; 0
 372:	80 81       	ld	r24, Z
 374:	82 60       	ori	r24, 0x02	; 2
 376:	8c 93       	st	X, r24
	sbi(ADCSRA, ADPS0);
 378:	aa e7       	ldi	r26, 0x7A	; 122
 37a:	b0 e0       	ldi	r27, 0x00	; 0
 37c:	ea e7       	ldi	r30, 0x7A	; 122
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	81 60       	ori	r24, 0x01	; 1
 384:	8c 93       	st	X, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
 386:	aa e7       	ldi	r26, 0x7A	; 122
 388:	b0 e0       	ldi	r27, 0x00	; 0
 38a:	ea e7       	ldi	r30, 0x7A	; 122
 38c:	f0 e0       	ldi	r31, 0x00	; 0
 38e:	80 81       	ld	r24, Z
 390:	80 68       	ori	r24, 0x80	; 128
 392:	8c 93       	st	X, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(__AVR_ATmega8__)
	UCSRB = 0;
#else
	UCSR0B = 0;
 394:	e1 ec       	ldi	r30, 0xC1	; 193
 396:	f0 e0       	ldi	r31, 0x00	; 0
 398:	10 82       	st	Z, r1
#endif
 39a:	cf 91       	pop	r28
 39c:	df 91       	pop	r29
 39e:	08 95       	ret

wiring_analog.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000005  00000000  00000000  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000299  2**0
                  ALLOC
  3 .stab         0000087c  00000000  00000000  0000029c  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000cb3  00000000  00000000  00000b18  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <analogReference>:
#include "pins_arduino.h"

uint8_t analog_reference = DEFAULT;

void analogReference(uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	0f 92       	push	r0
   6:	cd b7       	in	r28, 0x3d	; 61
   8:	de b7       	in	r29, 0x3e	; 62
   a:	89 83       	std	Y+1, r24	; 0x01
	// can't actually set the register here because the default setting
	// will connect AVCC and the AREF pin, which would cause a short if
	// there's something connected to AREF.
	analog_reference = mode;
   c:	89 81       	ldd	r24, Y+1	; 0x01
   e:	80 93 00 00 	sts	0x0000, r24
}
  12:	0f 90       	pop	r0
  14:	cf 91       	pop	r28
  16:	df 91       	pop	r29
  18:	08 95       	ret

0000001a <analogRead>:

int analogRead(uint8_t pin)
{
  1a:	df 93       	push	r29
  1c:	cf 93       	push	r28
  1e:	00 d0       	rcall	.+0      	; 0x20 <analogRead+0x6>
  20:	0f 92       	push	r0
  22:	cd b7       	in	r28, 0x3d	; 61
  24:	de b7       	in	r29, 0x3e	; 62
  26:	8b 83       	std	Y+3, r24	; 0x03

	// the MUX5 bit of ADCSRB selects whether we're reading from channels
	// 0 to 7 (MUX5 low) or 8 to 15 (MUX5 high).
	ADCSRB = (ADCSRB & ~(1 << MUX5)) | (((pin >> 3) & 0x01) << MUX5);
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	8e 30       	cpi	r24, 0x0E	; 14
  2c:	00 f0       	brcs	.+0      	; 0x2e <analogRead+0x14>
  2e:	8b 81       	ldd	r24, Y+3	; 0x03
  30:	8e 50       	subi	r24, 0x0E	; 14
  32:	8b 83       	std	Y+3, r24	; 0x03
#endif
  
	// set the analog reference (high two bits of ADMUX) and select the
	// channel (low 4 bits).  this also sets ADLAR (left-adjust result)
	// to 0 (the default).
	ADMUX = (analog_reference << 6) | (pin & 0x07);
  34:	ec e7       	ldi	r30, 0x7C	; 124
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	80 91 00 00 	lds	r24, 0x0000
  3c:	88 2f       	mov	r24, r24
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	00 24       	eor	r0, r0
  42:	96 95       	lsr	r25
  44:	87 95       	ror	r24
  46:	07 94       	ror	r0
  48:	96 95       	lsr	r25
  4a:	87 95       	ror	r24
  4c:	07 94       	ror	r0
  4e:	98 2f       	mov	r25, r24
  50:	80 2d       	mov	r24, r0
  52:	98 2f       	mov	r25, r24
  54:	8b 81       	ldd	r24, Y+3	; 0x03
  56:	87 70       	andi	r24, 0x07	; 7
  58:	89 2b       	or	r24, r25
  5a:	80 83       	st	Z, r24

	// without a delay, we seem to read from the wrong channel
	//delay(1);

	// start the conversion
	sbi(ADCSRA, ADSC);
  5c:	aa e7       	ldi	r26, 0x7A	; 122
  5e:	b0 e0       	ldi	r27, 0x00	; 0
  60:	ea e7       	ldi	r30, 0x7A	; 122
  62:	f0 e0       	ldi	r31, 0x00	; 0
  64:	80 81       	ld	r24, Z
  66:	80 64       	ori	r24, 0x40	; 64
  68:	8c 93       	st	X, r24

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
  6a:	ea e7       	ldi	r30, 0x7A	; 122
  6c:	f0 e0       	ldi	r31, 0x00	; 0
  6e:	80 81       	ld	r24, Z
  70:	88 2f       	mov	r24, r24
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	80 74       	andi	r24, 0x40	; 64
  76:	90 70       	andi	r25, 0x00	; 0
  78:	00 97       	sbiw	r24, 0x00	; 0
  7a:	01 f4       	brne	.+0      	; 0x7c <analogRead+0x62>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low = ADCL;
  7c:	e8 e7       	ldi	r30, 0x78	; 120
  7e:	f0 e0       	ldi	r31, 0x00	; 0
  80:	80 81       	ld	r24, Z
  82:	8a 83       	std	Y+2, r24	; 0x02
	high = ADCH;
  84:	e9 e7       	ldi	r30, 0x79	; 121
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	80 81       	ld	r24, Z
  8a:	89 83       	std	Y+1, r24	; 0x01

	// combine the two bytes
	return (high << 8) | low;
  8c:	89 81       	ldd	r24, Y+1	; 0x01
  8e:	88 2f       	mov	r24, r24
  90:	90 e0       	ldi	r25, 0x00	; 0
  92:	38 2f       	mov	r19, r24
  94:	22 27       	eor	r18, r18
  96:	8a 81       	ldd	r24, Y+2	; 0x02
  98:	88 2f       	mov	r24, r24
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	82 2b       	or	r24, r18
  9e:	93 2b       	or	r25, r19
}
  a0:	0f 90       	pop	r0
  a2:	0f 90       	pop	r0
  a4:	0f 90       	pop	r0
  a6:	cf 91       	pop	r28
  a8:	df 91       	pop	r29
  aa:	08 95       	ret

000000ac <analogWrite>:
// Right now, PWM output only works on the pins with
// hardware support.  These are defined in the appropriate
// pins_*.c file.  For the rest of the pins, we default
// to digital output.
void analogWrite(uint8_t pin, int val)
{
  ac:	df 93       	push	r29
  ae:	cf 93       	push	r28
  b0:	cd b7       	in	r28, 0x3d	; 61
  b2:	de b7       	in	r29, 0x3e	; 62
  b4:	65 97       	sbiw	r28, 0x15	; 21
  b6:	0f b6       	in	r0, 0x3f	; 63
  b8:	f8 94       	cli
  ba:	de bf       	out	0x3e, r29	; 62
  bc:	0f be       	out	0x3f, r0	; 63
  be:	cd bf       	out	0x3d, r28	; 61
  c0:	8b 8b       	std	Y+19, r24	; 0x13
  c2:	7d 8b       	std	Y+21, r23	; 0x15
  c4:	6c 8b       	std	Y+20, r22	; 0x14
	// We need to make sure the PWM output is enabled for those pins
	// that support it, as we turn it off when digitally reading or
	// writing with them.  Also, make sure the pin is in output mode
	// for consistenty with Wiring, which doesn't require a pinMode
	// call for the analog output pins.
	pinMode(pin, OUTPUT);
  c6:	8b 89       	ldd	r24, Y+19	; 0x13
  c8:	61 e0       	ldi	r22, 0x01	; 1
  ca:	0e 94 00 00 	call	0	; 0x0 <analogReference>
	
	if (digitalPinToTimer(pin) == TIMER1A) {
  ce:	8b 89       	ldd	r24, Y+19	; 0x13
  d0:	88 2f       	mov	r24, r24
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	80 50       	subi	r24, 0x00	; 0
  d6:	90 40       	sbci	r25, 0x00	; 0
  d8:	9a 8b       	std	Y+18, r25	; 0x12
  da:	89 8b       	std	Y+17, r24	; 0x11
  dc:	e9 89       	ldd	r30, Y+17	; 0x11
  de:	fa 89       	ldd	r31, Y+18	; 0x12
  e0:	84 91       	lpm	r24, Z+
  e2:	88 8b       	std	Y+16, r24	; 0x10
  e4:	88 89       	ldd	r24, Y+16	; 0x10
  e6:	83 30       	cpi	r24, 0x03	; 3
  e8:	01 f4       	brne	.+0      	; 0xea <analogWrite+0x3e>
		// connect pwm to pin on timer 1, channel A
		sbi(TCCR1A, COM1A1);
  ea:	a0 e8       	ldi	r26, 0x80	; 128
  ec:	b0 e0       	ldi	r27, 0x00	; 0
  ee:	e0 e8       	ldi	r30, 0x80	; 128
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	80 68       	ori	r24, 0x80	; 128
  f6:	8c 93       	st	X, r24
		// set pwm duty
		OCR1A = val;
  f8:	e8 e8       	ldi	r30, 0x88	; 136
  fa:	f0 e0       	ldi	r31, 0x00	; 0
  fc:	8c 89       	ldd	r24, Y+20	; 0x14
  fe:	9d 89       	ldd	r25, Y+21	; 0x15
 100:	91 83       	std	Z+1, r25	; 0x01
 102:	80 83       	st	Z, r24
 104:	00 c0       	rjmp	.+0      	; 0x106 <analogWrite+0x5a>
	} else if (digitalPinToTimer(pin) == TIMER1B) {
 106:	8b 89       	ldd	r24, Y+19	; 0x13
 108:	88 2f       	mov	r24, r24
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	80 50       	subi	r24, 0x00	; 0
 10e:	90 40       	sbci	r25, 0x00	; 0
 110:	9f 87       	std	Y+15, r25	; 0x0f
 112:	8e 87       	std	Y+14, r24	; 0x0e
 114:	ee 85       	ldd	r30, Y+14	; 0x0e
 116:	ff 85       	ldd	r31, Y+15	; 0x0f
 118:	84 91       	lpm	r24, Z+
 11a:	8d 87       	std	Y+13, r24	; 0x0d
 11c:	8d 85       	ldd	r24, Y+13	; 0x0d
 11e:	84 30       	cpi	r24, 0x04	; 4
 120:	01 f4       	brne	.+0      	; 0x122 <analogWrite+0x76>
		// connect pwm to pin on timer 1, channel B
		sbi(TCCR1A, COM1B1);
 122:	a0 e8       	ldi	r26, 0x80	; 128
 124:	b0 e0       	ldi	r27, 0x00	; 0
 126:	e0 e8       	ldi	r30, 0x80	; 128
 128:	f0 e0       	ldi	r31, 0x00	; 0
 12a:	80 81       	ld	r24, Z
 12c:	80 62       	ori	r24, 0x20	; 32
 12e:	8c 93       	st	X, r24
		// set pwm duty
		OCR1B = val;
 130:	ea e8       	ldi	r30, 0x8A	; 138
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	8c 89       	ldd	r24, Y+20	; 0x14
 136:	9d 89       	ldd	r25, Y+21	; 0x15
 138:	91 83       	std	Z+1, r25	; 0x01
 13a:	80 83       	st	Z, r24
 13c:	00 c0       	rjmp	.+0      	; 0x13e <analogWrite+0x92>
		// connect pwm to pin on timer 2, channel B
		sbi(TCCR2, COM21);
		// set pwm duty
		OCR2 = val;
#else
	} else if (digitalPinToTimer(pin) == TIMER0A) {
 13e:	8b 89       	ldd	r24, Y+19	; 0x13
 140:	88 2f       	mov	r24, r24
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	80 50       	subi	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	9c 87       	std	Y+12, r25	; 0x0c
 14a:	8b 87       	std	Y+11, r24	; 0x0b
 14c:	eb 85       	ldd	r30, Y+11	; 0x0b
 14e:	fc 85       	ldd	r31, Y+12	; 0x0c
 150:	84 91       	lpm	r24, Z+
 152:	8a 87       	std	Y+10, r24	; 0x0a
 154:	8a 85       	ldd	r24, Y+10	; 0x0a
 156:	81 30       	cpi	r24, 0x01	; 1
 158:	01 f4       	brne	.+0      	; 0x15a <analogWrite+0xae>
		if (val == 0) {
 15a:	8c 89       	ldd	r24, Y+20	; 0x14
 15c:	9d 89       	ldd	r25, Y+21	; 0x15
 15e:	00 97       	sbiw	r24, 0x00	; 0
 160:	01 f4       	brne	.+0      	; 0x162 <analogWrite+0xb6>
			digitalWrite(pin, LOW);
 162:	8b 89       	ldd	r24, Y+19	; 0x13
 164:	60 e0       	ldi	r22, 0x00	; 0
 166:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <analogWrite+0xc0>
		} else {
			// connect pwm to pin on timer 0, channel A
			sbi(TCCR0A, COM0A1);
 16c:	a4 e4       	ldi	r26, 0x44	; 68
 16e:	b0 e0       	ldi	r27, 0x00	; 0
 170:	e4 e4       	ldi	r30, 0x44	; 68
 172:	f0 e0       	ldi	r31, 0x00	; 0
 174:	80 81       	ld	r24, Z
 176:	80 68       	ori	r24, 0x80	; 128
 178:	8c 93       	st	X, r24
			// set pwm duty
			OCR0A = val;      
 17a:	e7 e4       	ldi	r30, 0x47	; 71
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	8c 89       	ldd	r24, Y+20	; 0x14
 180:	80 83       	st	Z, r24
 182:	00 c0       	rjmp	.+0      	; 0x184 <analogWrite+0xd8>
		}
	} else if (digitalPinToTimer(pin) == TIMER0B) {
 184:	8b 89       	ldd	r24, Y+19	; 0x13
 186:	88 2f       	mov	r24, r24
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	80 50       	subi	r24, 0x00	; 0
 18c:	90 40       	sbci	r25, 0x00	; 0
 18e:	99 87       	std	Y+9, r25	; 0x09
 190:	88 87       	std	Y+8, r24	; 0x08
 192:	e8 85       	ldd	r30, Y+8	; 0x08
 194:	f9 85       	ldd	r31, Y+9	; 0x09
 196:	84 91       	lpm	r24, Z+
 198:	8f 83       	std	Y+7, r24	; 0x07
 19a:	8f 81       	ldd	r24, Y+7	; 0x07
 19c:	82 30       	cpi	r24, 0x02	; 2
 19e:	01 f4       	brne	.+0      	; 0x1a0 <analogWrite+0xf4>
		if (val == 0) {
 1a0:	8c 89       	ldd	r24, Y+20	; 0x14
 1a2:	9d 89       	ldd	r25, Y+21	; 0x15
 1a4:	00 97       	sbiw	r24, 0x00	; 0
 1a6:	01 f4       	brne	.+0      	; 0x1a8 <analogWrite+0xfc>
			digitalWrite(pin, LOW);
 1a8:	8b 89       	ldd	r24, Y+19	; 0x13
 1aa:	60 e0       	ldi	r22, 0x00	; 0
 1ac:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 1b0:	00 c0       	rjmp	.+0      	; 0x1b2 <analogWrite+0x106>
		} else {
			// connect pwm to pin on timer 0, channel B
			sbi(TCCR0A, COM0B1);
 1b2:	a4 e4       	ldi	r26, 0x44	; 68
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e4 e4       	ldi	r30, 0x44	; 68
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	80 62       	ori	r24, 0x20	; 32
 1be:	8c 93       	st	X, r24
			// set pwm duty
			OCR0B = val;
 1c0:	e8 e4       	ldi	r30, 0x48	; 72
 1c2:	f0 e0       	ldi	r31, 0x00	; 0
 1c4:	8c 89       	ldd	r24, Y+20	; 0x14
 1c6:	80 83       	st	Z, r24
 1c8:	00 c0       	rjmp	.+0      	; 0x1ca <analogWrite+0x11e>
		}
	} else if (digitalPinToTimer(pin) == TIMER2A) {
 1ca:	8b 89       	ldd	r24, Y+19	; 0x13
 1cc:	88 2f       	mov	r24, r24
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	80 50       	subi	r24, 0x00	; 0
 1d2:	90 40       	sbci	r25, 0x00	; 0
 1d4:	9e 83       	std	Y+6, r25	; 0x06
 1d6:	8d 83       	std	Y+5, r24	; 0x05
 1d8:	ed 81       	ldd	r30, Y+5	; 0x05
 1da:	fe 81       	ldd	r31, Y+6	; 0x06
 1dc:	84 91       	lpm	r24, Z+
 1de:	8c 83       	std	Y+4, r24	; 0x04
 1e0:	8c 81       	ldd	r24, Y+4	; 0x04
 1e2:	86 30       	cpi	r24, 0x06	; 6
 1e4:	01 f4       	brne	.+0      	; 0x1e6 <analogWrite+0x13a>
		// connect pwm to pin on timer 2, channel A
		sbi(TCCR2A, COM2A1);
 1e6:	a0 eb       	ldi	r26, 0xB0	; 176
 1e8:	b0 e0       	ldi	r27, 0x00	; 0
 1ea:	e0 eb       	ldi	r30, 0xB0	; 176
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	80 68       	ori	r24, 0x80	; 128
 1f2:	8c 93       	st	X, r24
		// set pwm duty
		OCR2A = val;	
 1f4:	e3 eb       	ldi	r30, 0xB3	; 179
 1f6:	f0 e0       	ldi	r31, 0x00	; 0
 1f8:	8c 89       	ldd	r24, Y+20	; 0x14
 1fa:	80 83       	st	Z, r24
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <analogWrite+0x152>
	} else if (digitalPinToTimer(pin) == TIMER2B) {
 1fe:	8b 89       	ldd	r24, Y+19	; 0x13
 200:	88 2f       	mov	r24, r24
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	80 50       	subi	r24, 0x00	; 0
 206:	90 40       	sbci	r25, 0x00	; 0
 208:	9b 83       	std	Y+3, r25	; 0x03
 20a:	8a 83       	std	Y+2, r24	; 0x02
 20c:	ea 81       	ldd	r30, Y+2	; 0x02
 20e:	fb 81       	ldd	r31, Y+3	; 0x03
 210:	84 91       	lpm	r24, Z+
 212:	89 83       	std	Y+1, r24	; 0x01
 214:	89 81       	ldd	r24, Y+1	; 0x01
 216:	87 30       	cpi	r24, 0x07	; 7
 218:	01 f4       	brne	.+0      	; 0x21a <analogWrite+0x16e>
		// connect pwm to pin on timer 2, channel B
		sbi(TCCR2A, COM2B1);
 21a:	a0 eb       	ldi	r26, 0xB0	; 176
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e0 eb       	ldi	r30, 0xB0	; 176
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	80 81       	ld	r24, Z
 224:	80 62       	ori	r24, 0x20	; 32
 226:	8c 93       	st	X, r24
		// set pwm duty
		OCR2B = val;
 228:	e4 eb       	ldi	r30, 0xB4	; 180
 22a:	f0 e0       	ldi	r31, 0x00	; 0
 22c:	8c 89       	ldd	r24, Y+20	; 0x14
 22e:	80 83       	st	Z, r24
 230:	00 c0       	rjmp	.+0      	; 0x232 <analogWrite+0x186>
		// connect pwm to pin on timer 5, channel B
		sbi(TCCR5A, COM5B1);
		// set pwm duty
		OCR5B = val;
#endif
	} else if (val < 128)
 232:	8c 89       	ldd	r24, Y+20	; 0x14
 234:	9d 89       	ldd	r25, Y+21	; 0x15
 236:	80 38       	cpi	r24, 0x80	; 128
 238:	91 05       	cpc	r25, r1
 23a:	04 f4       	brge	.+0      	; 0x23c <analogWrite+0x190>
		digitalWrite(pin, LOW);
 23c:	8b 89       	ldd	r24, Y+19	; 0x13
 23e:	60 e0       	ldi	r22, 0x00	; 0
 240:	0e 94 00 00 	call	0	; 0x0 <analogReference>
 244:	00 c0       	rjmp	.+0      	; 0x246 <analogWrite+0x19a>
	else
		digitalWrite(pin, HIGH);
 246:	8b 89       	ldd	r24, Y+19	; 0x13
 248:	61 e0       	ldi	r22, 0x01	; 1
 24a:	0e 94 00 00 	call	0	; 0x0 <analogReference>
}
 24e:	65 96       	adiw	r28, 0x15	; 21
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

wiring_digital.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003ae  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000004  00000000  00000000  000003e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000003e6  2**0
                  ALLOC
  3 .stab         00000b28  00000000  00000000  000003e8  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000dcf  00000000  00000000  00000f10  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <pinMode>:

#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	62 97       	sbiw	r28, 0x12	; 18
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	89 8b       	std	Y+17, r24	; 0x11
  16:	6a 8b       	std	Y+18, r22	; 0x12
	uint8_t bit = digitalPinToBitMask(pin);
  18:	89 89       	ldd	r24, Y+17	; 0x11
  1a:	88 2f       	mov	r24, r24
  1c:	90 e0       	ldi	r25, 0x00	; 0
  1e:	80 50       	subi	r24, 0x00	; 0
  20:	90 40       	sbci	r25, 0x00	; 0
  22:	9c 87       	std	Y+12, r25	; 0x0c
  24:	8b 87       	std	Y+11, r24	; 0x0b
  26:	eb 85       	ldd	r30, Y+11	; 0x0b
  28:	fc 85       	ldd	r31, Y+12	; 0x0c
  2a:	84 91       	lpm	r24, Z+
  2c:	8a 87       	std	Y+10, r24	; 0x0a
  2e:	8a 85       	ldd	r24, Y+10	; 0x0a
  30:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t port = digitalPinToPort(pin);
  32:	89 89       	ldd	r24, Y+17	; 0x11
  34:	88 2f       	mov	r24, r24
  36:	90 e0       	ldi	r25, 0x00	; 0
  38:	80 50       	subi	r24, 0x00	; 0
  3a:	90 40       	sbci	r25, 0x00	; 0
  3c:	99 87       	std	Y+9, r25	; 0x09
  3e:	88 87       	std	Y+8, r24	; 0x08
  40:	e8 85       	ldd	r30, Y+8	; 0x08
  42:	f9 85       	ldd	r31, Y+9	; 0x09
  44:	84 91       	lpm	r24, Z+
  46:	8f 83       	std	Y+7, r24	; 0x07
  48:	8f 81       	ldd	r24, Y+7	; 0x07
  4a:	8f 87       	std	Y+15, r24	; 0x0f
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
  4c:	8f 85       	ldd	r24, Y+15	; 0x0f
  4e:	88 23       	and	r24, r24
  50:	01 f4       	brne	.+0      	; 0x52 <pinMode+0x52>
  52:	00 c0       	rjmp	.+0      	; 0x54 <pinMode+0x54>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
  54:	8f 85       	ldd	r24, Y+15	; 0x0f
  56:	88 2f       	mov	r24, r24
  58:	90 e0       	ldi	r25, 0x00	; 0
  5a:	88 0f       	add	r24, r24
  5c:	99 1f       	adc	r25, r25
  5e:	80 50       	subi	r24, 0x00	; 0
  60:	90 40       	sbci	r25, 0x00	; 0
  62:	9e 83       	std	Y+6, r25	; 0x06
  64:	8d 83       	std	Y+5, r24	; 0x05
  66:	8d 81       	ldd	r24, Y+5	; 0x05
  68:	9e 81       	ldd	r25, Y+6	; 0x06
  6a:	fc 01       	movw	r30, r24
  6c:	85 91       	lpm	r24, Z+
  6e:	94 91       	lpm	r25, Z+
  70:	9c 83       	std	Y+4, r25	; 0x04
  72:	8b 83       	std	Y+3, r24	; 0x03
  74:	fe 83       	std	Y+6, r31	; 0x06
  76:	ed 83       	std	Y+5, r30	; 0x05
  78:	8b 81       	ldd	r24, Y+3	; 0x03
  7a:	9c 81       	ldd	r25, Y+4	; 0x04
  7c:	9e 87       	std	Y+14, r25	; 0x0e
  7e:	8d 87       	std	Y+13, r24	; 0x0d

	if (mode == INPUT) { 
  80:	8a 89       	ldd	r24, Y+18	; 0x12
  82:	88 23       	and	r24, r24
  84:	01 f4       	brne	.+0      	; 0x86 <pinMode+0x86>
		uint8_t oldSREG = SREG;
  86:	ef e5       	ldi	r30, 0x5F	; 95
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	8a 83       	std	Y+2, r24	; 0x02
                cli();
  8e:	f8 94       	cli
		*reg &= ~bit;
  90:	ed 85       	ldd	r30, Y+13	; 0x0d
  92:	fe 85       	ldd	r31, Y+14	; 0x0e
  94:	80 81       	ld	r24, Z
  96:	98 2f       	mov	r25, r24
  98:	88 89       	ldd	r24, Y+16	; 0x10
  9a:	80 95       	com	r24
  9c:	89 23       	and	r24, r25
  9e:	ed 85       	ldd	r30, Y+13	; 0x0d
  a0:	fe 85       	ldd	r31, Y+14	; 0x0e
  a2:	80 83       	st	Z, r24
		SREG = oldSREG;
  a4:	ef e5       	ldi	r30, 0x5F	; 95
  a6:	f0 e0       	ldi	r31, 0x00	; 0
  a8:	8a 81       	ldd	r24, Y+2	; 0x02
  aa:	80 83       	st	Z, r24
  ac:	00 c0       	rjmp	.+0      	; 0xae <pinMode+0xae>
	} else {
		uint8_t oldSREG = SREG;
  ae:	ef e5       	ldi	r30, 0x5F	; 95
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	89 83       	std	Y+1, r24	; 0x01
                cli();
  b6:	f8 94       	cli
		*reg |= bit;
  b8:	ed 85       	ldd	r30, Y+13	; 0x0d
  ba:	fe 85       	ldd	r31, Y+14	; 0x0e
  bc:	90 81       	ld	r25, Z
  be:	88 89       	ldd	r24, Y+16	; 0x10
  c0:	89 2b       	or	r24, r25
  c2:	ed 85       	ldd	r30, Y+13	; 0x0d
  c4:	fe 85       	ldd	r31, Y+14	; 0x0e
  c6:	80 83       	st	Z, r24
		SREG = oldSREG;
  c8:	ef e5       	ldi	r30, 0x5F	; 95
  ca:	f0 e0       	ldi	r31, 0x00	; 0
  cc:	89 81       	ldd	r24, Y+1	; 0x01
  ce:	80 83       	st	Z, r24
	}
}
  d0:	62 96       	adiw	r28, 0x12	; 18
  d2:	0f b6       	in	r0, 0x3f	; 63
  d4:	f8 94       	cli
  d6:	de bf       	out	0x3e, r29	; 62
  d8:	0f be       	out	0x3f, r0	; 63
  da:	cd bf       	out	0x3d, r28	; 61
  dc:	cf 91       	pop	r28
  de:	df 91       	pop	r29
  e0:	08 95       	ret

000000e2 <digitalWrite>:
	if (timer == TIMER5C) cbi(TCCR5A, COM5C1);
#endif
}

void digitalWrite(uint8_t pin, uint8_t val)
{
  e2:	df 93       	push	r29
  e4:	cf 93       	push	r28
  e6:	cd b7       	in	r28, 0x3d	; 61
  e8:	de b7       	in	r29, 0x3e	; 62
  ea:	67 97       	sbiw	r28, 0x17	; 23
  ec:	0f b6       	in	r0, 0x3f	; 63
  ee:	f8 94       	cli
  f0:	de bf       	out	0x3e, r29	; 62
  f2:	0f be       	out	0x3f, r0	; 63
  f4:	cd bf       	out	0x3d, r28	; 61
  f6:	8e 8b       	std	Y+22, r24	; 0x16
  f8:	6f 8b       	std	Y+23, r22	; 0x17
	uint8_t timer = digitalPinToTimer(pin);
  fa:	8e 89       	ldd	r24, Y+22	; 0x16
  fc:	88 2f       	mov	r24, r24
  fe:	90 e0       	ldi	r25, 0x00	; 0
 100:	80 50       	subi	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	98 8b       	std	Y+16, r25	; 0x10
 106:	8f 87       	std	Y+15, r24	; 0x0f
 108:	ef 85       	ldd	r30, Y+15	; 0x0f
 10a:	f8 89       	ldd	r31, Y+16	; 0x10
 10c:	84 91       	lpm	r24, Z+
 10e:	8e 87       	std	Y+14, r24	; 0x0e
 110:	8e 85       	ldd	r24, Y+14	; 0x0e
 112:	8d 8b       	std	Y+21, r24	; 0x15
	uint8_t bit = digitalPinToBitMask(pin);
 114:	8e 89       	ldd	r24, Y+22	; 0x16
 116:	88 2f       	mov	r24, r24
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	80 50       	subi	r24, 0x00	; 0
 11c:	90 40       	sbci	r25, 0x00	; 0
 11e:	9d 87       	std	Y+13, r25	; 0x0d
 120:	8c 87       	std	Y+12, r24	; 0x0c
 122:	ec 85       	ldd	r30, Y+12	; 0x0c
 124:	fd 85       	ldd	r31, Y+13	; 0x0d
 126:	84 91       	lpm	r24, Z+
 128:	8b 87       	std	Y+11, r24	; 0x0b
 12a:	8b 85       	ldd	r24, Y+11	; 0x0b
 12c:	8c 8b       	std	Y+20, r24	; 0x14
	uint8_t port = digitalPinToPort(pin);
 12e:	8e 89       	ldd	r24, Y+22	; 0x16
 130:	88 2f       	mov	r24, r24
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	80 50       	subi	r24, 0x00	; 0
 136:	90 40       	sbci	r25, 0x00	; 0
 138:	9a 87       	std	Y+10, r25	; 0x0a
 13a:	89 87       	std	Y+9, r24	; 0x09
 13c:	e9 85       	ldd	r30, Y+9	; 0x09
 13e:	fa 85       	ldd	r31, Y+10	; 0x0a
 140:	84 91       	lpm	r24, Z+
 142:	88 87       	std	Y+8, r24	; 0x08
 144:	88 85       	ldd	r24, Y+8	; 0x08
 146:	8b 8b       	std	Y+19, r24	; 0x13
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
 148:	8b 89       	ldd	r24, Y+19	; 0x13
 14a:	88 23       	and	r24, r24
 14c:	01 f4       	brne	.+0      	; 0x14e <digitalWrite+0x6c>
 14e:	00 c0       	rjmp	.+0      	; 0x150 <digitalWrite+0x6e>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 150:	8d 89       	ldd	r24, Y+21	; 0x15
 152:	88 23       	and	r24, r24
 154:	01 f4       	brne	.+0      	; 0x156 <digitalWrite+0x74>
 156:	00 c0       	rjmp	.+0      	; 0x158 <digitalWrite+0x76>
 158:	8d 89       	ldd	r24, Y+21	; 0x15
 15a:	89 83       	std	Y+1, r24	; 0x01
// each digitalread or write.
//
static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
static inline void turnOffPWM(uint8_t timer)
{
	if (timer == TIMER1A) cbi(TCCR1A, COM1A1);
 15c:	89 81       	ldd	r24, Y+1	; 0x01
 15e:	83 30       	cpi	r24, 0x03	; 3
 160:	01 f4       	brne	.+0      	; 0x162 <digitalWrite+0x80>
 162:	a0 e8       	ldi	r26, 0x80	; 128
 164:	b0 e0       	ldi	r27, 0x00	; 0
 166:	e0 e8       	ldi	r30, 0x80	; 128
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8f 77       	andi	r24, 0x7F	; 127
 16e:	8c 93       	st	X, r24
	if (timer == TIMER1B) cbi(TCCR1A, COM1B1);
 170:	89 81       	ldd	r24, Y+1	; 0x01
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	01 f4       	brne	.+0      	; 0x176 <digitalWrite+0x94>
 176:	a0 e8       	ldi	r26, 0x80	; 128
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e0 e8       	ldi	r30, 0x80	; 128
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8f 7d       	andi	r24, 0xDF	; 223
 182:	8c 93       	st	X, r24

#if defined(__AVR_ATmega8__)
	if (timer == TIMER2) cbi(TCCR2, COM21);
#else
	if (timer == TIMER0A) cbi(TCCR0A, COM0A1);
 184:	89 81       	ldd	r24, Y+1	; 0x01
 186:	81 30       	cpi	r24, 0x01	; 1
 188:	01 f4       	brne	.+0      	; 0x18a <digitalWrite+0xa8>
 18a:	a4 e4       	ldi	r26, 0x44	; 68
 18c:	b0 e0       	ldi	r27, 0x00	; 0
 18e:	e4 e4       	ldi	r30, 0x44	; 68
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	8f 77       	andi	r24, 0x7F	; 127
 196:	8c 93       	st	X, r24
	if (timer == TIMER0B) cbi(TCCR0A, COM0B1);
 198:	89 81       	ldd	r24, Y+1	; 0x01
 19a:	82 30       	cpi	r24, 0x02	; 2
 19c:	01 f4       	brne	.+0      	; 0x19e <digitalWrite+0xbc>
 19e:	a4 e4       	ldi	r26, 0x44	; 68
 1a0:	b0 e0       	ldi	r27, 0x00	; 0
 1a2:	e4 e4       	ldi	r30, 0x44	; 68
 1a4:	f0 e0       	ldi	r31, 0x00	; 0
 1a6:	80 81       	ld	r24, Z
 1a8:	8f 7d       	andi	r24, 0xDF	; 223
 1aa:	8c 93       	st	X, r24
	if (timer == TIMER2A) cbi(TCCR2A, COM2A1);
 1ac:	89 81       	ldd	r24, Y+1	; 0x01
 1ae:	86 30       	cpi	r24, 0x06	; 6
 1b0:	01 f4       	brne	.+0      	; 0x1b2 <digitalWrite+0xd0>
 1b2:	a0 eb       	ldi	r26, 0xB0	; 176
 1b4:	b0 e0       	ldi	r27, 0x00	; 0
 1b6:	e0 eb       	ldi	r30, 0xB0	; 176
 1b8:	f0 e0       	ldi	r31, 0x00	; 0
 1ba:	80 81       	ld	r24, Z
 1bc:	8f 77       	andi	r24, 0x7F	; 127
 1be:	8c 93       	st	X, r24
	if (timer == TIMER2B) cbi(TCCR2A, COM2B1);
 1c0:	89 81       	ldd	r24, Y+1	; 0x01
 1c2:	87 30       	cpi	r24, 0x07	; 7
 1c4:	01 f4       	brne	.+0      	; 0x1c6 <digitalWrite+0xe4>
 1c6:	a0 eb       	ldi	r26, 0xB0	; 176
 1c8:	b0 e0       	ldi	r27, 0x00	; 0
 1ca:	e0 eb       	ldi	r30, 0xB0	; 176
 1cc:	f0 e0       	ldi	r31, 0x00	; 0
 1ce:	80 81       	ld	r24, Z
 1d0:	8f 7d       	andi	r24, 0xDF	; 223
 1d2:	8c 93       	st	X, r24

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	out = portOutputRegister(port);
 1d4:	8b 89       	ldd	r24, Y+19	; 0x13
 1d6:	88 2f       	mov	r24, r24
 1d8:	90 e0       	ldi	r25, 0x00	; 0
 1da:	88 0f       	add	r24, r24
 1dc:	99 1f       	adc	r25, r25
 1de:	80 50       	subi	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	9f 83       	std	Y+7, r25	; 0x07
 1e4:	8e 83       	std	Y+6, r24	; 0x06
 1e6:	8e 81       	ldd	r24, Y+6	; 0x06
 1e8:	9f 81       	ldd	r25, Y+7	; 0x07
 1ea:	fc 01       	movw	r30, r24
 1ec:	85 91       	lpm	r24, Z+
 1ee:	94 91       	lpm	r25, Z+
 1f0:	9d 83       	std	Y+5, r25	; 0x05
 1f2:	8c 83       	std	Y+4, r24	; 0x04
 1f4:	ff 83       	std	Y+7, r31	; 0x07
 1f6:	ee 83       	std	Y+6, r30	; 0x06
 1f8:	8c 81       	ldd	r24, Y+4	; 0x04
 1fa:	9d 81       	ldd	r25, Y+5	; 0x05
 1fc:	9a 8b       	std	Y+18, r25	; 0x12
 1fe:	89 8b       	std	Y+17, r24	; 0x11

	if (val == LOW) {
 200:	8f 89       	ldd	r24, Y+23	; 0x17
 202:	88 23       	and	r24, r24
 204:	01 f4       	brne	.+0      	; 0x206 <digitalWrite+0x124>
		uint8_t oldSREG = SREG;
 206:	ef e5       	ldi	r30, 0x5F	; 95
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	80 81       	ld	r24, Z
 20c:	8b 83       	std	Y+3, r24	; 0x03
                cli();
 20e:	f8 94       	cli
		*out &= ~bit;
 210:	e9 89       	ldd	r30, Y+17	; 0x11
 212:	fa 89       	ldd	r31, Y+18	; 0x12
 214:	80 81       	ld	r24, Z
 216:	98 2f       	mov	r25, r24
 218:	8c 89       	ldd	r24, Y+20	; 0x14
 21a:	80 95       	com	r24
 21c:	89 23       	and	r24, r25
 21e:	e9 89       	ldd	r30, Y+17	; 0x11
 220:	fa 89       	ldd	r31, Y+18	; 0x12
 222:	80 83       	st	Z, r24
		SREG = oldSREG;
 224:	ef e5       	ldi	r30, 0x5F	; 95
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	8b 81       	ldd	r24, Y+3	; 0x03
 22a:	80 83       	st	Z, r24
 22c:	00 c0       	rjmp	.+0      	; 0x22e <digitalWrite+0x14c>
	} else {
		uint8_t oldSREG = SREG;
 22e:	ef e5       	ldi	r30, 0x5F	; 95
 230:	f0 e0       	ldi	r31, 0x00	; 0
 232:	80 81       	ld	r24, Z
 234:	8a 83       	std	Y+2, r24	; 0x02
                cli();
 236:	f8 94       	cli
		*out |= bit;
 238:	e9 89       	ldd	r30, Y+17	; 0x11
 23a:	fa 89       	ldd	r31, Y+18	; 0x12
 23c:	90 81       	ld	r25, Z
 23e:	8c 89       	ldd	r24, Y+20	; 0x14
 240:	89 2b       	or	r24, r25
 242:	e9 89       	ldd	r30, Y+17	; 0x11
 244:	fa 89       	ldd	r31, Y+18	; 0x12
 246:	80 83       	st	Z, r24
		SREG = oldSREG;
 248:	ef e5       	ldi	r30, 0x5F	; 95
 24a:	f0 e0       	ldi	r31, 0x00	; 0
 24c:	8a 81       	ldd	r24, Y+2	; 0x02
 24e:	80 83       	st	Z, r24
	}
}
 250:	67 96       	adiw	r28, 0x17	; 23
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	f8 94       	cli
 256:	de bf       	out	0x3e, r29	; 62
 258:	0f be       	out	0x3f, r0	; 63
 25a:	cd bf       	out	0x3d, r28	; 61
 25c:	cf 91       	pop	r28
 25e:	df 91       	pop	r29
 260:	08 95       	ret

00000262 <digitalRead>:

int digitalRead(uint8_t pin)
{
 262:	df 93       	push	r29
 264:	cf 93       	push	r28
 266:	cd b7       	in	r28, 0x3d	; 61
 268:	de b7       	in	r29, 0x3e	; 62
 26a:	64 97       	sbiw	r28, 0x14	; 20
 26c:	0f b6       	in	r0, 0x3f	; 63
 26e:	f8 94       	cli
 270:	de bf       	out	0x3e, r29	; 62
 272:	0f be       	out	0x3f, r0	; 63
 274:	cd bf       	out	0x3d, r28	; 61
 276:	8a 8b       	std	Y+18, r24	; 0x12
	uint8_t timer = digitalPinToTimer(pin);
 278:	8a 89       	ldd	r24, Y+18	; 0x12
 27a:	88 2f       	mov	r24, r24
 27c:	90 e0       	ldi	r25, 0x00	; 0
 27e:	80 50       	subi	r24, 0x00	; 0
 280:	90 40       	sbci	r25, 0x00	; 0
 282:	9e 87       	std	Y+14, r25	; 0x0e
 284:	8d 87       	std	Y+13, r24	; 0x0d
 286:	ed 85       	ldd	r30, Y+13	; 0x0d
 288:	fe 85       	ldd	r31, Y+14	; 0x0e
 28a:	84 91       	lpm	r24, Z+
 28c:	8c 87       	std	Y+12, r24	; 0x0c
 28e:	8c 85       	ldd	r24, Y+12	; 0x0c
 290:	89 8b       	std	Y+17, r24	; 0x11
	uint8_t bit = digitalPinToBitMask(pin);
 292:	8a 89       	ldd	r24, Y+18	; 0x12
 294:	88 2f       	mov	r24, r24
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	80 50       	subi	r24, 0x00	; 0
 29a:	90 40       	sbci	r25, 0x00	; 0
 29c:	9b 87       	std	Y+11, r25	; 0x0b
 29e:	8a 87       	std	Y+10, r24	; 0x0a
 2a0:	ea 85       	ldd	r30, Y+10	; 0x0a
 2a2:	fb 85       	ldd	r31, Y+11	; 0x0b
 2a4:	84 91       	lpm	r24, Z+
 2a6:	89 87       	std	Y+9, r24	; 0x09
 2a8:	89 85       	ldd	r24, Y+9	; 0x09
 2aa:	88 8b       	std	Y+16, r24	; 0x10
	uint8_t port = digitalPinToPort(pin);
 2ac:	8a 89       	ldd	r24, Y+18	; 0x12
 2ae:	88 2f       	mov	r24, r24
 2b0:	90 e0       	ldi	r25, 0x00	; 0
 2b2:	80 50       	subi	r24, 0x00	; 0
 2b4:	90 40       	sbci	r25, 0x00	; 0
 2b6:	98 87       	std	Y+8, r25	; 0x08
 2b8:	8f 83       	std	Y+7, r24	; 0x07
 2ba:	ef 81       	ldd	r30, Y+7	; 0x07
 2bc:	f8 85       	ldd	r31, Y+8	; 0x08
 2be:	84 91       	lpm	r24, Z+
 2c0:	8e 83       	std	Y+6, r24	; 0x06
 2c2:	8e 81       	ldd	r24, Y+6	; 0x06
 2c4:	8f 87       	std	Y+15, r24	; 0x0f

	if (port == NOT_A_PIN) return LOW;
 2c6:	8f 85       	ldd	r24, Y+15	; 0x0f
 2c8:	88 23       	and	r24, r24
 2ca:	01 f4       	brne	.+0      	; 0x2cc <digitalRead+0x6a>
 2cc:	1c 8a       	std	Y+20, r1	; 0x14
 2ce:	1b 8a       	std	Y+19, r1	; 0x13
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <digitalRead+0x70>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 2d2:	89 89       	ldd	r24, Y+17	; 0x11
 2d4:	88 23       	and	r24, r24
 2d6:	01 f4       	brne	.+0      	; 0x2d8 <digitalRead+0x76>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <digitalRead+0x78>
 2da:	89 89       	ldd	r24, Y+17	; 0x11
 2dc:	89 83       	std	Y+1, r24	; 0x01
// each digitalread or write.
//
static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
static inline void turnOffPWM(uint8_t timer)
{
	if (timer == TIMER1A) cbi(TCCR1A, COM1A1);
 2de:	89 81       	ldd	r24, Y+1	; 0x01
 2e0:	83 30       	cpi	r24, 0x03	; 3
 2e2:	01 f4       	brne	.+0      	; 0x2e4 <digitalRead+0x82>
 2e4:	a0 e8       	ldi	r26, 0x80	; 128
 2e6:	b0 e0       	ldi	r27, 0x00	; 0
 2e8:	e0 e8       	ldi	r30, 0x80	; 128
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	80 81       	ld	r24, Z
 2ee:	8f 77       	andi	r24, 0x7F	; 127
 2f0:	8c 93       	st	X, r24
	if (timer == TIMER1B) cbi(TCCR1A, COM1B1);
 2f2:	89 81       	ldd	r24, Y+1	; 0x01
 2f4:	84 30       	cpi	r24, 0x04	; 4
 2f6:	01 f4       	brne	.+0      	; 0x2f8 <digitalRead+0x96>
 2f8:	a0 e8       	ldi	r26, 0x80	; 128
 2fa:	b0 e0       	ldi	r27, 0x00	; 0
 2fc:	e0 e8       	ldi	r30, 0x80	; 128
 2fe:	f0 e0       	ldi	r31, 0x00	; 0
 300:	80 81       	ld	r24, Z
 302:	8f 7d       	andi	r24, 0xDF	; 223
 304:	8c 93       	st	X, r24

#if defined(__AVR_ATmega8__)
	if (timer == TIMER2) cbi(TCCR2, COM21);
#else
	if (timer == TIMER0A) cbi(TCCR0A, COM0A1);
 306:	89 81       	ldd	r24, Y+1	; 0x01
 308:	81 30       	cpi	r24, 0x01	; 1
 30a:	01 f4       	brne	.+0      	; 0x30c <digitalRead+0xaa>
 30c:	a4 e4       	ldi	r26, 0x44	; 68
 30e:	b0 e0       	ldi	r27, 0x00	; 0
 310:	e4 e4       	ldi	r30, 0x44	; 68
 312:	f0 e0       	ldi	r31, 0x00	; 0
 314:	80 81       	ld	r24, Z
 316:	8f 77       	andi	r24, 0x7F	; 127
 318:	8c 93       	st	X, r24
	if (timer == TIMER0B) cbi(TCCR0A, COM0B1);
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	82 30       	cpi	r24, 0x02	; 2
 31e:	01 f4       	brne	.+0      	; 0x320 <digitalRead+0xbe>
 320:	a4 e4       	ldi	r26, 0x44	; 68
 322:	b0 e0       	ldi	r27, 0x00	; 0
 324:	e4 e4       	ldi	r30, 0x44	; 68
 326:	f0 e0       	ldi	r31, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	8f 7d       	andi	r24, 0xDF	; 223
 32c:	8c 93       	st	X, r24
	if (timer == TIMER2A) cbi(TCCR2A, COM2A1);
 32e:	89 81       	ldd	r24, Y+1	; 0x01
 330:	86 30       	cpi	r24, 0x06	; 6
 332:	01 f4       	brne	.+0      	; 0x334 <digitalRead+0xd2>
 334:	a0 eb       	ldi	r26, 0xB0	; 176
 336:	b0 e0       	ldi	r27, 0x00	; 0
 338:	e0 eb       	ldi	r30, 0xB0	; 176
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	8f 77       	andi	r24, 0x7F	; 127
 340:	8c 93       	st	X, r24
	if (timer == TIMER2B) cbi(TCCR2A, COM2B1);
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	87 30       	cpi	r24, 0x07	; 7
 346:	01 f4       	brne	.+0      	; 0x348 <digitalRead+0xe6>
 348:	a0 eb       	ldi	r26, 0xB0	; 176
 34a:	b0 e0       	ldi	r27, 0x00	; 0
 34c:	e0 eb       	ldi	r30, 0xB0	; 176
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	80 81       	ld	r24, Z
 352:	8f 7d       	andi	r24, 0xDF	; 223
 354:	8c 93       	st	X, r24

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
 356:	8f 85       	ldd	r24, Y+15	; 0x0f
 358:	88 2f       	mov	r24, r24
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	88 0f       	add	r24, r24
 35e:	99 1f       	adc	r25, r25
 360:	80 50       	subi	r24, 0x00	; 0
 362:	90 40       	sbci	r25, 0x00	; 0
 364:	9d 83       	std	Y+5, r25	; 0x05
 366:	8c 83       	std	Y+4, r24	; 0x04
 368:	8c 81       	ldd	r24, Y+4	; 0x04
 36a:	9d 81       	ldd	r25, Y+5	; 0x05
 36c:	fc 01       	movw	r30, r24
 36e:	85 91       	lpm	r24, Z+
 370:	94 91       	lpm	r25, Z+
 372:	9b 83       	std	Y+3, r25	; 0x03
 374:	8a 83       	std	Y+2, r24	; 0x02
 376:	fd 83       	std	Y+5, r31	; 0x05
 378:	ec 83       	std	Y+4, r30	; 0x04
 37a:	8a 81       	ldd	r24, Y+2	; 0x02
 37c:	9b 81       	ldd	r25, Y+3	; 0x03
 37e:	fc 01       	movw	r30, r24
 380:	90 81       	ld	r25, Z
 382:	88 89       	ldd	r24, Y+16	; 0x10
 384:	89 23       	and	r24, r25
 386:	88 23       	and	r24, r24
 388:	01 f0       	breq	.+0      	; 0x38a <digitalRead+0x128>
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	90 e0       	ldi	r25, 0x00	; 0
 38e:	9c 8b       	std	Y+20, r25	; 0x14
 390:	8b 8b       	std	Y+19, r24	; 0x13
 392:	00 c0       	rjmp	.+0      	; 0x394 <digitalRead+0x132>
	return LOW;
 394:	1c 8a       	std	Y+20, r1	; 0x14
 396:	1b 8a       	std	Y+19, r1	; 0x13
 398:	8b 89       	ldd	r24, Y+19	; 0x13
 39a:	9c 89       	ldd	r25, Y+20	; 0x14
}
 39c:	64 96       	adiw	r28, 0x14	; 20
 39e:	0f b6       	in	r0, 0x3f	; 63
 3a0:	f8 94       	cli
 3a2:	de bf       	out	0x3e, r29	; 62
 3a4:	0f be       	out	0x3f, r0	; 63
 3a6:	cd bf       	out	0x3d, r28	; 61
 3a8:	cf 91       	pop	r28
 3aa:	df 91       	pop	r29
 3ac:	08 95       	ret

wiring_pulse.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000004  00000000  00000000  00000294  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000298  2**0
                  ALLOC
  3 .stab         00000738  00000000  00000000  00000298  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000c80  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <pulseIn>:
/* Measures the length (in microseconds) of a pulse on the pin; state is HIGH
 * or LOW, the type of pulse to measure.  Works on pulses from 2-3 microseconds
 * to 3 minutes in length, but must be called at least a few dozen microseconds
 * before the start of the pulse. */
unsigned long pulseIn(uint8_t pin, uint8_t state, unsigned long timeout)
{
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	cd b7       	in	r28, 0x3d	; 61
   6:	de b7       	in	r29, 0x3e	; 62
   8:	ae 97       	sbiw	r28, 0x2e	; 46
   a:	0f b6       	in	r0, 0x3f	; 63
   c:	f8 94       	cli
   e:	de bf       	out	0x3e, r29	; 62
  10:	0f be       	out	0x3f, r0	; 63
  12:	cd bf       	out	0x3d, r28	; 61
  14:	8a a3       	std	Y+34, r24	; 0x22
  16:	6b a3       	std	Y+35, r22	; 0x23
  18:	2c a3       	std	Y+36, r18	; 0x24
  1a:	3d a3       	std	Y+37, r19	; 0x25
  1c:	4e a3       	std	Y+38, r20	; 0x26
  1e:	5f a3       	std	Y+39, r21	; 0x27
	// cache the port and bit of the pin in order to speed up the
	// pulse width measuring loop and achieve finer resolution.  calling
	// digitalRead() instead yields much coarser resolution.
	uint8_t bit = digitalPinToBitMask(pin);
  20:	8a a1       	ldd	r24, Y+34	; 0x22
  22:	88 2f       	mov	r24, r24
  24:	90 e0       	ldi	r25, 0x00	; 0
  26:	80 50       	subi	r24, 0x00	; 0
  28:	90 40       	sbci	r25, 0x00	; 0
  2a:	9a 8b       	std	Y+18, r25	; 0x12
  2c:	89 8b       	std	Y+17, r24	; 0x11
  2e:	e9 89       	ldd	r30, Y+17	; 0x11
  30:	fa 89       	ldd	r31, Y+18	; 0x12
  32:	84 91       	lpm	r24, Z+
  34:	88 8b       	std	Y+16, r24	; 0x10
  36:	88 89       	ldd	r24, Y+16	; 0x10
  38:	89 a3       	std	Y+33, r24	; 0x21
	uint8_t port = digitalPinToPort(pin);
  3a:	8a a1       	ldd	r24, Y+34	; 0x22
  3c:	88 2f       	mov	r24, r24
  3e:	90 e0       	ldi	r25, 0x00	; 0
  40:	80 50       	subi	r24, 0x00	; 0
  42:	90 40       	sbci	r25, 0x00	; 0
  44:	9f 87       	std	Y+15, r25	; 0x0f
  46:	8e 87       	std	Y+14, r24	; 0x0e
  48:	ee 85       	ldd	r30, Y+14	; 0x0e
  4a:	ff 85       	ldd	r31, Y+15	; 0x0f
  4c:	84 91       	lpm	r24, Z+
  4e:	8d 87       	std	Y+13, r24	; 0x0d
  50:	8d 85       	ldd	r24, Y+13	; 0x0d
  52:	88 a3       	std	Y+32, r24	; 0x20
	uint8_t stateMask = (state ? bit : 0);
  54:	8b a1       	ldd	r24, Y+35	; 0x23
  56:	88 23       	and	r24, r24
  58:	01 f0       	breq	.+0      	; 0x5a <pulseIn+0x5a>
  5a:	29 a1       	ldd	r18, Y+33	; 0x21
  5c:	2e a7       	std	Y+46, r18	; 0x2e
  5e:	00 c0       	rjmp	.+0      	; 0x60 <pulseIn+0x60>
  60:	1e a6       	std	Y+46, r1	; 0x2e
  62:	3e a5       	ldd	r19, Y+46	; 0x2e
  64:	3f 8f       	std	Y+31, r19	; 0x1f
	unsigned long width = 0; // keep initialization out of time critical area
  66:	1b 8e       	std	Y+27, r1	; 0x1b
  68:	1c 8e       	std	Y+28, r1	; 0x1c
  6a:	1d 8e       	std	Y+29, r1	; 0x1d
  6c:	1e 8e       	std	Y+30, r1	; 0x1e
	
	// convert the timeout from microseconds to a number of times through
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
  6e:	1f 8a       	std	Y+23, r1	; 0x17
  70:	18 8e       	std	Y+24, r1	; 0x18
  72:	19 8e       	std	Y+25, r1	; 0x19
  74:	1a 8e       	std	Y+26, r1	; 0x1a
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
  76:	8c a1       	ldd	r24, Y+36	; 0x24
  78:	9d a1       	ldd	r25, Y+37	; 0x25
  7a:	ae a1       	ldd	r26, Y+38	; 0x26
  7c:	bf a1       	ldd	r27, Y+39	; 0x27
  7e:	88 0f       	add	r24, r24
  80:	99 1f       	adc	r25, r25
  82:	aa 1f       	adc	r26, r26
  84:	bb 1f       	adc	r27, r27
  86:	88 0f       	add	r24, r24
  88:	99 1f       	adc	r25, r25
  8a:	aa 1f       	adc	r26, r26
  8c:	bb 1f       	adc	r27, r27
  8e:	88 0f       	add	r24, r24
  90:	99 1f       	adc	r25, r25
  92:	aa 1f       	adc	r26, r26
  94:	bb 1f       	adc	r27, r27
  96:	88 0f       	add	r24, r24
  98:	99 1f       	adc	r25, r25
  9a:	aa 1f       	adc	r26, r26
  9c:	bb 1f       	adc	r27, r27
  9e:	68 94       	set
  a0:	13 f8       	bld	r1, 3
  a2:	b6 95       	lsr	r27
  a4:	a7 95       	ror	r26
  a6:	97 95       	ror	r25
  a8:	87 95       	ror	r24
  aa:	16 94       	lsr	r1
  ac:	01 f4       	brne	.+0      	; 0xae <pulseIn+0xae>
  ae:	8b 8b       	std	Y+19, r24	; 0x13
  b0:	9c 8b       	std	Y+20, r25	; 0x14
  b2:	ad 8b       	std	Y+21, r26	; 0x15
  b4:	be 8b       	std	Y+22, r27	; 0x16
  b6:	00 c0       	rjmp	.+0      	; 0xb8 <pulseIn+0xb8>
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
  b8:	1d a6       	std	Y+45, r1	; 0x2d
  ba:	2f 89       	ldd	r18, Y+23	; 0x17
  bc:	38 8d       	ldd	r19, Y+24	; 0x18
  be:	49 8d       	ldd	r20, Y+25	; 0x19
  c0:	5a 8d       	ldd	r21, Y+26	; 0x1a
  c2:	8b 89       	ldd	r24, Y+19	; 0x13
  c4:	9c 89       	ldd	r25, Y+20	; 0x14
  c6:	ad 89       	ldd	r26, Y+21	; 0x15
  c8:	be 89       	ldd	r27, Y+22	; 0x16
  ca:	28 17       	cp	r18, r24
  cc:	39 07       	cpc	r19, r25
  ce:	4a 07       	cpc	r20, r26
  d0:	5b 07       	cpc	r21, r27
  d2:	01 f4       	brne	.+0      	; 0xd4 <pulseIn+0xd4>
  d4:	41 e0       	ldi	r20, 0x01	; 1
  d6:	4d a7       	std	Y+45, r20	; 0x2d
  d8:	8f 89       	ldd	r24, Y+23	; 0x17
  da:	98 8d       	ldd	r25, Y+24	; 0x18
  dc:	a9 8d       	ldd	r26, Y+25	; 0x19
  de:	ba 8d       	ldd	r27, Y+26	; 0x1a
  e0:	01 96       	adiw	r24, 0x01	; 1
  e2:	a1 1d       	adc	r26, r1
  e4:	b1 1d       	adc	r27, r1
  e6:	8f 8b       	std	Y+23, r24	; 0x17
  e8:	98 8f       	std	Y+24, r25	; 0x18
  ea:	a9 8f       	std	Y+25, r26	; 0x19
  ec:	ba 8f       	std	Y+26, r27	; 0x1a
  ee:	5d a5       	ldd	r21, Y+45	; 0x2d
  f0:	55 23       	and	r21, r21
  f2:	01 f0       	breq	.+0      	; 0xf4 <pulseIn+0xf4>
			return 0;
  f4:	19 a6       	std	Y+41, r1	; 0x29
  f6:	1a a6       	std	Y+42, r1	; 0x2a
  f8:	1b a6       	std	Y+43, r1	; 0x2b
  fa:	1c a6       	std	Y+44, r1	; 0x2c
  fc:	00 c0       	rjmp	.+0      	; 0xfe <pulseIn+0xfe>
	// the initial loop; it takes 16 clock cycles per iteration.
	unsigned long numloops = 0;
	unsigned long maxloops = microsecondsToClockCycles(timeout) / 16;
	
	// wait for any previous pulse to end
	while ((*portInputRegister(port) & bit) == stateMask)
  fe:	88 a1       	ldd	r24, Y+32	; 0x20
 100:	88 2f       	mov	r24, r24
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	88 0f       	add	r24, r24
 106:	99 1f       	adc	r25, r25
 108:	80 50       	subi	r24, 0x00	; 0
 10a:	90 40       	sbci	r25, 0x00	; 0
 10c:	9c 87       	std	Y+12, r25	; 0x0c
 10e:	8b 87       	std	Y+11, r24	; 0x0b
 110:	8b 85       	ldd	r24, Y+11	; 0x0b
 112:	9c 85       	ldd	r25, Y+12	; 0x0c
 114:	fc 01       	movw	r30, r24
 116:	85 91       	lpm	r24, Z+
 118:	94 91       	lpm	r25, Z+
 11a:	9a 87       	std	Y+10, r25	; 0x0a
 11c:	89 87       	std	Y+9, r24	; 0x09
 11e:	fc 87       	std	Y+12, r31	; 0x0c
 120:	eb 87       	std	Y+11, r30	; 0x0b
 122:	89 85       	ldd	r24, Y+9	; 0x09
 124:	9a 85       	ldd	r25, Y+10	; 0x0a
 126:	fc 01       	movw	r30, r24
 128:	90 81       	ld	r25, Z
 12a:	89 a1       	ldd	r24, Y+33	; 0x21
 12c:	98 23       	and	r25, r24
 12e:	8f 8d       	ldd	r24, Y+31	; 0x1f
 130:	98 17       	cp	r25, r24
 132:	01 f4       	brne	.+0      	; 0x134 <pulseIn+0x134>
 134:	00 c0       	rjmp	.+0      	; 0x136 <pulseIn+0x136>
 136:	00 c0       	rjmp	.+0      	; 0x138 <pulseIn+0x138>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
 138:	18 a6       	std	Y+40, r1	; 0x28
 13a:	2f 89       	ldd	r18, Y+23	; 0x17
 13c:	38 8d       	ldd	r19, Y+24	; 0x18
 13e:	49 8d       	ldd	r20, Y+25	; 0x19
 140:	5a 8d       	ldd	r21, Y+26	; 0x1a
 142:	8b 89       	ldd	r24, Y+19	; 0x13
 144:	9c 89       	ldd	r25, Y+20	; 0x14
 146:	ad 89       	ldd	r26, Y+21	; 0x15
 148:	be 89       	ldd	r27, Y+22	; 0x16
 14a:	28 17       	cp	r18, r24
 14c:	39 07       	cpc	r19, r25
 14e:	4a 07       	cpc	r20, r26
 150:	5b 07       	cpc	r21, r27
 152:	01 f4       	brne	.+0      	; 0x154 <pulseIn+0x154>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	88 a7       	std	Y+40, r24	; 0x28
 158:	8f 89       	ldd	r24, Y+23	; 0x17
 15a:	98 8d       	ldd	r25, Y+24	; 0x18
 15c:	a9 8d       	ldd	r26, Y+25	; 0x19
 15e:	ba 8d       	ldd	r27, Y+26	; 0x1a
 160:	01 96       	adiw	r24, 0x01	; 1
 162:	a1 1d       	adc	r26, r1
 164:	b1 1d       	adc	r27, r1
 166:	8f 8b       	std	Y+23, r24	; 0x17
 168:	98 8f       	std	Y+24, r25	; 0x18
 16a:	a9 8f       	std	Y+25, r26	; 0x19
 16c:	ba 8f       	std	Y+26, r27	; 0x1a
 16e:	28 a5       	ldd	r18, Y+40	; 0x28
 170:	22 23       	and	r18, r18
 172:	01 f0       	breq	.+0      	; 0x174 <pulseIn+0x174>
			return 0;
 174:	19 a6       	std	Y+41, r1	; 0x29
 176:	1a a6       	std	Y+42, r1	; 0x2a
 178:	1b a6       	std	Y+43, r1	; 0x2b
 17a:	1c a6       	std	Y+44, r1	; 0x2c
 17c:	00 c0       	rjmp	.+0      	; 0x17e <pulseIn+0x17e>
	while ((*portInputRegister(port) & bit) == stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to start
	while ((*portInputRegister(port) & bit) != stateMask)
 17e:	88 a1       	ldd	r24, Y+32	; 0x20
 180:	88 2f       	mov	r24, r24
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	88 0f       	add	r24, r24
 186:	99 1f       	adc	r25, r25
 188:	80 50       	subi	r24, 0x00	; 0
 18a:	90 40       	sbci	r25, 0x00	; 0
 18c:	98 87       	std	Y+8, r25	; 0x08
 18e:	8f 83       	std	Y+7, r24	; 0x07
 190:	8f 81       	ldd	r24, Y+7	; 0x07
 192:	98 85       	ldd	r25, Y+8	; 0x08
 194:	fc 01       	movw	r30, r24
 196:	85 91       	lpm	r24, Z+
 198:	94 91       	lpm	r25, Z+
 19a:	9e 83       	std	Y+6, r25	; 0x06
 19c:	8d 83       	std	Y+5, r24	; 0x05
 19e:	f8 87       	std	Y+8, r31	; 0x08
 1a0:	ef 83       	std	Y+7, r30	; 0x07
 1a2:	8d 81       	ldd	r24, Y+5	; 0x05
 1a4:	9e 81       	ldd	r25, Y+6	; 0x06
 1a6:	fc 01       	movw	r30, r24
 1a8:	90 81       	ld	r25, Z
 1aa:	89 a1       	ldd	r24, Y+33	; 0x21
 1ac:	98 23       	and	r25, r24
 1ae:	8f 8d       	ldd	r24, Y+31	; 0x1f
 1b0:	98 17       	cp	r25, r24
 1b2:	01 f0       	breq	.+0      	; 0x1b4 <pulseIn+0x1b4>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <pulseIn+0x1b6>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <pulseIn+0x1b8>
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask)
		width++;
 1b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
 1ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
 1bc:	ad 8d       	ldd	r26, Y+29	; 0x1d
 1be:	be 8d       	ldd	r27, Y+30	; 0x1e
 1c0:	01 96       	adiw	r24, 0x01	; 1
 1c2:	a1 1d       	adc	r26, r1
 1c4:	b1 1d       	adc	r27, r1
 1c6:	8b 8f       	std	Y+27, r24	; 0x1b
 1c8:	9c 8f       	std	Y+28, r25	; 0x1c
 1ca:	ad 8f       	std	Y+29, r26	; 0x1d
 1cc:	be 8f       	std	Y+30, r27	; 0x1e
	while ((*portInputRegister(port) & bit) != stateMask)
		if (numloops++ == maxloops)
			return 0;
	
	// wait for the pulse to stop
	while ((*portInputRegister(port) & bit) == stateMask)
 1ce:	88 a1       	ldd	r24, Y+32	; 0x20
 1d0:	88 2f       	mov	r24, r24
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	80 50       	subi	r24, 0x00	; 0
 1da:	90 40       	sbci	r25, 0x00	; 0
 1dc:	9c 83       	std	Y+4, r25	; 0x04
 1de:	8b 83       	std	Y+3, r24	; 0x03
 1e0:	8b 81       	ldd	r24, Y+3	; 0x03
 1e2:	9c 81       	ldd	r25, Y+4	; 0x04
 1e4:	fc 01       	movw	r30, r24
 1e6:	85 91       	lpm	r24, Z+
 1e8:	94 91       	lpm	r25, Z+
 1ea:	9a 83       	std	Y+2, r25	; 0x02
 1ec:	89 83       	std	Y+1, r24	; 0x01
 1ee:	fc 83       	std	Y+4, r31	; 0x04
 1f0:	eb 83       	std	Y+3, r30	; 0x03
 1f2:	89 81       	ldd	r24, Y+1	; 0x01
 1f4:	9a 81       	ldd	r25, Y+2	; 0x02
 1f6:	fc 01       	movw	r30, r24
 1f8:	90 81       	ld	r25, Z
 1fa:	89 a1       	ldd	r24, Y+33	; 0x21
 1fc:	98 23       	and	r25, r24
 1fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
 200:	98 17       	cp	r25, r24
 202:	01 f0       	breq	.+0      	; 0x204 <pulseIn+0x204>

	// convert the reading to microseconds. The loop has been determined
	// to be 10 clock cycles long and have about 16 clocks between the edge
	// and the start of the loop. There will be some error introduced by
	// the interrupt handlers.
	return clockCyclesToMicroseconds(width * 10 + 16); 
 204:	8b 8d       	ldd	r24, Y+27	; 0x1b
 206:	9c 8d       	ldd	r25, Y+28	; 0x1c
 208:	ad 8d       	ldd	r26, Y+29	; 0x1d
 20a:	be 8d       	ldd	r27, Y+30	; 0x1e
 20c:	2a e0       	ldi	r18, 0x0A	; 10
 20e:	30 e0       	ldi	r19, 0x00	; 0
 210:	40 e0       	ldi	r20, 0x00	; 0
 212:	50 e0       	ldi	r21, 0x00	; 0
 214:	bc 01       	movw	r22, r24
 216:	cd 01       	movw	r24, r26
 218:	0e 94 00 00 	call	0	; 0x0 <pulseIn>
 21c:	dc 01       	movw	r26, r24
 21e:	cb 01       	movw	r24, r22
 220:	40 96       	adiw	r24, 0x10	; 16
 222:	a1 1d       	adc	r26, r1
 224:	b1 1d       	adc	r27, r1
 226:	9c 01       	movw	r18, r24
 228:	ad 01       	movw	r20, r26
 22a:	68 94       	set
 22c:	13 f8       	bld	r1, 3
 22e:	56 95       	lsr	r21
 230:	47 95       	ror	r20
 232:	37 95       	ror	r19
 234:	27 95       	ror	r18
 236:	16 94       	lsr	r1
 238:	01 f4       	brne	.+0      	; 0x23a <pulseIn+0x23a>
 23a:	29 a7       	std	Y+41, r18	; 0x29
 23c:	3a a7       	std	Y+42, r19	; 0x2a
 23e:	4b a7       	std	Y+43, r20	; 0x2b
 240:	5c a7       	std	Y+44, r21	; 0x2c
 242:	89 a5       	ldd	r24, Y+41	; 0x29
 244:	9a a5       	ldd	r25, Y+42	; 0x2a
 246:	ab a5       	ldd	r26, Y+43	; 0x2b
 248:	bc a5       	ldd	r27, Y+44	; 0x2c
}
 24a:	bc 01       	movw	r22, r24
 24c:	cd 01       	movw	r24, r26
 24e:	ae 96       	adiw	r28, 0x2e	; 46
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
 25a:	cf 91       	pop	r28
 25c:	df 91       	pop	r29
 25e:	08 95       	ret

wiring_shift.o:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000142  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000176  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000176  2**0
                  ALLOC
  3 .stab         000005b8  00000000  00000000  00000178  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .stabstr      00000a68  00000000  00000000  00000730  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <shiftIn>:
  $Id: wiring.c 248 2007-02-03 15:36:30Z mellis $
*/

#include "wiring_private.h"

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
   0:	df 93       	push	r29
   2:	cf 93       	push	r28
   4:	00 d0       	rcall	.+0      	; 0x6 <shiftIn+0x6>
   6:	00 d0       	rcall	.+0      	; 0x8 <shiftIn+0x8>
   8:	0f 92       	push	r0
   a:	cd b7       	in	r28, 0x3d	; 61
   c:	de b7       	in	r29, 0x3e	; 62
   e:	8b 83       	std	Y+3, r24	; 0x03
  10:	6c 83       	std	Y+4, r22	; 0x04
  12:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t value = 0;
  14:	1a 82       	std	Y+2, r1	; 0x02
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  16:	19 82       	std	Y+1, r1	; 0x01
  18:	00 c0       	rjmp	.+0      	; 0x1a <shiftIn+0x1a>
		digitalWrite(clockPin, HIGH);
  1a:	8c 81       	ldd	r24, Y+4	; 0x04
  1c:	61 e0       	ldi	r22, 0x01	; 1
  1e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		if (bitOrder == LSBFIRST)
  22:	8d 81       	ldd	r24, Y+5	; 0x05
  24:	88 23       	and	r24, r24
  26:	01 f4       	brne	.+0      	; 0x28 <shiftIn+0x28>
			value |= digitalRead(dataPin) << i;
  28:	8b 81       	ldd	r24, Y+3	; 0x03
  2a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  2e:	9c 01       	movw	r18, r24
  30:	89 81       	ldd	r24, Y+1	; 0x01
  32:	88 2f       	mov	r24, r24
  34:	90 e0       	ldi	r25, 0x00	; 0
  36:	a9 01       	movw	r20, r18
  38:	00 c0       	rjmp	.+0      	; 0x3a <shiftIn+0x3a>
  3a:	44 0f       	add	r20, r20
  3c:	55 1f       	adc	r21, r21
  3e:	8a 95       	dec	r24
  40:	02 f4       	brpl	.+0      	; 0x42 <shiftIn+0x42>
  42:	ca 01       	movw	r24, r20
  44:	98 2f       	mov	r25, r24
  46:	8a 81       	ldd	r24, Y+2	; 0x02
  48:	89 2b       	or	r24, r25
  4a:	8a 83       	std	Y+2, r24	; 0x02
  4c:	00 c0       	rjmp	.+0      	; 0x4e <shiftIn+0x4e>
		else
			value |= digitalRead(dataPin) << (7 - i);
  4e:	8b 81       	ldd	r24, Y+3	; 0x03
  50:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  54:	ac 01       	movw	r20, r24
  56:	89 81       	ldd	r24, Y+1	; 0x01
  58:	28 2f       	mov	r18, r24
  5a:	30 e0       	ldi	r19, 0x00	; 0
  5c:	87 e0       	ldi	r24, 0x07	; 7
  5e:	90 e0       	ldi	r25, 0x00	; 0
  60:	82 1b       	sub	r24, r18
  62:	93 0b       	sbc	r25, r19
  64:	9a 01       	movw	r18, r20
  66:	00 c0       	rjmp	.+0      	; 0x68 <shiftIn+0x68>
  68:	22 0f       	add	r18, r18
  6a:	33 1f       	adc	r19, r19
  6c:	8a 95       	dec	r24
  6e:	02 f4       	brpl	.+0      	; 0x70 <shiftIn+0x70>
  70:	c9 01       	movw	r24, r18
  72:	98 2f       	mov	r25, r24
  74:	8a 81       	ldd	r24, Y+2	; 0x02
  76:	89 2b       	or	r24, r25
  78:	8a 83       	std	Y+2, r24	; 0x02
		digitalWrite(clockPin, LOW);
  7a:	8c 81       	ldd	r24, Y+4	; 0x04
  7c:	60 e0       	ldi	r22, 0x00	; 0
  7e:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

uint8_t shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder) {
	uint8_t value = 0;
	uint8_t i;

	for (i = 0; i < 8; ++i) {
  82:	89 81       	ldd	r24, Y+1	; 0x01
  84:	8f 5f       	subi	r24, 0xFF	; 255
  86:	89 83       	std	Y+1, r24	; 0x01
  88:	89 81       	ldd	r24, Y+1	; 0x01
  8a:	88 30       	cpi	r24, 0x08	; 8
  8c:	00 f0       	brcs	.+0      	; 0x8e <shiftIn+0x8e>
			value |= digitalRead(dataPin) << i;
		else
			value |= digitalRead(dataPin) << (7 - i);
		digitalWrite(clockPin, LOW);
	}
	return value;
  8e:	8a 81       	ldd	r24, Y+2	; 0x02
}
  90:	0f 90       	pop	r0
  92:	0f 90       	pop	r0
  94:	0f 90       	pop	r0
  96:	0f 90       	pop	r0
  98:	0f 90       	pop	r0
  9a:	cf 91       	pop	r28
  9c:	df 91       	pop	r29
  9e:	08 95       	ret

000000a0 <shiftOut>:

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  a0:	df 93       	push	r29
  a2:	cf 93       	push	r28
  a4:	00 d0       	rcall	.+0      	; 0xa6 <shiftOut+0x6>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <shiftOut+0x8>
  a8:	0f 92       	push	r0
  aa:	cd b7       	in	r28, 0x3d	; 61
  ac:	de b7       	in	r29, 0x3e	; 62
  ae:	8a 83       	std	Y+2, r24	; 0x02
  b0:	6b 83       	std	Y+3, r22	; 0x03
  b2:	4c 83       	std	Y+4, r20	; 0x04
  b4:	2d 83       	std	Y+5, r18	; 0x05
	uint8_t i;

	for (i = 0; i < 8; i++)  {
  b6:	19 82       	std	Y+1, r1	; 0x01
  b8:	00 c0       	rjmp	.+0      	; 0xba <shiftOut+0x1a>
		if (bitOrder == LSBFIRST)
  ba:	8c 81       	ldd	r24, Y+4	; 0x04
  bc:	88 23       	and	r24, r24
  be:	01 f4       	brne	.+0      	; 0xc0 <shiftOut+0x20>
			digitalWrite(dataPin, !!(val & (1 << i)));
  c0:	8d 81       	ldd	r24, Y+5	; 0x05
  c2:	28 2f       	mov	r18, r24
  c4:	30 e0       	ldi	r19, 0x00	; 0
  c6:	89 81       	ldd	r24, Y+1	; 0x01
  c8:	88 2f       	mov	r24, r24
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	a9 01       	movw	r20, r18
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <shiftOut+0x30>
  d0:	55 95       	asr	r21
  d2:	47 95       	ror	r20
  d4:	8a 95       	dec	r24
  d6:	02 f4       	brpl	.+0      	; 0xd8 <shiftOut+0x38>
  d8:	ca 01       	movw	r24, r20
  da:	98 2f       	mov	r25, r24
  dc:	91 70       	andi	r25, 0x01	; 1
  de:	8a 81       	ldd	r24, Y+2	; 0x02
  e0:	69 2f       	mov	r22, r25
  e2:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <shiftOut+0x48>
		else	
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
  e8:	8d 81       	ldd	r24, Y+5	; 0x05
  ea:	48 2f       	mov	r20, r24
  ec:	50 e0       	ldi	r21, 0x00	; 0
  ee:	89 81       	ldd	r24, Y+1	; 0x01
  f0:	28 2f       	mov	r18, r24
  f2:	30 e0       	ldi	r19, 0x00	; 0
  f4:	87 e0       	ldi	r24, 0x07	; 7
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	82 1b       	sub	r24, r18
  fa:	93 0b       	sbc	r25, r19
  fc:	9a 01       	movw	r18, r20
  fe:	00 c0       	rjmp	.+0      	; 0x100 <shiftOut+0x60>
 100:	35 95       	asr	r19
 102:	27 95       	ror	r18
 104:	8a 95       	dec	r24
 106:	02 f4       	brpl	.+0      	; 0x108 <shiftOut+0x68>
 108:	c9 01       	movw	r24, r18
 10a:	98 2f       	mov	r25, r24
 10c:	91 70       	andi	r25, 0x01	; 1
 10e:	8a 81       	ldd	r24, Y+2	; 0x02
 110:	69 2f       	mov	r22, r25
 112:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
			
		digitalWrite(clockPin, HIGH);
 116:	8b 81       	ldd	r24, Y+3	; 0x03
 118:	61 e0       	ldi	r22, 0x01	; 1
 11a:	0e 94 00 00 	call	0	; 0x0 <shiftIn>
		digitalWrite(clockPin, LOW);		
 11e:	8b 81       	ldd	r24, Y+3	; 0x03
 120:	60 e0       	ldi	r22, 0x00	; 0
 122:	0e 94 00 00 	call	0	; 0x0 <shiftIn>

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 126:	89 81       	ldd	r24, Y+1	; 0x01
 128:	8f 5f       	subi	r24, 0xFF	; 255
 12a:	89 83       	std	Y+1, r24	; 0x01
 12c:	89 81       	ldd	r24, Y+1	; 0x01
 12e:	88 30       	cpi	r24, 0x08	; 8
 130:	00 f0       	brcs	.+0      	; 0x132 <shiftOut+0x92>
			digitalWrite(dataPin, !!(val & (1 << (7 - i))));
			
		digitalWrite(clockPin, HIGH);
		digitalWrite(clockPin, LOW);		
	}
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	0f 90       	pop	r0
 13c:	cf 91       	pop	r28
 13e:	df 91       	pop	r29
 140:	08 95       	ret
